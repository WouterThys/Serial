

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 29 15:54:45 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  001284                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _ackCharacter
    45  001284  2D                 	db	low STR_4
    46  001285  08                 	db	high STR_4
    47                           
    48                           ;initializer for _startCharacter
    49  001286  3F                 	db	low STR_1
    50  001287  08                 	db	high STR_1
    51                           
    52                           ;initializer for _stopCharacter
    53  001288  3D                 	db	low STR_2
    54  001289  08                 	db	high STR_2
    55                           
    56                           	psect	idataBANK0
    57  00128A                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _messageCharacter
    61  00128A  31                 	db	low STR_3
    62  00128B  08                 	db	high STR_3
    63                           
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	opt stack 0
    67  000800  00                 	db	0
    68  000801                     _hexpowers:
    69                           	opt stack 0
    70  000801  0001               	dw	1
    71  000803  0010               	dw	16
    72  000805  0100               	dw	256
    73  000807  1000               	dw	4096
    74  000809                     __end_of_hexpowers:
    75                           	opt stack 0
    76  000809                     STR_14:
    77  000809  30                 	db	48	;'0'
    78  00080A  31                 	db	49	;'1'
    79  00080B  32                 	db	50	;'2'
    80  00080C  33                 	db	51	;'3'
    81  00080D  34                 	db	52	;'4'
    82  00080E  35                 	db	53	;'5'
    83  00080F  36                 	db	54	;'6'
    84  000810  37                 	db	55	;'7'
    85  000811  38                 	db	56	;'8'
    86  000812  39                 	db	57	;'9'
    87  000813  61                 	db	97	;'a'
    88  000814  62                 	db	98	;'b'
    89  000815  63                 	db	99	;'c'
    90  000816  64                 	db	100	;'d'
    91  000817  65                 	db	101	;'e'
    92  000818  66                 	db	102	;'f'
    93  000819  00                 	db	0
    94  00081A                     STR_8:
    95  00081A  50                 	db	80	;'P'
    96  00081B  61                 	db	97	;'a'
    97  00081C  6E                 	db	110	;'n'
    98  00081D  64                 	db	100	;'d'
    99  00081E  61                 	db	97	;'a'
   100  00081F  00                 	db	0
   101  000820                     STR_10:
   102  000820  49                 	db	73	;'I'
   103  000821  6E                 	db	110	;'n'
   104  000822  69                 	db	105	;'i'
   105  000823  74                 	db	116	;'t'
   106  000824  00                 	db	0
   107  000825                     STR_11:
   108  000825  6C                 	db	108	;'l'
   109  000826  65                 	db	101	;'e'
   110  000827  64                 	db	100	;'d'
   111  000828  00                 	db	0
   112  000829                     STR_13:
   113  000829  6F                 	db	111	;'o'
   114  00082A  66                 	db	102	;'f'
   115  00082B  66                 	db	102	;'f'
   116  00082C  00                 	db	0
   117  00082D                     STR_4:
   118  00082D  5B                 	db	91	;'['
   119  00082E  41                 	db	65	;'A'
   120  00082F  5D                 	db	93	;']'
   121  000830  00                 	db	0
   122  000831                     STR_3:
   123  000831  5B                 	db	91	;'['
   124  000832  4D                 	db	77	;'M'
   125  000833  5D                 	db	93	;']'
   126  000834  00                 	db	0
   127  000835                     STR_12:
   128  000835  6F                 	db	111	;'o'
   129  000836  6E                 	db	110	;'n'
   130  000837  00                 	db	0
   131  000838                     STR_5:
   132  000838  25                 	db	37
   133  000839  78                 	db	120	;'x'
   134  00083A  00                 	db	0
   135  00083B                     STR_9:
   136  00083B  49                 	db	73	;'I'
   137  00083C  00                 	db	0
   138  00083D                     STR_2:
   139  00083D  24                 	db	36
   140  00083E  00                 	db	0
   141  00083F                     STR_1:
   142  00083F  26                 	db	38
   143  000840  00                 	db	0
   144  000841                     STR_6:
   145  000841  3A                 	db	58	;':'
   146  000842  00                 	db	0
   147  0000                     
   148                           ; #config settings
   149  000843  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           	psect	nvBANK0
   152  00007A                     __pnvBANK0:
   153                           	opt stack 0
   154  00007A                     _deviceName:
   155                           	opt stack 0
   156  00007A                     	ds	3
   157  0000                     _PORTA	set	3968
   158  0000                     _PORTAbits	set	3968
   159  0000                     _PORTB	set	3969
   160  0000                     _PORTC	set	3970
   161  0000                     _TRISA	set	3986
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISCbits	set	3988
   165  0000                     _ADCON1	set	4033
   166  0000                     _BAUDCONbits	set	4024
   167  0000                     _IPR1bits	set	3999
   168  0000                     _PIE1bits	set	3997
   169  0000                     _PIR1bits	set	3998
   170  0000                     _RCONbits	set	4048
   171  0000                     _RCREG	set	4014
   172  0000                     _RCSTAbits	set	4011
   173  0000                     _SPBRG	set	4015
   174  0000                     _TXREG	set	4013
   175  0000                     _TXSTAbits	set	4012
   176  0000                     _INTCONbits	set	4082
   177                           
   178                           	psect	cinit
   179  0010D2                     __pcinit:
   180                           	opt stack 0
   181  0010D2                     start_initialization:
   182                           	opt stack 0
   183  0010D2                     __initialization:
   184                           	opt stack 0
   185                           
   186                           ; Clear objects allocated to BANK1 (166 bytes)
   187  0010D2  EE01  F000         	lfsr	0,__pbssBANK1
   188  0010D6  0EA6               	movlw	166
   189  0010D8                     clear_0:
   190  0010D8  6AEE               	clrf	postinc0,c
   191  0010DA  06E8               	decf	wreg,f,c
   192  0010DC  E1FD               	bnz	clear_0
   193                           
   194                           ; Clear objects allocated to COMRAM (14 bytes)
   195  0010DE  EE00  F02A         	lfsr	0,__pbssCOMRAM
   196  0010E2  0E0E               	movlw	14
   197  0010E4                     clear_1:
   198  0010E4  6AEE               	clrf	postinc0,c
   199  0010E6  06E8               	decf	wreg,f,c
   200  0010E8  E1FD               	bnz	clear_1
   201                           
   202                           ; Initialize objects allocated to BANK0 (2 bytes)
   203                           ; load TBLPTR registers with __pidataBANK0
   204  0010EA  0E8A               	movlw	low __pidataBANK0
   205  0010EC  6EF6               	movwf	tblptrl,c
   206  0010EE  0E12               	movlw	high __pidataBANK0
   207  0010F0  6EF7               	movwf	tblptrh,c
   208  0010F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   209  0010F4  6EF8               	movwf	tblptru,c
   210  0010F6  0009               	tblrd		*+	;fetch initializer
   211  0010F8  CFF5 F07D          	movff	tablat,__pdataBANK0
   212  0010FC  0009               	tblrd		*+	;fetch initializer
   213  0010FE  CFF5 F07E          	movff	tablat,__pdataBANK0+1
   214                           
   215                           ; Initialize objects allocated to COMRAM (6 bytes)
   216                           ; load TBLPTR registers with __pidataCOMRAM
   217  001102  0E84               	movlw	low __pidataCOMRAM
   218  001104  6EF6               	movwf	tblptrl,c
   219  001106  0E12               	movlw	high __pidataCOMRAM
   220  001108  6EF7               	movwf	tblptrh,c
   221  00110A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   222  00110C  6EF8               	movwf	tblptru,c
   223  00110E  EE00  F038         	lfsr	0,__pdataCOMRAM
   224  001112  EE10 F006          	lfsr	1,6
   225  001116                     copy_data0:
   226  001116  0009               	tblrd		*+
   227  001118  CFF5 FFEE          	movff	tablat,postinc0
   228  00111C  50E5               	movf	postdec1,w,c
   229  00111E  50E1               	movf	fsr1l,w,c
   230  001120  E1FA               	bnz	copy_data0
   231  001122                     end_of_initialization:
   232                           	opt stack 0
   233  001122                     __end_of__initialization:
   234                           	opt stack 0
   235  001122  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   236  001124  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   237  001126  0E00               	movlw	low (__Lmediumconst shr (0+16))
   238  001128  6EF8               	movwf	tblptru,c
   239  00112A  0100               	movlb	0
   240  00112C  EFD7  F006         	goto	_main	;jump to C main() function
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           tblptrl	equ	0xFF6
   244                           tablat	equ	0xFF5
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           postdec1	equ	0xFE5
   248                           fsr1l	equ	0xFE1
   249                           
   250                           	psect	bssCOMRAM
   251  00002A                     __pbssCOMRAM:
   252                           	opt stack 0
   253  00002A                     _read:
   254                           	opt stack 0
   255  00002A                     	ds	6
   256  000030                     _readData:
   257                           	opt stack 0
   258  000030                     	ds	6
   259  000036                     _baud:
   260                           	opt stack 0
   261  000036                     	ds	1
   262  000037                     _readReady:
   263                           	opt stack 0
   264  000037                     	ds	1
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	dataCOMRAM
   275  000038                     __pdataCOMRAM:
   276                           	opt stack 0
   277  000038                     _ackCharacter:
   278                           	opt stack 0
   279  000038                     	ds	2
   280  00003A                     _startCharacter:
   281                           	opt stack 0
   282  00003A                     	ds	2
   283  00003C                     _stopCharacter:
   284                           	opt stack 0
   285  00003C                     	ds	2
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	dataBANK0
   296  00007D                     __pdataBANK0:
   297                           	opt stack 0
   298  00007D                     _messageCharacter:
   299                           	opt stack 0
   300  00007D                     	ds	2
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           postdec1	equ	0xFE5
   308                           fsr1l	equ	0xFE1
   309                           
   310                           	psect	bssBANK1
   311  000100                     __pbssBANK1:
   312                           	opt stack 0
   313  000100                     _readBuffer:
   314                           	opt stack 0
   315  000100                     	ds	166
   316                           tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           postdec1	equ	0xFE5
   323                           fsr1l	equ	0xFE1
   324                           
   325                           	psect	cstackBANK0
   326  000060                     __pcstackBANK0:
   327                           	opt stack 0
   328  000060                     ?_strcmp:
   329                           	opt stack 0
   330  000060                     ?___lwdiv:
   331                           	opt stack 0
   332  000060                     ?___aldiv:
   333                           	opt stack 0
   334  000060                     ?_D_UART_Read:
   335                           	opt stack 0
   336  000060                     writeByte@data:
   337                           	opt stack 0
   338  000060                     D_UART_Enable@enable:
   339                           	opt stack 0
   340  000060                     ___lwdiv@dividend:
   341                           	opt stack 0
   342  000060                     strcmp@s1:
   343                           	opt stack 0
   344  000060                     ___aldiv@dividend:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x0
   348  000060                     	ds	1
   349  000061                     putch@data:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x1
   353  000061                     	ds	1
   354  000062                     ___lwdiv@divisor:
   355                           	opt stack 0
   356  000062                     strcmp@s2:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2
   360  000062                     	ds	2
   361  000064                     ??_strcmp:
   362  000064                     ___lwdiv@counter:
   363                           	opt stack 0
   364  000064                     ___aldiv@divisor:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x4
   368  000064                     	ds	1
   369  000065                     strcmp@r:
   370                           	opt stack 0
   371  000065                     ___lwdiv@quotient:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x5
   375  000065                     	ds	1
   376  000066                     
   377                           ; 1 bytes @ 0x6
   378  000066                     	ds	1
   379  000067                     ?_printf:
   380                           	opt stack 0
   381  000067                     printf@f:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x7
   385  000067                     	ds	1
   386  000068                     ___aldiv@counter:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x8
   390  000068                     	ds	1
   391  000069                     ___aldiv@sign:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x9
   395  000069                     	ds	1
   396  00006A                     ??_printf:
   397  00006A                     ___aldiv@quotient:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0xA
   401  00006A                     	ds	3
   402  00006D                     printf@flag:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  00006D                     	ds	1
   407  00006E                     printf@idx:
   408                           	opt stack 0
   409  00006E                     D_UART_Init@name:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0xE
   413  00006E                     	ds	1
   414  00006F                     printf@ap:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0xF
   418  00006F                     	ds	1
   419  000070                     D_UART_Init@baud:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x10
   423  000070                     	ds	1
   424  000071                     printf@val:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x11
   428  000071                     	ds	1
   429  000072                     D_UART_Init@interrupts:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x12
   433  000072                     	ds	1
   434  000073                     printf@prec:
   435                           	opt stack 0
   436  000073                     _D_UART_Init$1304:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x13
   440  000073                     	ds	1
   441  000074                     printf@c:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x14
   445  000074                     	ds	1
   446  000075                     D_UART_Write@command:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x15
   450  000075                     	ds	2
   451  000077                     D_UART_Write@data:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x17
   455  000077                     	ds	2
   456  000079                     ??_D_UART_Write:
   457                           
   458                           ; 1 bytes @ 0x19
   459  000079                     	ds	1
   460  00007A                     tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           
   469                           ; 1 bytes @ 0x1A
   470                           
   471                           	psect	cstackCOMRAM
   472  000001                     __pcstackCOMRAM:
   473                           	opt stack 0
   474  000001                     ?i1___lwdiv:
   475                           	opt stack 0
   476  000001                     i1writeByte@data:
   477                           	opt stack 0
   478  000001                     i1___lwdiv@dividend:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x0
   482  000001                     	ds	1
   483  000002                     i1putch@data:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487  000002                     	ds	1
   488  000003                     i1___lwdiv@divisor:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x2
   492  000003                     	ds	2
   493  000005                     i1___lwdiv@quotient:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x4
   497  000005                     	ds	2
   498  000007                     i1___lwdiv@counter:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x6
   502  000007                     	ds	1
   503  000008                     ?i1_printf:
   504                           	opt stack 0
   505  000008                     i1printf@f:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0x7
   509  000008                     	ds	5
   510  00000D                     ??i1_printf:
   511                           
   512                           ; 1 bytes @ 0xC
   513  00000D                     	ds	3
   514  000010                     i1printf@flag:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0xF
   518  000010                     	ds	1
   519  000011                     i1printf@ap:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x10
   523  000011                     	ds	2
   524  000013                     i1printf@idx:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x12
   528  000013                     	ds	1
   529  000014                     i1printf@val:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x13
   533  000014                     	ds	2
   534  000016                     i1printf@prec:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x15
   538  000016                     	ds	1
   539  000017                     i1printf@c:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x16
   543  000017                     	ds	1
   544  000018                     fillDataBuffer@data:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x17
   548  000018                     	ds	1
   549  000019                     ??_LowISR:
   550                           
   551                           ; 1 bytes @ 0x18
   552  000019                     	ds	17
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 20 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   581 ;;      Params:         0       0       0       0       0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0       0       0       0       0
   584 ;;      Totals:         0       0       0       0       0       0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels required when called:   10
   587 ;; This function calls:
   588 ;;		_D_PORT_Init
   589 ;;		_D_UART_Enable
   590 ;;		_D_UART_Init
   591 ;;		_D_UART_Read
   592 ;;		_D_UART_Write
   593 ;;		_strcmp
   594 ;; This function is called by:
   595 ;;		Startup code after reset
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text0
   600  000DAE                     __ptext0:
   601                           	opt stack 0
   602  000DAE                     _main:
   603                           	opt stack 21
   604                           
   605                           ;main.c: 22: D_PORT_Init();
   606                           
   607                           ;incstack = 0
   608  000DAE  EC16  F009         	call	_D_PORT_Init	;wreg free
   609                           
   610                           ;main.c: 25: D_UART_Init("Panda", 9600, 1);
   611  000DB2  0E1A               	movlw	low STR_8
   612  000DB4  0100               	movlb	0	; () banked
   613  000DB6  6F6E               	movwf	D_UART_Init@name& (0+255),b
   614  000DB8  0E08               	movlw	high STR_8
   615  000DBA  0100               	movlb	0	; () banked
   616  000DBC  6F6F               	movwf	(D_UART_Init@name+1)& (0+255),b
   617  000DBE  0E25               	movlw	37
   618  000DC0  0100               	movlb	0	; () banked
   619  000DC2  6F71               	movwf	(D_UART_Init@baud+1)& (0+255),b
   620  000DC4  0E80               	movlw	128
   621  000DC6  6F70               	movwf	D_UART_Init@baud& (0+255),b
   622  000DC8  0E01               	movlw	1
   623  000DCA  0100               	movlb	0	; () banked
   624  000DCC  6F72               	movwf	D_UART_Init@interrupts& (0+255),b
   625  000DCE  ECA9  F007         	call	_D_UART_Init	;wreg free
   626                           
   627                           ;main.c: 26: D_UART_Enable(1);
   628  000DD2  0E01               	movlw	1
   629  000DD4  EC03  F009         	call	_D_UART_Enable
   630                           
   631                           ;main.c: 28: D_UART_Write("I", "Init");
   632  000DD8  0E3B               	movlw	low STR_9
   633  000DDA  0100               	movlb	0	; () banked
   634  000DDC  6F75               	movwf	D_UART_Write@command& (0+255),b
   635  000DDE  0E08               	movlw	high STR_9
   636  000DE0  0100               	movlb	0	; () banked
   637  000DE2  6F76               	movwf	(D_UART_Write@command+1)& (0+255),b
   638  000DE4  0E20               	movlw	low STR_10
   639  000DE6  0100               	movlb	0	; () banked
   640  000DE8  6F77               	movwf	D_UART_Write@data& (0+255),b
   641  000DEA  0E08               	movlw	high STR_10
   642  000DEC  0100               	movlb	0	; () banked
   643  000DEE  6F78               	movwf	(D_UART_Write@data+1)& (0+255),b
   644  000DF0  EC40  F007         	call	_D_UART_Write	;wreg free
   645  000DF4                     l1692:
   646                           
   647                           ;main.c: 30: if(readReady) {
   648  000DF4  5037               	movf	_readReady,w,c
   649  000DF6  B4D8               	btfsc	status,2,c
   650  000DF8  D7FD               	goto	l1692
   651                           
   652                           ;main.c: 31: readReady = 0;
   653  000DFA  0E00               	movlw	0
   654  000DFC  6E37               	movwf	_readReady,c
   655                           
   656                           ;main.c: 32: read = D_UART_Read();
   657  000DFE  ECED  F008         	call	_D_UART_Read	;wreg free
   658  000E02  EE20  F02A         	lfsr	2,_read
   659  000E06  0E05               	movlw	5
   660  000E08                     u1171:
   661  000E08  CFEB FFDB          	movff	plusw0,plusw2
   662  000E0C  06E8               	decf	wreg,f,c
   663  000E0E  E2FC               	bc	u1171
   664                           
   665                           ;main.c: 33: if (strcmp(read.command, "led") == 0) {
   666  000E10  C02C  F060         	movff	_read+2,strcmp@s1
   667  000E14  C02D  F061         	movff	_read+3,strcmp@s1+1
   668  000E18  0E25               	movlw	low STR_11
   669  000E1A  0100               	movlb	0	; () banked
   670  000E1C  6F62               	movwf	strcmp@s2& (0+255),b
   671  000E1E  0E08               	movlw	high STR_11
   672  000E20  0100               	movlb	0	; () banked
   673  000E22  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   674  000E24  EC98  F008         	call	_strcmp	;wreg free
   675  000E28  0100               	movlb	0	; () banked
   676  000E2A  5160               	movf	?_strcmp& (0+255),w,b
   677  000E2C  0100               	movlb	0	; () banked
   678  000E2E  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   679  000E30  A4D8               	btfss	status,2,c
   680  000E32  D7E0               	goto	l1692
   681                           
   682                           ; BSR set to: 0
   683                           ;main.c: 34: if (strcmp(read.message, "on") == 0) {
   684  000E34  C02E  F060         	movff	_read+4,strcmp@s1
   685  000E38  C02F  F061         	movff	_read+5,strcmp@s1+1
   686  000E3C  0E35               	movlw	low STR_12
   687  000E3E  0100               	movlb	0	; () banked
   688  000E40  6F62               	movwf	strcmp@s2& (0+255),b
   689  000E42  0E08               	movlw	high STR_12
   690  000E44  0100               	movlb	0	; () banked
   691  000E46  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   692  000E48  EC98  F008         	call	_strcmp	;wreg free
   693  000E4C  0100               	movlb	0	; () banked
   694  000E4E  5160               	movf	?_strcmp& (0+255),w,b
   695  000E50  0100               	movlb	0	; () banked
   696  000E52  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   697  000E54  B4D8               	btfsc	status,2,c
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 35: PORTAbits.RA0 = 1;
   701  000E56  8080               	bsf	3968,0,c	;volatile
   702                           
   703                           ; BSR set to: 0
   704                           ;main.c: 36: }
   705                           ;main.c: 37: if (strcmp(read.message, "off") == 0) {
   706                           
   707                           ; BSR set to: 0
   708  000E58  C02E  F060         	movff	_read+4,strcmp@s1
   709  000E5C  C02F  F061         	movff	_read+5,strcmp@s1+1
   710  000E60  0E29               	movlw	low STR_13
   711  000E62  0100               	movlb	0	; () banked
   712  000E64  6F62               	movwf	strcmp@s2& (0+255),b
   713  000E66  0E08               	movlw	high STR_13
   714  000E68  0100               	movlb	0	; () banked
   715  000E6A  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   716  000E6C  EC98  F008         	call	_strcmp	;wreg free
   717  000E70  0100               	movlb	0	; () banked
   718  000E72  5160               	movf	?_strcmp& (0+255),w,b
   719  000E74  0100               	movlb	0	; () banked
   720  000E76  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   721  000E78  A4D8               	btfss	status,2,c
   722  000E7A  D7BC               	goto	l1692
   723                           
   724                           ; BSR set to: 0
   725                           ;main.c: 38: PORTAbits.RA0 = 0;
   726  000E7C  9080               	bcf	3968,0,c	;volatile
   727                           
   728                           ; BSR set to: 0
   729                           
   730                           ; BSR set to: 0
   731                           
   732                           ; BSR set to: 0
   733                           
   734                           ; BSR set to: 0
   735  000E7E  D7BA               	goto	l1692
   736  000E80                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           plusw0	equ	0xFEB
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           plusw2	equ	0xFDB
   748                           status	equ	0xFD8
   749                           
   750 ;; *************** function _strcmp *****************
   751 ;; Defined at:
   752 ;;		line 33 in file "/opt/microchip/xc8/v1.37/sources/common/strcmp.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   755 ;;		 -> readBuffer(166), 
   756 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   757 ;;		 -> STR_13(4), STR_12(3), STR_11(4), 
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  r               1    5[BANK0 ] char 
   760 ;; Return value:  Size  Location     Type
   761 ;;                  2    0[BANK0 ] int 
   762 ;; Registers used:
   763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   769 ;;      Params:         0       4       0       0       0       0       0       0       0
   770 ;;      Locals:         0       1       0       0       0       0       0       0       0
   771 ;;      Temps:          0       1       0       0       0       0       0       0       0
   772 ;;      Totals:         0       6       0       0       0       0       0       0       0
   773 ;;Total ram usage:        6 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    6
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text1
   784  001130                     __ptext1:
   785                           	opt stack 0
   786  001130                     _strcmp:
   787                           	opt stack 24
   788                           
   789                           ; BSR set to: 0
   790                           ;incstack = 0
   791  001130  D006               	goto	l1676
   792  001132                     l1674:
   793  001132  0100               	movlb	0	; () banked
   794  001134  4B60               	infsnz	strcmp@s1& (0+255),f,b
   795  001136  2B61               	incf	(strcmp@s1+1)& (0+255),f,b
   796  001138  0100               	movlb	0	; () banked
   797  00113A  4B62               	infsnz	strcmp@s2& (0+255),f,b
   798  00113C  2B63               	incf	(strcmp@s2+1)& (0+255),f,b
   799  00113E                     l1676:
   800  00113E  C060  FFD9         	movff	strcmp@s1,fsr2l
   801  001142  C061  FFDA         	movff	strcmp@s1+1,fsr2h
   802  001146  50DF               	movf	indf2,w,c
   803  001148  0100               	movlb	0	; () banked
   804  00114A  6F64               	movwf	??_strcmp& (0+255),b
   805  00114C  C062  FFF6         	movff	strcmp@s2,tblptrl
   806  001150  C063  FFF7         	movff	strcmp@s2+1,tblptrh
   807  001154                     	if	0	;tblptru may be non-zero
   808  001154                     	endif
   809  001154                     	if	0	;tblptru may be non-zero
   810  001154                     	endif
   811  001154  0008               	tblrd		*
   812  001156  50F5               	movf	tablat,w,c
   813  001158  0800               	sublw	0
   814  00115A  0100               	movlb	0	; () banked
   815  00115C  2564               	addwf	??_strcmp& (0+255),w,b
   816  00115E  0100               	movlb	0	; () banked
   817  001160  6F65               	movwf	strcmp@r& (0+255),b
   818  001162  0100               	movlb	0	; () banked
   819  001164  5165               	movf	strcmp@r& (0+255),w,b
   820  001166  A4D8               	btfss	status,2,c
   821  001168  D007               	goto	l1680
   822                           
   823                           ; BSR set to: 0
   824  00116A  C060  FFD9         	movff	strcmp@s1,fsr2l
   825  00116E  C061  FFDA         	movff	strcmp@s1+1,fsr2h
   826  001172  50DF               	movf	indf2,w,c
   827  001174  A4D8               	btfss	status,2,c
   828  001176  D7DD               	goto	l1674
   829  001178                     l1680:
   830                           
   831                           ; BSR set to: 0
   832  001178  0100               	movlb	0	; () banked
   833  00117A  5165               	movf	strcmp@r& (0+255),w,b
   834  00117C  0100               	movlb	0	; () banked
   835  00117E  6F60               	movwf	?_strcmp& (0+255),b
   836  001180  6B61               	clrf	(?_strcmp+1)& (0+255),b
   837  001182  BF60               	btfsc	?_strcmp& (0+255),7,b
   838  001184  0761               	decf	(?_strcmp+1)& (0+255),f,b
   839  001186  0012               	return	
   840  001188                     __end_of_strcmp:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           postinc0	equ	0xFEE
   847                           plusw0	equ	0xFEB
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           indf2	equ	0xFDF
   852                           plusw2	equ	0xFDB
   853                           fsr2h	equ	0xFDA
   854                           fsr2l	equ	0xFD9
   855                           status	equ	0xFD8
   856                           
   857 ;; *************** function _D_UART_Write *****************
   858 ;; Defined at:
   859 ;;		line 223 in file "Drivers/UART_Driver.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  command         2   21[BANK0 ] PTR const unsigned char 
   862 ;;		 -> STR_9(2), 
   863 ;;  data            2   23[BANK0 ] PTR const unsigned char 
   864 ;;		 -> STR_10(5), 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   876 ;;      Params:         0       4       0       0       0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0       0       0
   878 ;;      Temps:          0       1       0       0       0       0       0       0       0
   879 ;;      Totals:         0       5       0       0       0       0       0       0       0
   880 ;;Total ram usage:        5 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    9
   883 ;; This function calls:
   884 ;;		_printf
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text2
   891  000E80                     __ptext2:
   892                           	opt stack 0
   893  000E80                     _D_UART_Write:
   894                           	opt stack 21
   895                           
   896                           ;UART_Driver.c: 224: printf(startCharacter);
   897                           
   898                           ; BSR set to: 0
   899                           ;incstack = 0
   900  000E80  C03A  F067         	movff	_startCharacter,printf@f
   901  000E84  C03B  F068         	movff	_startCharacter+1,printf@f+1
   902  000E88  0100               	movlb	0	; () banked
   903  000E8A  5167               	movf	printf@f& (0+255),w,b
   904  000E8C  1168               	iorwf	(printf@f+1)& (0+255),w,b
   905  000E8E  A4D8               	btfss	status,2,c
   906  000E90  0E00               	movlw	low (__mediumconst shr (0+16))
   907  000E92  6F69               	movwf	(printf@f+2)& (0+255),b
   908  000E94  EC08  F005         	call	_printf	;wreg free
   909                           
   910                           ;UART_Driver.c: 226: printf(messageCharacter);
   911  000E98  C07D  F067         	movff	_messageCharacter,printf@f
   912  000E9C  C07E  F068         	movff	_messageCharacter+1,printf@f+1
   913  000EA0  0100               	movlb	0	; () banked
   914  000EA2  5167               	movf	printf@f& (0+255),w,b
   915  000EA4  1168               	iorwf	(printf@f+1)& (0+255),w,b
   916  000EA6  A4D8               	btfss	status,2,c
   917  000EA8  0E00               	movlw	low (__mediumconst shr (0+16))
   918  000EAA  6F69               	movwf	(printf@f+2)& (0+255),b
   919  000EAC  EC08  F005         	call	_printf	;wreg free
   920                           
   921                           ;UART_Driver.c: 227: printf(deviceName);
   922  000EB0  C07A  F067         	movff	_deviceName,printf@f
   923  000EB4  C07B  F068         	movff	_deviceName+1,printf@f+1
   924  000EB8  C07C  F069         	movff	_deviceName+2,printf@f+2
   925  000EBC  EC08  F005         	call	_printf	;wreg free
   926                           
   927                           ;UART_Driver.c: 229: printf(":");printf(command);
   928  000EC0  0E41               	movlw	low STR_6
   929  000EC2  0100               	movlb	0	; () banked
   930  000EC4  6F67               	movwf	printf@f& (0+255),b
   931  000EC6  0E08               	movlw	high STR_6
   932  000EC8  0100               	movlb	0	; () banked
   933  000ECA  6F68               	movwf	(printf@f+1)& (0+255),b
   934  000ECC  0100               	movlb	0	; () banked
   935  000ECE  5167               	movf	printf@f& (0+255),w,b
   936  000ED0  1168               	iorwf	(printf@f+1)& (0+255),w,b
   937  000ED2  A4D8               	btfss	status,2,c
   938  000ED4  0E00               	movlw	low (__mediumconst shr (0+16))
   939  000ED6  6F69               	movwf	(printf@f+2)& (0+255),b
   940  000ED8  EC08  F005         	call	_printf	;wreg free
   941  000EDC  C075  F067         	movff	D_UART_Write@command,printf@f
   942  000EE0  C076  F068         	movff	D_UART_Write@command+1,printf@f+1
   943  000EE4  0100               	movlb	0	; () banked
   944  000EE6  5167               	movf	printf@f& (0+255),w,b
   945  000EE8  1168               	iorwf	(printf@f+1)& (0+255),w,b
   946  000EEA  A4D8               	btfss	status,2,c
   947  000EEC  0E00               	movlw	low (__mediumconst shr (0+16))
   948  000EEE  6F69               	movwf	(printf@f+2)& (0+255),b
   949  000EF0  EC08  F005         	call	_printf	;wreg free
   950                           
   951                           ;UART_Driver.c: 231: printf(":");printf(data);
   952  000EF4  0E41               	movlw	low STR_6
   953  000EF6  0100               	movlb	0	; () banked
   954  000EF8  6F67               	movwf	printf@f& (0+255),b
   955  000EFA  0E08               	movlw	high STR_6
   956  000EFC  0100               	movlb	0	; () banked
   957  000EFE  6F68               	movwf	(printf@f+1)& (0+255),b
   958  000F00  0100               	movlb	0	; () banked
   959  000F02  5167               	movf	printf@f& (0+255),w,b
   960  000F04  1168               	iorwf	(printf@f+1)& (0+255),w,b
   961  000F06  A4D8               	btfss	status,2,c
   962  000F08  0E00               	movlw	low (__mediumconst shr (0+16))
   963  000F0A  6F69               	movwf	(printf@f+2)& (0+255),b
   964  000F0C  EC08  F005         	call	_printf	;wreg free
   965  000F10  C077  F067         	movff	D_UART_Write@data,printf@f
   966  000F14  C078  F068         	movff	D_UART_Write@data+1,printf@f+1
   967  000F18  0100               	movlb	0	; () banked
   968  000F1A  5167               	movf	printf@f& (0+255),w,b
   969  000F1C  1168               	iorwf	(printf@f+1)& (0+255),w,b
   970  000F1E  A4D8               	btfss	status,2,c
   971  000F20  0E00               	movlw	low (__mediumconst shr (0+16))
   972  000F22  6F69               	movwf	(printf@f+2)& (0+255),b
   973  000F24  EC08  F005         	call	_printf	;wreg free
   974                           
   975                           ;UART_Driver.c: 233: printf(stopCharacter);
   976  000F28  C03C  F067         	movff	_stopCharacter,printf@f
   977  000F2C  C03D  F068         	movff	_stopCharacter+1,printf@f+1
   978  000F30  0100               	movlb	0	; () banked
   979  000F32  5167               	movf	printf@f& (0+255),w,b
   980  000F34  1168               	iorwf	(printf@f+1)& (0+255),w,b
   981  000F36  A4D8               	btfss	status,2,c
   982  000F38  0E00               	movlw	low (__mediumconst shr (0+16))
   983  000F3A  6F69               	movwf	(printf@f+2)& (0+255),b
   984  000F3C  EC08  F005         	call	_printf	;wreg free
   985                           
   986                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(10000000/4000.0)));
   987  000F40  0E04               	movlw	4
   988  000F42  0100               	movlb	0	; () banked
   989  000F44  6F79               	movwf	??_D_UART_Write& (0+255),b
   990  000F46  0E3E               	movlw	62
   991  000F48                     u1217:
   992  000F48  2EE8               	decfsz	wreg,f,c
   993  000F4A  D7FE               	goto	u1217
   994  000F4C  2F79               	decfsz	??_D_UART_Write& (0+255),f,b
   995  000F4E  D7FC               	goto	u1217
   996  000F50  0012               	return		;funcret
   997  000F52                     __end_of_D_UART_Write:
   998                           	opt stack 0
   999                           tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           postinc0	equ	0xFEE
  1004                           plusw0	equ	0xFEB
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1l	equ	0xFE1
  1008                           indf2	equ	0xFDF
  1009                           plusw2	equ	0xFDB
  1010                           fsr2h	equ	0xFDA
  1011                           fsr2l	equ	0xFD9
  1012                           status	equ	0xFD8
  1013                           
  1014 ;; *************** function _printf *****************
  1015 ;; Defined at:
  1016 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  1019 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
  1020 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  1021 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  idx             1   14[BANK0 ] unsigned char 
  1024 ;;  tmpval          4    0        struct .
  1025 ;;  cp              3    0        PTR const unsigned char 
  1026 ;;  val             2   17[BANK0 ] unsigned int 
  1027 ;;  ap              2   15[BANK0 ] PTR void [1]
  1028 ;;		 -> ?i1_printf(2), ?_printf(2), 
  1029 ;;  len             2    0        unsigned int 
  1030 ;;  c               1   20[BANK0 ] char 
  1031 ;;  prec            1   19[BANK0 ] char 
  1032 ;;  flag            1   13[BANK0 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  2    7[BANK0 ] int 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1042 ;;      Params:         0       3       0       0       0       0       0       0       0
  1043 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1044 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1045 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1046 ;;Total ram usage:       14 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    8
  1049 ;; This function calls:
  1050 ;;		___lwdiv
  1051 ;;		_putch
  1052 ;; This function is called by:
  1053 ;;		_D_UART_Write
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text3
  1058  000A10                     __ptext3:
  1059                           	opt stack 0
  1060  000A10                     _printf:
  1061                           	opt stack 21
  1062                           
  1063                           ;doprnt.c: 466: va_list ap;
  1064                           ;doprnt.c: 499: signed char c;
  1065                           ;doprnt.c: 506: signed char prec;
  1066                           ;doprnt.c: 508: unsigned char flag;
  1067                           ;doprnt.c: 523: union {
  1068                           ;doprnt.c: 524: unsigned long vd;
  1069                           ;doprnt.c: 525: double integ;
  1070                           ;doprnt.c: 526: } tmpval;
  1071                           ;doprnt.c: 528: unsigned int val;
  1072                           ;doprnt.c: 529: unsigned len;
  1073                           ;doprnt.c: 530: const char * cp;
  1074                           ;doprnt.c: 533: *ap = __va_start();
  1075                           
  1076                           ;incstack = 0
  1077  000A10  0E6A               	movlw	low (?_printf+3)
  1078  000A12  0100               	movlb	0	; () banked
  1079  000A14  6F6F               	movwf	printf@ap& (0+255),b
  1080  000A16  0E00               	movlw	high (?_printf+3)
  1081  000A18  0100               	movlb	0	; () banked
  1082  000A1A  6F70               	movwf	(printf@ap+1)& (0+255),b
  1083                           
  1084                           ;doprnt.c: 536: while(c = *f++) {
  1085  000A1C  D08D               	goto	l1584
  1086  000A1E                     l1546:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;doprnt.c: 538: if(c != '%')
  1090  000A1E  0E25               	movlw	37
  1091  000A20  0100               	movlb	0	; () banked
  1092  000A22  1974               	xorwf	printf@c& (0+255),w,b
  1093  000A24  B4D8               	btfsc	status,2,c
  1094  000A26  D005               	goto	l1550
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;doprnt.c: 540: {
  1098                           ;doprnt.c: 541: (putch(c) );
  1099  000A28  0100               	movlb	0	; () banked
  1100  000A2A  5174               	movf	printf@c& (0+255),w,b
  1101  000A2C  EC25  F009         	call	_putch
  1102                           
  1103                           ;doprnt.c: 542: continue;
  1104  000A30  D083               	goto	l1584
  1105  000A32                     l1550:
  1106                           
  1107                           ;doprnt.c: 543: }
  1108                           ;doprnt.c: 548: flag = 0;
  1109  000A32  0E00               	movlw	0
  1110  000A34  0100               	movlb	0	; () banked
  1111  000A36  6F6D               	movwf	printf@flag& (0+255),b
  1112                           
  1113                           ;doprnt.c: 635: switch(c = *f++) {
  1114  000A38  D005               	goto	l1556
  1115  000A3A                     l1552:
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;doprnt.c: 809: (putch(c) );
  1119  000A3A  0100               	movlb	0	; () banked
  1120  000A3C  5174               	movf	printf@c& (0+255),w,b
  1121  000A3E  EC25  F009         	call	_putch
  1122                           
  1123                           ;doprnt.c: 810: continue;
  1124  000A42  D07A               	goto	l1584
  1125  000A44                     l1556:
  1126  000A44  C067  F06A         	movff	printf@f,??_printf
  1127  000A48  C068  F06B         	movff	printf@f+1,??_printf+1
  1128  000A4C  C069  F06C         	movff	printf@f+2,??_printf+2
  1129  000A50  0100               	movlb	0	; () banked
  1130  000A52  2B67               	incf	printf@f& (0+255),f,b
  1131  000A54  0E00               	movlw	0
  1132  000A56  2368               	addwfc	(printf@f+1)& (0+255),f,b
  1133  000A58  2369               	addwfc	(printf@f+2)& (0+255),f,b
  1134  000A5A  C06A  FFF6         	movff	??_printf,tblptrl
  1135  000A5E  C06B  FFF7         	movff	??_printf+1,tblptrh
  1136  000A62  C06C  FFF8         	movff	??_printf+2,tblptru
  1137  000A66  0008               	tblrd		*
  1138  000A68  CFF5 F074          	movff	tablat,printf@c
  1139  000A6C  0100               	movlb	0	; () banked
  1140  000A6E  5174               	movf	printf@c& (0+255),w,b
  1141                           
  1142                           ; Switch size 1, requested type "space"
  1143                           ; Number of cases is 2, Range of values is 0 to 120
  1144                           ; switch strategies available:
  1145                           ; Name         Instructions Cycles
  1146                           ; simple_byte            7     4 (average)
  1147                           ;	Chosen strategy is simple_byte
  1148  000A70  0A00               	xorlw	0	; case 0
  1149  000A72  B4D8               	btfsc	status,2,c
  1150  000A74  0012               	return	
  1151  000A76  0A78               	xorlw	120	; case 120
  1152  000A78  A4D8               	btfss	status,2,c
  1153  000A7A  D7DF               	goto	l1552
  1154                           
  1155                           ;doprnt.c: 1273: {
  1156                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1157                           
  1158                           ; BSR set to: 0
  1159  000A7C  C06F  FFD9         	movff	printf@ap,fsr2l
  1160  000A80  C070  FFDA         	movff	printf@ap+1,fsr2h
  1161  000A84  CFDE F071          	movff	postinc2,printf@val
  1162  000A88  CFDD F072          	movff	postdec2,printf@val+1
  1163  000A8C  0E02               	movlw	2
  1164  000A8E  0100               	movlb	0	; () banked
  1165  000A90  276F               	addwf	printf@ap& (0+255),f,b
  1166  000A92  0E00               	movlw	0
  1167  000A94  2370               	addwfc	(printf@ap+1)& (0+255),f,b
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;doprnt.c: 1287: }
  1171                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1172  000A96  0E01               	movlw	1
  1173  000A98  0100               	movlb	0	; () banked
  1174  000A9A  6F74               	movwf	printf@c& (0+255),b
  1175  000A9C                     l1564:
  1176                           
  1177                           ; BSR set to: 0
  1178  000A9C  0E04               	movlw	4
  1179  000A9E  0100               	movlb	0	; () banked
  1180  000AA0  1974               	xorwf	printf@c& (0+255),w,b
  1181  000AA2  B4D8               	btfsc	status,2,c
  1182  000AA4  D016               	goto	l180
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1186                           
  1187                           ; BSR set to: 0
  1188                           
  1189                           ; BSR set to: 0
  1190  000AA6  0100               	movlb	0	; () banked
  1191  000AA8  5174               	movf	printf@c& (0+255),w,b
  1192  000AAA  0D02               	mullw	2
  1193  000AAC  0E01               	movlw	low _hexpowers
  1194  000AAE  24F3               	addwf	prodl,w,c
  1195  000AB0  6EF6               	movwf	tblptrl,c
  1196  000AB2  0E08               	movlw	high _hexpowers
  1197  000AB4  20F4               	addwfc	prodh,w,c
  1198  000AB6  6EF7               	movwf	tblptrh,c
  1199  000AB8                     	if	0	;There are less than 3 active tblptr bytes
  1200  000AB8                     	endif
  1201  000AB8  0009               	tblrd		*+
  1202  000ABA  50F5               	movf	tablat,w,c
  1203  000ABC  0100               	movlb	0	; () banked
  1204  000ABE  5D71               	subwf	printf@val& (0+255),w,b
  1205  000AC0  0009               	tblrd		*+
  1206  000AC2  50F5               	movf	tablat,w,c
  1207  000AC4  0100               	movlb	0	; () banked
  1208  000AC6  5972               	subwfb	(printf@val+1)& (0+255),w,b
  1209  000AC8  A0D8               	btfss	status,0,c
  1210  000ACA  D003               	goto	l180
  1211                           
  1212                           ; BSR set to: 0
  1213                           
  1214                           ; BSR set to: 0
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;doprnt.c: 1318: break;
  1218  000ACC  0100               	movlb	0	; () banked
  1219  000ACE  2B74               	incf	printf@c& (0+255),f,b
  1220  000AD0  D7E5               	goto	l1564
  1221  000AD2                     l180:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 1422: {
  1225                           ;doprnt.c: 1469: }
  1226                           ;doprnt.c: 1472: prec = c;
  1227  000AD2  C074  F073         	movff	printf@c,printf@prec
  1228                           
  1229                           ;doprnt.c: 1474: while(prec--) {
  1230  000AD6  D02A               	goto	l1582
  1231  000AD8                     l1576:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;doprnt.c: 1478: {
  1235                           ;doprnt.c: 1499: {
  1236                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1237  000AD8  C071  F060         	movff	printf@val,___lwdiv@dividend
  1238  000ADC  C072  F061         	movff	printf@val+1,___lwdiv@dividend+1
  1239  000AE0  0100               	movlb	0	; () banked
  1240  000AE2  5173               	movf	printf@prec& (0+255),w,b
  1241  000AE4  0D02               	mullw	2
  1242  000AE6  0E01               	movlw	low _hexpowers
  1243  000AE8  24F3               	addwf	prodl,w,c
  1244  000AEA  6EF6               	movwf	tblptrl,c
  1245  000AEC  0E08               	movlw	high _hexpowers
  1246  000AEE  20F4               	addwfc	prodh,w,c
  1247  000AF0  6EF7               	movwf	tblptrh,c
  1248  000AF2                     	if	0	;There are less than 3 active tblptr bytes
  1249  000AF2                     	endif
  1250  000AF2  0009               	tblrd		*+
  1251  000AF4  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1252  000AF8  000A               	tblrd		*-
  1253  000AFA  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1254  000AFE  ECFD  F007         	call	___lwdiv	;wreg free
  1255  000B02  0100               	movlb	0	; () banked
  1256  000B04  5160               	movf	?___lwdiv& (0+255),w,b
  1257  000B06  0B0F               	andlw	15
  1258  000B08  0100               	movlb	0	; () banked
  1259  000B0A  6F6E               	movwf	printf@idx& (0+255),b
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1263  000B0C  0100               	movlb	0	; () banked
  1264  000B0E  516E               	movf	printf@idx& (0+255),w,b
  1265  000B10  0D01               	mullw	1
  1266  000B12  0E09               	movlw	low STR_14
  1267  000B14  24F3               	addwf	prodl,w,c
  1268  000B16  6EF6               	movwf	tblptrl,c
  1269  000B18  0E08               	movlw	high STR_14
  1270  000B1A  20F4               	addwfc	prodh,w,c
  1271  000B1C  6EF7               	movwf	tblptrh,c
  1272  000B1E                     	if	0	;There are less than 3 active tblptr bytes
  1273  000B1E                     	endif
  1274  000B1E  0008               	tblrd		*
  1275  000B20  CFF5 F074          	movff	tablat,printf@c
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;doprnt.c: 1508: }
  1279                           ;doprnt.c: 1523: }
  1280                           ;doprnt.c: 1524: (putch(c) );
  1281  000B24  0100               	movlb	0	; () banked
  1282  000B26  5174               	movf	printf@c& (0+255),w,b
  1283  000B28  EC25  F009         	call	_putch
  1284  000B2C                     l1582:
  1285  000B2C  0100               	movlb	0	; () banked
  1286  000B2E  0773               	decf	printf@prec& (0+255),f,b
  1287  000B30  0100               	movlb	0	; () banked
  1288  000B32  2973               	incf	printf@prec& (0+255),w,b
  1289  000B34  A4D8               	btfss	status,2,c
  1290  000B36  D7D0               	goto	l1576
  1291  000B38                     l1584:
  1292  000B38  C067  F06A         	movff	printf@f,??_printf
  1293  000B3C  C068  F06B         	movff	printf@f+1,??_printf+1
  1294  000B40  C069  F06C         	movff	printf@f+2,??_printf+2
  1295  000B44  0100               	movlb	0	; () banked
  1296  000B46  2B67               	incf	printf@f& (0+255),f,b
  1297  000B48  0E00               	movlw	0
  1298  000B4A  2368               	addwfc	(printf@f+1)& (0+255),f,b
  1299  000B4C  2369               	addwfc	(printf@f+2)& (0+255),f,b
  1300  000B4E  C06A  FFF6         	movff	??_printf,tblptrl
  1301  000B52  C06B  FFF7         	movff	??_printf+1,tblptrh
  1302  000B56  C06C  FFF8         	movff	??_printf+2,tblptru
  1303  000B5A  0008               	tblrd		*
  1304  000B5C  CFF5 F074          	movff	tablat,printf@c
  1305  000B60  0100               	movlb	0	; () banked
  1306  000B62  5174               	movf	printf@c& (0+255),w,b
  1307  000B64  B4D8               	btfsc	status,2,c
  1308  000B66  0012               	return	
  1309  000B68  D75A               	goto	l1546
  1310  000B6A                     __end_of_printf:
  1311                           	opt stack 0
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           prodh	equ	0xFF4
  1317                           prodl	equ	0xFF3
  1318                           postinc0	equ	0xFEE
  1319                           plusw0	equ	0xFEB
  1320                           wreg	equ	0xFE8
  1321                           postdec1	equ	0xFE5
  1322                           fsr1l	equ	0xFE1
  1323                           indf2	equ	0xFDF
  1324                           postinc2	equ	0xFDE
  1325                           postdec2	equ	0xFDD
  1326                           plusw2	equ	0xFDB
  1327                           fsr2h	equ	0xFDA
  1328                           fsr2l	equ	0xFD9
  1329                           status	equ	0xFD8
  1330                           
  1331 ;; *************** function _putch *****************
  1332 ;; Defined at:
  1333 ;;		line 260 in file "Drivers/UART_Driver.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  data            1    wreg     unsigned char 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  data            1    1[BANK0 ] unsigned char 
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, status,2, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1347 ;;      Params:         0       0       0       0       0       0       0       0       0
  1348 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1350 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1351 ;;Total ram usage:        1 bytes
  1352 ;; Hardware stack levels used:    1
  1353 ;; Hardware stack levels required when called:    7
  1354 ;; This function calls:
  1355 ;;		_writeByte
  1356 ;; This function is called by:
  1357 ;;		_printf
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text4
  1362  00124A                     __ptext4:
  1363                           	opt stack 0
  1364  00124A                     _putch:
  1365                           	opt stack 21
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;incstack = 0
  1369                           ;putch@data stored from wreg
  1370  00124A  0100               	movlb	0	; () banked
  1371  00124C  6F61               	movwf	putch@data& (0+255),b
  1372                           
  1373                           ;UART_Driver.c: 261: writeByte(data);
  1374  00124E  0100               	movlb	0	; () banked
  1375  001250  5161               	movf	putch@data& (0+255),w,b
  1376  001252  EC2C  F009         	call	_writeByte
  1377  001256  0012               	return		;funcret
  1378  001258                     __end_of_putch:
  1379                           	opt stack 0
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           postinc0	equ	0xFEE
  1387                           plusw0	equ	0xFEB
  1388                           wreg	equ	0xFE8
  1389                           postdec1	equ	0xFE5
  1390                           fsr1l	equ	0xFE1
  1391                           indf2	equ	0xFDF
  1392                           postinc2	equ	0xFDE
  1393                           postdec2	equ	0xFDD
  1394                           plusw2	equ	0xFDB
  1395                           fsr2h	equ	0xFDA
  1396                           fsr2l	equ	0xFD9
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function _writeByte *****************
  1400 ;; Defined at:
  1401 ;;		line 69 in file "Drivers/UART_Driver.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  data            1    wreg     unsigned char 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  data            1    0[BANK0 ] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0
  1416 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1418 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1419 ;;Total ram usage:        1 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    6
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_putch
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text5
  1430  001258                     __ptext5:
  1431                           	opt stack 0
  1432  001258                     _writeByte:
  1433                           	opt stack 21
  1434                           
  1435                           ;incstack = 0
  1436                           ;writeByte@data stored from wreg
  1437  001258  0100               	movlb	0	; () banked
  1438  00125A  6F60               	movwf	writeByte@data& (0+255),b
  1439  00125C                     l53:
  1440  00125C  A2AC               	btfss	4012,1,c	;volatile
  1441  00125E  D7FE               	goto	l53
  1442                           
  1443                           ;UART_Driver.c: 71: TXREG = data;
  1444  001260  C060  FFAD         	movff	writeByte@data,4013	;volatile
  1445  001264  0012               	return		;funcret
  1446  001266                     __end_of_writeByte:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           postinc0	equ	0xFEE
  1455                           plusw0	equ	0xFEB
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function ___lwdiv *****************
  1468 ;; Defined at:
  1469 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  dividend        2    0[BANK0 ] unsigned int 
  1472 ;;  divisor         2    2[BANK0 ] unsigned int 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  quotient        2    5[BANK0 ] unsigned int 
  1475 ;;  counter         1    4[BANK0 ] unsigned char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2    0[BANK0 ] unsigned int 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1485 ;;      Params:         0       4       0       0       0       0       0       0       0
  1486 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1488 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1489 ;;Total ram usage:        7 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    6
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_printf
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text6
  1500  000FFA                     __ptext6:
  1501                           	opt stack 0
  1502  000FFA                     ___lwdiv:
  1503                           	opt stack 22
  1504                           
  1505                           ;incstack = 0
  1506  000FFA  0E00               	movlw	0
  1507  000FFC  0100               	movlb	0	; () banked
  1508  000FFE  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1509  001000  0E00               	movlw	0
  1510  001002  6F65               	movwf	___lwdiv@quotient& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513  001004  0100               	movlb	0	; () banked
  1514  001006  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1515  001008  0100               	movlb	0	; () banked
  1516  00100A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1517  00100C  B4D8               	btfsc	status,2,c
  1518  00100E  D02C               	goto	l589
  1519                           
  1520                           ; BSR set to: 0
  1521  001010  0E01               	movlw	1
  1522  001012  0100               	movlb	0	; () banked
  1523  001014  6F64               	movwf	___lwdiv@counter& (0+255),b
  1524  001016  D006               	goto	l1530
  1525  001018                     l1528:
  1526                           
  1527                           ; BSR set to: 0
  1528  001018  0100               	movlb	0	; () banked
  1529  00101A  90D8               	bcf	status,0,c
  1530  00101C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1531  00101E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1532  001020  0100               	movlb	0	; () banked
  1533  001022  2B64               	incf	___lwdiv@counter& (0+255),f,b
  1534  001024                     l1530:
  1535                           
  1536                           ; BSR set to: 0
  1537  001024  0100               	movlb	0	; () banked
  1538  001026  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1539  001028  D7F7               	goto	l1528
  1540  00102A                     l1532:
  1541                           
  1542                           ; BSR set to: 0
  1543  00102A  0100               	movlb	0	; () banked
  1544  00102C  90D8               	bcf	status,0,c
  1545  00102E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  1546  001030  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1547                           
  1548                           ; BSR set to: 0
  1549  001032  0100               	movlb	0	; () banked
  1550  001034  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1551  001036  0100               	movlb	0	; () banked
  1552  001038  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1553  00103A  0100               	movlb	0	; () banked
  1554  00103C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1555  00103E  0100               	movlb	0	; () banked
  1556  001040  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1557  001042  A0D8               	btfss	status,0,c
  1558  001044  D00A               	goto	l1540
  1559                           
  1560                           ; BSR set to: 0
  1561  001046  0100               	movlb	0	; () banked
  1562  001048  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1563  00104A  0100               	movlb	0	; () banked
  1564  00104C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1565  00104E  0100               	movlb	0	; () banked
  1566  001050  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1567  001052  0100               	movlb	0	; () banked
  1568  001054  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1569                           
  1570                           ; BSR set to: 0
  1571  001056  0100               	movlb	0	; () banked
  1572  001058  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  1573  00105A                     l1540:
  1574                           
  1575                           ; BSR set to: 0
  1576  00105A  0100               	movlb	0	; () banked
  1577  00105C  90D8               	bcf	status,0,c
  1578  00105E  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1579  001060  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1580                           
  1581                           ; BSR set to: 0
  1582  001062  0100               	movlb	0	; () banked
  1583  001064  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  1584  001066  D7E1               	goto	l1532
  1585  001068                     l589:
  1586                           
  1587                           ; BSR set to: 0
  1588  001068  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  1589  00106C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1590                           
  1591                           ; BSR set to: 0
  1592  001070  0012               	return		;funcret
  1593  001072                     __end_of___lwdiv:
  1594                           	opt stack 0
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           prodh	equ	0xFF4
  1600                           prodl	equ	0xFF3
  1601                           postinc0	equ	0xFEE
  1602                           plusw0	equ	0xFEB
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1l	equ	0xFE1
  1606                           indf2	equ	0xFDF
  1607                           postinc2	equ	0xFDE
  1608                           postdec2	equ	0xFDD
  1609                           plusw2	equ	0xFDB
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _D_UART_Read *****************
  1615 ;; Defined at:
  1616 ;;		line 237 in file "Drivers/UART_Driver.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  6    0[BANK0 ] struct .
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1630 ;;      Params:         0       6       0       0       0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1633 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1634 ;;Total ram usage:        6 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    6
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text7
  1645  0011DA                     __ptext7:
  1646                           	opt stack 0
  1647  0011DA                     _D_UART_Read:
  1648                           	opt stack 24
  1649                           
  1650                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;incstack = 0
  1654  0011DA  0E0B               	movlw	low (_readBuffer+11)
  1655  0011DC  6E30               	movwf	_readData,c
  1656  0011DE  0E01               	movlw	high (_readBuffer+11)
  1657  0011E0  6E31               	movwf	_readData+1,c
  1658                           
  1659                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
  1660  0011E2  0E3E               	movlw	low (_readBuffer+62)
  1661  0011E4  6E32               	movwf	_readData+2,c
  1662  0011E6  0E01               	movlw	high (_readBuffer+62)
  1663  0011E8  6E33               	movwf	_readData+3,c
  1664                           
  1665                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
  1666  0011EA  0E71               	movlw	low (_readBuffer+113)
  1667  0011EC  6E34               	movwf	_readData+4,c
  1668  0011EE  0E01               	movlw	high (_readBuffer+113)
  1669  0011F0  6E35               	movwf	_readData+5,c
  1670                           
  1671                           ;UART_Driver.c: 241: return readData;
  1672  0011F2  EE20  F030         	lfsr	2,_readData
  1673  0011F6  EE00  F060         	lfsr	0,?_D_UART_Read
  1674  0011FA  0E05               	movlw	5
  1675  0011FC                     u1131:
  1676  0011FC  CFDB FFEB          	movff	plusw2,plusw0
  1677  001200  06E8               	decf	wreg,f,c
  1678  001202  E2FC               	bc	u1131
  1679  001204  0012               	return	
  1680  001206                     __end_of_D_UART_Read:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           prodh	equ	0xFF4
  1687                           prodl	equ	0xFF3
  1688                           postinc0	equ	0xFEE
  1689                           plusw0	equ	0xFEB
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1l	equ	0xFE1
  1693                           indf2	equ	0xFDF
  1694                           postinc2	equ	0xFDE
  1695                           postdec2	equ	0xFDD
  1696                           plusw2	equ	0xFDB
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _D_UART_Init *****************
  1702 ;; Defined at:
  1703 ;;		line 182 in file "Drivers/UART_Driver.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1706 ;;		 -> STR_8(6), 
  1707 ;;  baud            2   16[BANK0 ] unsigned int 
  1708 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1720 ;;      Params:         0       5       0       0       0       0       0       0       0
  1721 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1723 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1724 ;;Total ram usage:        9 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    7
  1727 ;; This function calls:
  1728 ;;		_D_UART_Enable
  1729 ;;		___aldiv
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text8
  1736  000F52                     __ptext8:
  1737                           	opt stack 0
  1738  000F52                     _D_UART_Init:
  1739                           	opt stack 23
  1740                           
  1741                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1742                           
  1743                           ;incstack = 0
  1744  000F52  9E94               	bcf	3988,7,c	;volatile
  1745                           
  1746                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1747  000F54  8C94               	bsf	3988,6,c	;volatile
  1748                           
  1749                           ;UART_Driver.c: 188: deviceName = name;
  1750  000F56  C06E  F07A         	movff	D_UART_Init@name,_deviceName
  1751  000F5A  C06F  F07B         	movff	D_UART_Init@name+1,_deviceName+1
  1752  000F5E  0100               	movlb	0	; () banked
  1753  000F60  517A               	movf	_deviceName& (0+255),w,b
  1754  000F62  117B               	iorwf	(_deviceName+1)& (0+255),w,b
  1755  000F64  A4D8               	btfss	status,2,c
  1756  000F66  0E00               	movlw	low (__mediumconst shr (0+16))
  1757  000F68  6F7C               	movwf	(_deviceName+2)& (0+255),b
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;UART_Driver.c: 189: readReady = 0;
  1761  000F6A  0E00               	movlw	0
  1762  000F6C  6E37               	movwf	_readReady,c
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1766  000F6E  0E00               	movlw	0
  1767  000F70  EC03  F009         	call	_D_UART_Enable
  1768                           
  1769                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1770  000F74  9CAC               	bcf	4012,6,c	;volatile
  1771                           
  1772                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1773  000F76  98AC               	bcf	4012,4,c	;volatile
  1774                           
  1775                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1776  000F78  94AC               	bcf	4012,2,c	;volatile
  1777                           
  1778                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1779  000F7A  9CAB               	bcf	4011,6,c	;volatile
  1780                           
  1781                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 1;
  1782  000F7C  8AB8               	bsf	4024,5,c	;volatile
  1783                           
  1784                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 1;
  1785  000F7E  88B8               	bsf	4024,4,c	;volatile
  1786                           
  1787                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1788  000F80  96B8               	bcf	4024,3,c	;volatile
  1789                           
  1790                           ;UART_Driver.c: 210: SPBRG = ((10000000/baud)/64)-1;
  1791  000F82  C070  F064         	movff	D_UART_Init@baud,___aldiv@divisor
  1792  000F86  C071  F065         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1793  000F8A  0100               	movlb	0	; () banked
  1794  000F8C  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1795  000F8E  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1796  000F90  0E80               	movlw	128
  1797  000F92  0100               	movlb	0	; () banked
  1798  000F94  6F60               	movwf	___aldiv@dividend& (0+255),b
  1799  000F96  0E96               	movlw	150
  1800  000F98  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  1801  000F9A  0E98               	movlw	152
  1802  000F9C  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  1803  000F9E  0E00               	movlw	0
  1804  000FA0  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  1805  000FA2  EC4A  F006         	call	___aldiv	;wreg free
  1806  000FA6  C060  F073         	movff	?___aldiv,_D_UART_Init$1304
  1807  000FAA  C061  F074         	movff	?___aldiv+1,_D_UART_Init$1304+1
  1808  000FAE  C062  F075         	movff	?___aldiv+2,_D_UART_Init$1304+2
  1809  000FB2  C063  F076         	movff	?___aldiv+3,_D_UART_Init$1304+3
  1810                           
  1811                           ;UART_Driver.c: 210: SPBRG = ((10000000/baud)/64)-1;
  1812  000FB6  C073  F060         	movff	_D_UART_Init$1304,___aldiv@dividend
  1813  000FBA  C074  F061         	movff	_D_UART_Init$1304+1,___aldiv@dividend+1
  1814  000FBE  C075  F062         	movff	_D_UART_Init$1304+2,___aldiv@dividend+2
  1815  000FC2  C076  F063         	movff	_D_UART_Init$1304+3,___aldiv@dividend+3
  1816  000FC6  0E40               	movlw	64
  1817  000FC8  0100               	movlb	0	; () banked
  1818  000FCA  6F64               	movwf	___aldiv@divisor& (0+255),b
  1819  000FCC  0E00               	movlw	0
  1820  000FCE  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
  1821  000FD0  0E00               	movlw	0
  1822  000FD2  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
  1823  000FD4  0E00               	movlw	0
  1824  000FD6  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
  1825  000FD8  EC4A  F006         	call	___aldiv	;wreg free
  1826  000FDC  0100               	movlb	0	; () banked
  1827  000FDE  0560               	decf	?___aldiv& (0+255),w,b
  1828  000FE0  6EAF               	movwf	4015,c	;volatile
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;UART_Driver.c: 213: if (interrupts) {
  1832  000FE2  0100               	movlb	0	; () banked
  1833  000FE4  5172               	movf	D_UART_Init@interrupts& (0+255),w,b
  1834  000FE6  0100               	movlb	0	; () banked
  1835  000FE8  B4D8               	btfsc	status,2,c
  1836  000FEA  0012               	return	
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1840  000FEC  8ED0               	bsf	4048,7,c	;volatile
  1841                           
  1842                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1843  000FEE  8EF2               	bsf	intcon,7,c	;volatile
  1844                           
  1845                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1846  000FF0  8CF2               	bsf	intcon,6,c	;volatile
  1847                           
  1848                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1849  000FF2  9A9E               	bcf	3998,5,c	;volatile
  1850                           
  1851                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1852  000FF4  9A9F               	bcf	3999,5,c	;volatile
  1853                           
  1854                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1855  000FF6  8A9D               	bsf	3997,5,c	;volatile
  1856  000FF8  0012               	return	
  1857  000FFA                     __end_of_D_UART_Init:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           plusw0	equ	0xFEB
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function ___aldiv *****************
  1880 ;; Defined at:
  1881 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/aldiv.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  dividend        4    0[BANK0 ] long 
  1884 ;;  divisor         4    4[BANK0 ] long 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  quotient        4   10[BANK0 ] long 
  1887 ;;  sign            1    9[BANK0 ] unsigned char 
  1888 ;;  counter         1    8[BANK0 ] unsigned char 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  4    0[BANK0 ] long 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1898 ;;      Params:         0       8       0       0       0       0       0       0       0
  1899 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1901 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1902 ;;Total ram usage:       14 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    6
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_D_UART_Init
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text9
  1913  000C94                     __ptext9:
  1914                           	opt stack 0
  1915  000C94                     ___aldiv:
  1916                           	opt stack 23
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;incstack = 0
  1920  000C94  0E00               	movlw	0
  1921  000C96  0100               	movlb	0	; () banked
  1922  000C98  6F69               	movwf	___aldiv@sign& (0+255),b
  1923                           
  1924                           ; BSR set to: 0
  1925  000C9A  0100               	movlb	0	; () banked
  1926  000C9C  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1927  000C9E  D00C               	goto	l1598
  1928                           
  1929                           ; BSR set to: 0
  1930  000CA0  0100               	movlb	0	; () banked
  1931  000CA2  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1932  000CA4  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1933  000CA6  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1934  000CA8  6D64               	negf	___aldiv@divisor& (0+255),b
  1935  000CAA  0E00               	movlw	0
  1936  000CAC  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1937  000CAE  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1938  000CB0  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1939                           
  1940                           ; BSR set to: 0
  1941  000CB2  0E01               	movlw	1
  1942  000CB4  0100               	movlb	0	; () banked
  1943  000CB6  6F69               	movwf	___aldiv@sign& (0+255),b
  1944  000CB8                     l1598:
  1945                           
  1946                           ; BSR set to: 0
  1947  000CB8  0100               	movlb	0	; () banked
  1948  000CBA  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1949  000CBC  D00C               	goto	l1604
  1950                           
  1951                           ; BSR set to: 0
  1952  000CBE  0100               	movlb	0	; () banked
  1953  000CC0  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1954  000CC2  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1955  000CC4  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1956  000CC6  6D60               	negf	___aldiv@dividend& (0+255),b
  1957  000CC8  0E00               	movlw	0
  1958  000CCA  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1959  000CCC  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1960  000CCE  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1961                           
  1962                           ; BSR set to: 0
  1963  000CD0  0E01               	movlw	1
  1964  000CD2  0100               	movlb	0	; () banked
  1965  000CD4  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  1966  000CD6                     l1604:
  1967                           
  1968                           ; BSR set to: 0
  1969  000CD6  0E00               	movlw	0
  1970  000CD8  0100               	movlb	0	; () banked
  1971  000CDA  6F6A               	movwf	___aldiv@quotient& (0+255),b
  1972  000CDC  0E00               	movlw	0
  1973  000CDE  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1974  000CE0  0E00               	movlw	0
  1975  000CE2  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1976  000CE4  0E00               	movlw	0
  1977  000CE6  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1978                           
  1979                           ; BSR set to: 0
  1980  000CE8  0100               	movlb	0	; () banked
  1981  000CEA  5164               	movf	___aldiv@divisor& (0+255),w,b
  1982  000CEC  0100               	movlb	0	; () banked
  1983  000CEE  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1984  000CF0  0100               	movlb	0	; () banked
  1985  000CF2  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1986  000CF4  0100               	movlb	0	; () banked
  1987  000CF6  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1988  000CF8  B4D8               	btfsc	status,2,c
  1989  000CFA  D042               	goto	l1626
  1990                           
  1991                           ; BSR set to: 0
  1992  000CFC  0E01               	movlw	1
  1993  000CFE  0100               	movlb	0	; () banked
  1994  000D00  6F68               	movwf	___aldiv@counter& (0+255),b
  1995  000D02  D008               	goto	l1612
  1996  000D04                     l1610:
  1997                           
  1998                           ; BSR set to: 0
  1999  000D04  0100               	movlb	0	; () banked
  2000  000D06  90D8               	bcf	status,0,c
  2001  000D08  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  2002  000D0A  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2003  000D0C  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2004  000D0E  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2005  000D10  0100               	movlb	0	; () banked
  2006  000D12  2B68               	incf	___aldiv@counter& (0+255),f,b
  2007  000D14                     l1612:
  2008                           
  2009                           ; BSR set to: 0
  2010  000D14  0100               	movlb	0	; () banked
  2011  000D16  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2012  000D18  D7F5               	goto	l1610
  2013  000D1A                     l1614:
  2014                           
  2015                           ; BSR set to: 0
  2016  000D1A  0100               	movlb	0	; () banked
  2017  000D1C  90D8               	bcf	status,0,c
  2018  000D1E  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  2019  000D20  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2020  000D22  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2021  000D24  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2022                           
  2023                           ; BSR set to: 0
  2024  000D26  0100               	movlb	0	; () banked
  2025  000D28  5164               	movf	___aldiv@divisor& (0+255),w,b
  2026  000D2A  0100               	movlb	0	; () banked
  2027  000D2C  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  2028  000D2E  0100               	movlb	0	; () banked
  2029  000D30  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2030  000D32  0100               	movlb	0	; () banked
  2031  000D34  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2032  000D36  0100               	movlb	0	; () banked
  2033  000D38  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2034  000D3A  0100               	movlb	0	; () banked
  2035  000D3C  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2036  000D3E  0100               	movlb	0	; () banked
  2037  000D40  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2038  000D42  0100               	movlb	0	; () banked
  2039  000D44  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2040  000D46  A0D8               	btfss	status,0,c
  2041  000D48  D012               	goto	l1622
  2042                           
  2043                           ; BSR set to: 0
  2044  000D4A  0100               	movlb	0	; () banked
  2045  000D4C  5164               	movf	___aldiv@divisor& (0+255),w,b
  2046  000D4E  0100               	movlb	0	; () banked
  2047  000D50  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  2048  000D52  0100               	movlb	0	; () banked
  2049  000D54  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2050  000D56  0100               	movlb	0	; () banked
  2051  000D58  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2052  000D5A  0100               	movlb	0	; () banked
  2053  000D5C  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2054  000D5E  0100               	movlb	0	; () banked
  2055  000D60  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2056  000D62  0100               	movlb	0	; () banked
  2057  000D64  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2058  000D66  0100               	movlb	0	; () banked
  2059  000D68  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2060                           
  2061                           ; BSR set to: 0
  2062  000D6A  0100               	movlb	0	; () banked
  2063  000D6C  816A               	bsf	___aldiv@quotient& (0+255),0,b
  2064  000D6E                     l1622:
  2065                           
  2066                           ; BSR set to: 0
  2067  000D6E  0100               	movlb	0	; () banked
  2068  000D70  90D8               	bcf	status,0,c
  2069  000D72  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2070  000D74  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2071  000D76  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2072  000D78  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  2073                           
  2074                           ; BSR set to: 0
  2075  000D7A  0100               	movlb	0	; () banked
  2076  000D7C  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  2077  000D7E  D7CD               	goto	l1614
  2078  000D80                     l1626:
  2079                           
  2080                           ; BSR set to: 0
  2081  000D80  0100               	movlb	0	; () banked
  2082  000D82  5169               	movf	___aldiv@sign& (0+255),w,b
  2083  000D84  0100               	movlb	0	; () banked
  2084  000D86  B4D8               	btfsc	status,2,c
  2085  000D88  D009               	goto	l1630
  2086                           
  2087                           ; BSR set to: 0
  2088  000D8A  0100               	movlb	0	; () banked
  2089  000D8C  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2090  000D8E  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2091  000D90  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2092  000D92  6D6A               	negf	___aldiv@quotient& (0+255),b
  2093  000D94  0E00               	movlw	0
  2094  000D96  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2095  000D98  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2096  000D9A  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2097  000D9C                     l1630:
  2098                           
  2099                           ; BSR set to: 0
  2100  000D9C  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  2101  000DA0  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  2102  000DA4  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  2103  000DA8  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  2104  000DAC  0012               	return	
  2105  000DAE                     __end_of___aldiv:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           intcon	equ	0xFF2
  2114                           postinc0	equ	0xFEE
  2115                           plusw0	equ	0xFEB
  2116                           wreg	equ	0xFE8
  2117                           postdec1	equ	0xFE5
  2118                           fsr1l	equ	0xFE1
  2119                           indf2	equ	0xFDF
  2120                           postinc2	equ	0xFDE
  2121                           postdec2	equ	0xFDD
  2122                           plusw2	equ	0xFDB
  2123                           fsr2h	equ	0xFDA
  2124                           fsr2l	equ	0xFD9
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _D_UART_Enable *****************
  2128 ;; Defined at:
  2129 ;;		line 244 in file "Drivers/UART_Driver.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  enable          1    wreg     unsigned char 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  enable          1    0[BANK0 ] unsigned char 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0
  2144 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2146 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        1 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    6
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_D_UART_Init
  2154 ;;		_main
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text10
  2159  001206                     __ptext10:
  2160                           	opt stack 0
  2161  001206                     _D_UART_Enable:
  2162                           	opt stack 23
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;incstack = 0
  2166                           ;D_UART_Enable@enable stored from wreg
  2167  001206  0100               	movlb	0	; () banked
  2168  001208  6F60               	movwf	D_UART_Enable@enable& (0+255),b
  2169                           
  2170                           ;UART_Driver.c: 245: if(enable) {
  2171  00120A  0100               	movlb	0	; () banked
  2172  00120C  5160               	movf	D_UART_Enable@enable& (0+255),w,b
  2173  00120E  0100               	movlb	0	; () banked
  2174  001210  B4D8               	btfsc	status,2,c
  2175  001212  D006               	goto	l105
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  2179  001214  9E94               	bcf	3988,7,c	;volatile
  2180                           
  2181                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  2182  001216  8C94               	bsf	3988,6,c	;volatile
  2183                           
  2184                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  2185  001218  8AAC               	bsf	4012,5,c	;volatile
  2186                           
  2187                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  2188  00121A  88AB               	bsf	4011,4,c	;volatile
  2189                           
  2190                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  2191  00121C  8EAB               	bsf	4011,7,c	;volatile
  2192                           
  2193                           ;UART_Driver.c: 251: } else {
  2194  00121E  0012               	return	
  2195  001220                     l105:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  2199  001220  9E94               	bcf	3988,7,c	;volatile
  2200                           
  2201                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  2202  001222  9C94               	bcf	3988,6,c	;volatile
  2203                           
  2204                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  2205  001224  9AAC               	bcf	4012,5,c	;volatile
  2206                           
  2207                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  2208  001226  98AB               	bcf	4011,4,c	;volatile
  2209                           
  2210                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  2211  001228  9EAB               	bcf	4011,7,c	;volatile
  2212  00122A  0012               	return	
  2213  00122C                     __end_of_D_UART_Enable:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           prodh	equ	0xFF4
  2220                           prodl	equ	0xFF3
  2221                           intcon	equ	0xFF2
  2222                           postinc0	equ	0xFEE
  2223                           plusw0	equ	0xFEB
  2224                           wreg	equ	0xFE8
  2225                           postdec1	equ	0xFE5
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           postinc2	equ	0xFDE
  2229                           postdec2	equ	0xFDD
  2230                           plusw2	equ	0xFDB
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _D_PORT_Init *****************
  2236 ;; Defined at:
  2237 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2251 ;;      Params:         0       0       0       0       0       0       0       0       0
  2252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2254 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    6
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text11
  2266  00122C                     __ptext11:
  2267                           	opt stack 0
  2268  00122C                     _D_PORT_Init:
  2269                           	opt stack 24
  2270                           
  2271                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;incstack = 0
  2275  00122C  0E00               	movlw	0
  2276  00122E  6E92               	movwf	3986,c	;volatile
  2277  001230  0E00               	movlw	0
  2278  001232  6E80               	movwf	3968,c	;volatile
  2279                           
  2280                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  2281  001234  0E00               	movlw	0
  2282  001236  6E93               	movwf	3987,c	;volatile
  2283  001238  0E00               	movlw	0
  2284  00123A  6E81               	movwf	3969,c	;volatile
  2285                           
  2286                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  2287  00123C  0E00               	movlw	0
  2288  00123E  6E94               	movwf	3988,c	;volatile
  2289  001240  0E00               	movlw	0
  2290  001242  6E82               	movwf	3970,c	;volatile
  2291                           
  2292                           ;PORT_Driver.c: 38: ADCON1 = 0x0F;
  2293  001244  0E0F               	movlw	15
  2294  001246  6EC1               	movwf	4033,c	;volatile
  2295  001248  0012               	return		;funcret
  2296  00124A                     __end_of_D_PORT_Init:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           postinc0	equ	0xFEE
  2306                           plusw0	equ	0xFEB
  2307                           wreg	equ	0xFE8
  2308                           postdec1	equ	0xFE5
  2309                           fsr1l	equ	0xFE1
  2310                           indf2	equ	0xFDF
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           plusw2	equ	0xFDB
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _LowISR *****************
  2319 ;; Defined at:
  2320 ;;		line 264 in file "Drivers/UART_Driver.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2336 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2337 ;;      Totals:        17       0       0       0       0       0       0       0       0
  2338 ;;Total ram usage:       17 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    5
  2341 ;; This function calls:
  2342 ;;		_fillDataBuffer
  2343 ;;		_readByte
  2344 ;; This function is called by:
  2345 ;;		Interrupt level 1
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	intcodelo
  2350  000018                     __pintcodelo:
  2351                           	opt stack 0
  2352  000018                     _LowISR:
  2353                           	opt stack 21
  2354                           
  2355                           ;incstack = 0
  2356  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2357  00001A  CFD8 F019          	movff	status,??_LowISR
  2358  00001E  CFE8 F01A          	movff	wreg,??_LowISR+1
  2359  000022  CFE0 F01B          	movff	bsr,??_LowISR+2
  2360  000026  CFFA F01C          	movff	pclath,??_LowISR+3
  2361  00002A  CFFB F01D          	movff	pclatu,??_LowISR+4
  2362  00002E  CFE9 F01E          	movff	fsr0l,??_LowISR+5
  2363  000032  CFEA F01F          	movff	fsr0h,??_LowISR+6
  2364  000036  CFE1 F020          	movff	fsr1l,??_LowISR+7
  2365  00003A  CFE2 F021          	movff	fsr1h,??_LowISR+8
  2366  00003E  CFD9 F022          	movff	fsr2l,??_LowISR+9
  2367  000042  CFDA F023          	movff	fsr2h,??_LowISR+10
  2368  000046  CFF3 F024          	movff	prodl,??_LowISR+11
  2369  00004A  CFF4 F025          	movff	prodh,??_LowISR+12
  2370  00004E  CFF6 F026          	movff	tblptrl,??_LowISR+13
  2371  000052  CFF7 F027          	movff	tblptrh,??_LowISR+14
  2372  000056  CFF8 F028          	movff	tblptru,??_LowISR+15
  2373  00005A  CFF5 F029          	movff	tablat,??_LowISR+16
  2374                           
  2375                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  2376  00005E  AA9E               	btfss	3998,5,c	;volatile
  2377  000060  D005               	goto	i1l114
  2378                           
  2379                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  2380  000062  EC3E  F009         	call	_readByte	;wreg free
  2381  000066  EC22  F004         	call	_fillDataBuffer
  2382                           
  2383                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  2384  00006A  9A9E               	bcf	3998,5,c	;volatile
  2385  00006C                     i1l114:
  2386  00006C  C029  FFF5         	movff	??_LowISR+16,tablat
  2387  000070  C028  FFF8         	movff	??_LowISR+15,tblptru
  2388  000074  C027  FFF7         	movff	??_LowISR+14,tblptrh
  2389  000078  C026  FFF6         	movff	??_LowISR+13,tblptrl
  2390  00007C  C025  FFF4         	movff	??_LowISR+12,prodh
  2391  000080  C024  FFF3         	movff	??_LowISR+11,prodl
  2392  000084  C023  FFDA         	movff	??_LowISR+10,fsr2h
  2393  000088  C022  FFD9         	movff	??_LowISR+9,fsr2l
  2394  00008C  C021  FFE2         	movff	??_LowISR+8,fsr1h
  2395  000090  C020  FFE1         	movff	??_LowISR+7,fsr1l
  2396  000094  C01F  FFEA         	movff	??_LowISR+6,fsr0h
  2397  000098  C01E  FFE9         	movff	??_LowISR+5,fsr0l
  2398  00009C  C01D  FFFB         	movff	??_LowISR+4,pclatu
  2399  0000A0  C01C  FFFA         	movff	??_LowISR+3,pclath
  2400  0000A4  C01B  FFE0         	movff	??_LowISR+2,bsr
  2401  0000A8  C01A  FFE8         	movff	??_LowISR+1,wreg
  2402  0000AC  C019  FFD8         	movff	??_LowISR,status
  2403  0000B0  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2404  0000B2  0010               	retfie	
  2405  0000B4                     __end_of_LowISR:
  2406                           	opt stack 0
  2407                           pclatu	equ	0xFFB
  2408                           pclath	equ	0xFFA
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           prodh	equ	0xFF4
  2414                           prodl	equ	0xFF3
  2415                           intcon	equ	0xFF2
  2416                           postinc0	equ	0xFEE
  2417                           plusw0	equ	0xFEB
  2418                           fsr0h	equ	0xFEA
  2419                           fsr0l	equ	0xFE9
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           bsr	equ	0xFE0
  2425                           indf2	equ	0xFDF
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           plusw2	equ	0xFDB
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function _readByte *****************
  2434 ;; Defined at:
  2435 ;;		line 74 in file "Drivers/UART_Driver.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      unsigned char 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2449 ;;      Params:         0       0       0       0       0       0       0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2452 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2453 ;;Total ram usage:        0 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_LowISR
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text13
  2463  00127C                     __ptext13:
  2464                           	opt stack 0
  2465  00127C                     _readByte:
  2466                           	opt stack 25
  2467                           
  2468                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  2469                           
  2470                           ;incstack = 0
  2471  00127C  50AB               	movf	4011,w,c	;volatile
  2472                           
  2473                           ;UART_Driver.c: 77: }
  2474                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  2475  00127E  50AB               	movf	4011,w,c	;volatile
  2476                           
  2477                           ;UART_Driver.c: 80: }
  2478                           ;UART_Driver.c: 81: return RCREG;
  2479  001280  50AE               	movf	4014,w,c	;volatile
  2480  001282  0012               	return	
  2481  001284                     __end_of_readByte:
  2482                           	opt stack 0
  2483                           pclatu	equ	0xFFB
  2484                           pclath	equ	0xFFA
  2485                           tblptru	equ	0xFF8
  2486                           tblptrh	equ	0xFF7
  2487                           tblptrl	equ	0xFF6
  2488                           tablat	equ	0xFF5
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           intcon	equ	0xFF2
  2492                           postinc0	equ	0xFEE
  2493                           plusw0	equ	0xFEB
  2494                           fsr0h	equ	0xFEA
  2495                           fsr0l	equ	0xFE9
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           bsr	equ	0xFE0
  2501                           indf2	equ	0xFDF
  2502                           postinc2	equ	0xFDE
  2503                           postdec2	equ	0xFDD
  2504                           plusw2	equ	0xFDB
  2505                           fsr2h	equ	0xFDA
  2506                           fsr2l	equ	0xFD9
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function _fillDataBuffer *****************
  2510 ;; Defined at:
  2511 ;;		line 84 in file "Drivers/UART_Driver.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  data            1    wreg     unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  data            1   23[COMRAM] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2525 ;;      Params:         0       0       0       0       0       0       0       0       0
  2526 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2528 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2529 ;;Total ram usage:        1 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    4
  2532 ;; This function calls:
  2533 ;;		_acknowledge
  2534 ;; This function is called by:
  2535 ;;		_LowISR
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text14
  2540  000844                     __ptext14:
  2541                           	opt stack 0
  2542  000844                     _fillDataBuffer:
  2543                           	opt stack 21
  2544                           
  2545                           ;incstack = 0
  2546                           ;fillDataBuffer@data stored from wreg
  2547  000844  6E18               	movwf	fillDataBuffer@data,c
  2548                           
  2549                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  2550  000846  D0CF               	goto	i1l1436
  2551  000848                     i1l1358:
  2552                           
  2553                           ;UART_Driver.c: 87: if(data == 0x26) {
  2554  000848  0E26               	movlw	38
  2555  00084A  1818               	xorwf	fillDataBuffer@data,w,c
  2556  00084C  A4D8               	btfss	status,2,c
  2557  00084E  D012               	goto	i1l1362
  2558                           
  2559                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  2560  000850  0E00               	movlw	0
  2561  000852  0101               	movlb	1	; () banked
  2562  000854  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2563                           
  2564                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  2565  000856  0E00               	movlw	0
  2566  000858  0101               	movlb	1	; () banked
  2567  00085A  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2568                           
  2569                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  2570  00085C  0E00               	movlw	0
  2571  00085E  0101               	movlb	1	; () banked
  2572  000860  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2573                           
  2574                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  2575  000862  0E00               	movlw	0
  2576  000864  0101               	movlb	1	; () banked
  2577  000866  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2578                           
  2579                           ;UART_Driver.c: 92: readReady = 0;
  2580  000868  0E00               	movlw	0
  2581  00086A  6E37               	movwf	_readReady,c
  2582                           
  2583                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  2584  00086C  0E01               	movlw	1
  2585  00086E  0101               	movlb	1	; () banked
  2586  000870  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2587                           
  2588                           ;UART_Driver.c: 94: } else {
  2589  000872  0012               	return	
  2590  000874                     i1l1362:
  2591                           
  2592                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  2593  000874  0E00               	movlw	0
  2594  000876  0101               	movlb	1	; () banked
  2595  000878  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2596                           
  2597                           ; BSR set to: 1
  2598                           ;UART_Driver.c: 97: }
  2599                           ;UART_Driver.c: 98: break;
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;UART_Driver.c: 96: return;
  2603  00087A  0012               	return	
  2604  00087C                     i1l1366:
  2605                           
  2606                           ; BSR set to: 1
  2607                           ;UART_Driver.c: 101: if (data == 0x3A) {
  2608  00087C  0E3A               	movlw	58
  2609  00087E  1818               	xorwf	fillDataBuffer@data,w,c
  2610  000880  A4D8               	btfss	status,2,c
  2611  000882  D00F               	goto	i1l1372
  2612                           
  2613                           ; BSR set to: 1
  2614                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  2615  000884  0E02               	movlw	2
  2616  000886  0101               	movlb	1	; () banked
  2617  000888  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  2621  00088A  0101               	movlb	1	; () banked
  2622  00088C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2623  00088E  0D01               	mullw	1
  2624  000890  0E00               	movlw	low _readBuffer
  2625  000892  24F3               	addwf	prodl,w,c
  2626  000894  6ED9               	movwf	fsr2l,c
  2627  000896  0E01               	movlw	high _readBuffer
  2628  000898  20F4               	addwfc	prodh,w,c
  2629  00089A  6EDA               	movwf	fsr2h,c
  2630  00089C  0E00               	movlw	0
  2631  00089E  6EDF               	movwf	indf2,c
  2632                           
  2633                           ;UART_Driver.c: 104: } else {
  2634  0008A0  0012               	return	
  2635  0008A2                     i1l1372:
  2636                           
  2637                           ; BSR set to: 1
  2638                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  2639  0008A2  0101               	movlb	1	; () banked
  2640  0008A4  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2641  0008A6  0D01               	mullw	1
  2642  0008A8  0E00               	movlw	low _readBuffer
  2643  0008AA  24F3               	addwf	prodl,w,c
  2644  0008AC  6ED9               	movwf	fsr2l,c
  2645  0008AE  0E01               	movlw	high _readBuffer
  2646  0008B0  20F4               	addwfc	prodh,w,c
  2647  0008B2  6EDA               	movwf	fsr2h,c
  2648  0008B4  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2649                           
  2650                           ; BSR set to: 1
  2651                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  2652  0008B8  0101               	movlb	1	; () banked
  2653  0008BA  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  2654                           
  2655                           ; BSR set to: 1
  2656                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  2657  0008BC  0E0A               	movlw	10
  2658  0008BE  0101               	movlb	1	; () banked
  2659  0008C0  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  2660  0008C2  0012               	return	
  2661                           
  2662                           ; BSR set to: 1
  2663                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  2664  0008C4  0E00               	movlw	0
  2665  0008C6  0101               	movlb	1	; () banked
  2666  0008C8  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;UART_Driver.c: 109: }
  2670                           ;UART_Driver.c: 110: }
  2671                           ;UART_Driver.c: 111: break;
  2672                           
  2673                           ; BSR set to: 1
  2674  0008CA  0012               	return	
  2675  0008CC                     i1l1380:
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;UART_Driver.c: 114: if (data == 0x3A) {
  2679  0008CC  0E3A               	movlw	58
  2680  0008CE  1818               	xorwf	fillDataBuffer@data,w,c
  2681  0008D0  A4D8               	btfss	status,2,c
  2682  0008D2  D00F               	goto	i1l1386
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  2686  0008D4  0E03               	movlw	3
  2687  0008D6  0101               	movlb	1	; () banked
  2688  0008D8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2689                           
  2690                           ; BSR set to: 1
  2691                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  2692  0008DA  0101               	movlb	1	; () banked
  2693  0008DC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2694  0008DE  0D01               	mullw	1
  2695  0008E0  0E0B               	movlw	low (_readBuffer+11)
  2696  0008E2  24F3               	addwf	prodl,w,c
  2697  0008E4  6ED9               	movwf	fsr2l,c
  2698  0008E6  0E01               	movlw	high (_readBuffer+11)
  2699  0008E8  20F4               	addwfc	prodh,w,c
  2700  0008EA  6EDA               	movwf	fsr2h,c
  2701  0008EC  0E00               	movlw	0
  2702  0008EE  6EDF               	movwf	indf2,c
  2703                           
  2704                           ;UART_Driver.c: 117: } else {
  2705  0008F0  0012               	return	
  2706  0008F2                     i1l1386:
  2707                           
  2708                           ; BSR set to: 1
  2709                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  2710  0008F2  0101               	movlb	1	; () banked
  2711  0008F4  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2712  0008F6  0D01               	mullw	1
  2713  0008F8  0E0B               	movlw	low (_readBuffer+11)
  2714  0008FA  24F3               	addwf	prodl,w,c
  2715  0008FC  6ED9               	movwf	fsr2l,c
  2716  0008FE  0E01               	movlw	high (_readBuffer+11)
  2717  000900  20F4               	addwfc	prodh,w,c
  2718  000902  6EDA               	movwf	fsr2h,c
  2719  000904  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2720                           
  2721                           ; BSR set to: 1
  2722                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  2723  000908  0101               	movlb	1	; () banked
  2724  00090A  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  2728  00090C  0E32               	movlw	50
  2729  00090E  0101               	movlb	1	; () banked
  2730  000910  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  2731  000912  0012               	return	
  2732                           
  2733                           ; BSR set to: 1
  2734                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  2735  000914  0E00               	movlw	0
  2736  000916  0101               	movlb	1	; () banked
  2737  000918  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2738                           
  2739                           ; BSR set to: 1
  2740                           ;UART_Driver.c: 122: }
  2741                           ;UART_Driver.c: 123: }
  2742                           ;UART_Driver.c: 124: break;
  2743                           
  2744                           ; BSR set to: 1
  2745  00091A  0012               	return	
  2746  00091C                     i1l1394:
  2747                           
  2748                           ; BSR set to: 1
  2749                           ;UART_Driver.c: 127: if (data == 0x3A) {
  2750  00091C  0E3A               	movlw	58
  2751  00091E  1818               	xorwf	fillDataBuffer@data,w,c
  2752  000920  A4D8               	btfss	status,2,c
  2753  000922  D00F               	goto	i1l1400
  2754                           
  2755                           ; BSR set to: 1
  2756                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  2757  000924  0E04               	movlw	4
  2758  000926  0101               	movlb	1	; () banked
  2759  000928  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2760                           
  2761                           ; BSR set to: 1
  2762                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  2763  00092A  0101               	movlb	1	; () banked
  2764  00092C  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2765  00092E  0D01               	mullw	1
  2766  000930  0E3E               	movlw	low (_readBuffer+62)
  2767  000932  24F3               	addwf	prodl,w,c
  2768  000934  6ED9               	movwf	fsr2l,c
  2769  000936  0E01               	movlw	high (_readBuffer+62)
  2770  000938  20F4               	addwfc	prodh,w,c
  2771  00093A  6EDA               	movwf	fsr2h,c
  2772  00093C  0E00               	movlw	0
  2773  00093E  6EDF               	movwf	indf2,c
  2774                           
  2775                           ;UART_Driver.c: 130: } else {
  2776  000940  0012               	return	
  2777  000942                     i1l1400:
  2778                           
  2779                           ; BSR set to: 1
  2780                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  2781  000942  0101               	movlb	1	; () banked
  2782  000944  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2783  000946  0D01               	mullw	1
  2784  000948  0E3E               	movlw	low (_readBuffer+62)
  2785  00094A  24F3               	addwf	prodl,w,c
  2786  00094C  6ED9               	movwf	fsr2l,c
  2787  00094E  0E01               	movlw	high (_readBuffer+62)
  2788  000950  20F4               	addwfc	prodh,w,c
  2789  000952  6EDA               	movwf	fsr2h,c
  2790  000954  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2791                           
  2792                           ; BSR set to: 1
  2793                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  2794  000958  0101               	movlb	1	; () banked
  2795  00095A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  2796                           
  2797                           ; BSR set to: 1
  2798                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  2799  00095C  0E32               	movlw	50
  2800  00095E  0101               	movlb	1	; () banked
  2801  000960  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  2802  000962  0012               	return	
  2803                           
  2804                           ; BSR set to: 1
  2805                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  2806  000964  0E00               	movlw	0
  2807  000966  0101               	movlb	1	; () banked
  2808  000968  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2809                           
  2810                           ; BSR set to: 1
  2811                           ;UART_Driver.c: 135: }
  2812                           ;UART_Driver.c: 136: }
  2813                           ;UART_Driver.c: 137: break;
  2814                           
  2815                           ; BSR set to: 1
  2816  00096A  0012               	return	
  2817  00096C                     i1l1408:
  2818                           
  2819                           ; BSR set to: 1
  2820                           ;UART_Driver.c: 140: if (data == 0x3A) {
  2821  00096C  0E3A               	movlw	58
  2822  00096E  1818               	xorwf	fillDataBuffer@data,w,c
  2823  000970  A4D8               	btfss	status,2,c
  2824  000972  D00F               	goto	i1l1414
  2825                           
  2826                           ; BSR set to: 1
  2827                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  2828  000974  0E05               	movlw	5
  2829  000976  0101               	movlb	1	; () banked
  2830  000978  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2831                           
  2832                           ; BSR set to: 1
  2833                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  2834  00097A  0101               	movlb	1	; () banked
  2835  00097C  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2836  00097E  0D01               	mullw	1
  2837  000980  0E71               	movlw	low (_readBuffer+113)
  2838  000982  24F3               	addwf	prodl,w,c
  2839  000984  6ED9               	movwf	fsr2l,c
  2840  000986  0E01               	movlw	high (_readBuffer+113)
  2841  000988  20F4               	addwfc	prodh,w,c
  2842  00098A  6EDA               	movwf	fsr2h,c
  2843  00098C  0E00               	movlw	0
  2844  00098E  6EDF               	movwf	indf2,c
  2845                           
  2846                           ;UART_Driver.c: 143: } else {
  2847  000990  0012               	return	
  2848  000992                     i1l1414:
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  2852  000992  0101               	movlb	1	; () banked
  2853  000994  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2854  000996  0D01               	mullw	1
  2855  000998  0E71               	movlw	low (_readBuffer+113)
  2856  00099A  24F3               	addwf	prodl,w,c
  2857  00099C  6ED9               	movwf	fsr2l,c
  2858  00099E  0E01               	movlw	high (_readBuffer+113)
  2859  0009A0  20F4               	addwfc	prodh,w,c
  2860  0009A2  6EDA               	movwf	fsr2h,c
  2861  0009A4  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2862                           
  2863                           ; BSR set to: 1
  2864                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  2865  0009A8  0101               	movlb	1	; () banked
  2866  0009AA  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  2867                           
  2868                           ; BSR set to: 1
  2869                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  2870  0009AC  0E32               	movlw	50
  2871  0009AE  0101               	movlb	1	; () banked
  2872  0009B0  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  2873  0009B2  0012               	return	
  2874                           
  2875                           ; BSR set to: 1
  2876                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  2877  0009B4  0E00               	movlw	0
  2878  0009B6  0101               	movlb	1	; () banked
  2879  0009B8  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;UART_Driver.c: 148: }
  2883                           ;UART_Driver.c: 149: }
  2884                           ;UART_Driver.c: 150: break;
  2885                           
  2886                           ; BSR set to: 1
  2887  0009BA  0012               	return	
  2888  0009BC                     i1l1422:
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;UART_Driver.c: 153: if (data == 0x24) {
  2892  0009BC  0E24               	movlw	36
  2893  0009BE  1818               	xorwf	fillDataBuffer@data,w,c
  2894  0009C0  A4D8               	btfss	status,2,c
  2895  0009C2  D008               	goto	i1l1430
  2896                           
  2897                           ; BSR set to: 1
  2898                           ;UART_Driver.c: 154: acknowledge();
  2899  0009C4  EC39  F008         	call	_acknowledge	;wreg free
  2900                           
  2901                           ;UART_Driver.c: 155: readReady = 1;
  2902  0009C8  0E01               	movlw	1
  2903  0009CA  6E37               	movwf	_readReady,c
  2904                           
  2905                           ;UART_Driver.c: 156: readBuffer.state = 0x00;
  2906  0009CC  0E00               	movlw	0
  2907  0009CE  0101               	movlb	1	; () banked
  2908  0009D0  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2909                           
  2910                           ;UART_Driver.c: 157: } else {
  2911  0009D2  0012               	return	
  2912  0009D4                     i1l1430:
  2913                           
  2914                           ; BSR set to: 1
  2915                           ;UART_Driver.c: 159: readBuffer.readId = (data - 0x30);
  2916  0009D4  5018               	movf	fillDataBuffer@data,w,c
  2917  0009D6  0FD0               	addlw	208
  2918  0009D8  0101               	movlb	1	; () banked
  2919  0009DA  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  2920                           
  2921                           ; BSR set to: 1
  2922                           ;UART_Driver.c: 160: }
  2923                           ;UART_Driver.c: 161: break;
  2924  0009DC  0012               	return	
  2925  0009DE                     i1l1432:
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  2929  0009DE  0E00               	movlw	0
  2930  0009E0  0101               	movlb	1	; () banked
  2931  0009E2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2932                           
  2933                           ; BSR set to: 1
  2934                           ;UART_Driver.c: 166: }
  2935                           
  2936                           ;UART_Driver.c: 165: break;
  2937  0009E4  0012               	return	
  2938  0009E6                     i1l1436:
  2939  0009E6  0101               	movlb	1	; () banked
  2940  0009E8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  2941                           
  2942                           ; Switch size 1, requested type "space"
  2943                           ; Number of cases is 6, Range of values is 0 to 5
  2944                           ; switch strategies available:
  2945                           ; Name         Instructions Cycles
  2946                           ; simple_byte           19    10 (average)
  2947                           ;	Chosen strategy is simple_byte
  2948  0009EA  0A00               	xorlw	0	; case 0
  2949  0009EC  B4D8               	btfsc	status,2,c
  2950  0009EE  D72C               	goto	i1l1358
  2951  0009F0  0A01               	xorlw	1	; case 1
  2952  0009F2  B4D8               	btfsc	status,2,c
  2953  0009F4  D743               	goto	i1l1366
  2954  0009F6  0A03               	xorlw	3	; case 2
  2955  0009F8  B4D8               	btfsc	status,2,c
  2956  0009FA  D768               	goto	i1l1380
  2957  0009FC  0A01               	xorlw	1	; case 3
  2958  0009FE  B4D8               	btfsc	status,2,c
  2959  000A00  D78D               	goto	i1l1394
  2960  000A02  0A07               	xorlw	7	; case 4
  2961  000A04  B4D8               	btfsc	status,2,c
  2962  000A06  D7B2               	goto	i1l1408
  2963  000A08  0A01               	xorlw	1	; case 5
  2964  000A0A  B4D8               	btfsc	status,2,c
  2965  000A0C  D7D7               	goto	i1l1422
  2966  000A0E  D7E7               	goto	i1l1432
  2967  000A10                     __end_of_fillDataBuffer:
  2968                           	opt stack 0
  2969                           pclatu	equ	0xFFB
  2970                           pclath	equ	0xFFA
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           postinc0	equ	0xFEE
  2979                           plusw0	equ	0xFEB
  2980                           fsr0h	equ	0xFEA
  2981                           fsr0l	equ	0xFE9
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           fsr1h	equ	0xFE2
  2985                           fsr1l	equ	0xFE1
  2986                           bsr	equ	0xFE0
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           postdec2	equ	0xFDD
  2990                           plusw2	equ	0xFDB
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _acknowledge *****************
  2996 ;; Defined at:
  2997 ;;		line 169 in file "Drivers/UART_Driver.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3011 ;;      Params:         0       0       0       0       0       0       0       0       0
  3012 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3014 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3015 ;;Total ram usage:        0 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    3
  3018 ;; This function calls:
  3019 ;;		i1_printf
  3020 ;; This function is called by:
  3021 ;;		_fillDataBuffer
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text15
  3026  001072                     __ptext15:
  3027                           	opt stack 0
  3028  001072                     _acknowledge:
  3029                           	opt stack 21
  3030                           
  3031                           ;UART_Driver.c: 170: printf(startCharacter);
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;incstack = 0
  3035  001072  C03A  F008         	movff	_startCharacter,i1printf@f
  3036  001076  C03B  F009         	movff	_startCharacter+1,i1printf@f+1
  3037  00107A  5008               	movf	i1printf@f,w,c
  3038  00107C  1009               	iorwf	i1printf@f+1,w,c
  3039  00107E  A4D8               	btfss	status,2,c
  3040  001080  0E00               	movlw	low (__mediumconst shr (0+16))
  3041  001082  6E0A               	movwf	i1printf@f+2,c
  3042  001084  ECB5  F005         	call	i1_printf	;wreg free
  3043                           
  3044                           ;UART_Driver.c: 172: printf(ackCharacter);
  3045  001088  C038  F008         	movff	_ackCharacter,i1printf@f
  3046  00108C  C039  F009         	movff	_ackCharacter+1,i1printf@f+1
  3047  001090  5008               	movf	i1printf@f,w,c
  3048  001092  1009               	iorwf	i1printf@f+1,w,c
  3049  001094  A4D8               	btfss	status,2,c
  3050  001096  0E00               	movlw	low (__mediumconst shr (0+16))
  3051  001098  6E0A               	movwf	i1printf@f+2,c
  3052  00109A  ECB5  F005         	call	i1_printf	;wreg free
  3053                           
  3054                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  3055  00109E  0E38               	movlw	low STR_5
  3056  0010A0  6E08               	movwf	i1printf@f,c
  3057  0010A2  0E08               	movlw	high STR_5
  3058  0010A4  6E09               	movwf	i1printf@f+1,c
  3059  0010A6  5008               	movf	i1printf@f,w,c
  3060  0010A8  1009               	iorwf	i1printf@f+1,w,c
  3061  0010AA  A4D8               	btfss	status,2,c
  3062  0010AC  0E00               	movlw	low (__mediumconst shr (0+16))
  3063  0010AE  6E0A               	movwf	i1printf@f+2,c
  3064  0010B0  C1A4  F00B         	movff	_readBuffer+164,?i1_printf+3
  3065  0010B4  6A0C               	clrf	?i1_printf+4,c
  3066  0010B6  ECB5  F005         	call	i1_printf	;wreg free
  3067                           
  3068                           ;UART_Driver.c: 176: printf(stopCharacter);
  3069  0010BA  C03C  F008         	movff	_stopCharacter,i1printf@f
  3070  0010BE  C03D  F009         	movff	_stopCharacter+1,i1printf@f+1
  3071  0010C2  5008               	movf	i1printf@f,w,c
  3072  0010C4  1009               	iorwf	i1printf@f+1,w,c
  3073  0010C6  A4D8               	btfss	status,2,c
  3074  0010C8  0E00               	movlw	low (__mediumconst shr (0+16))
  3075  0010CA  6E0A               	movwf	i1printf@f+2,c
  3076  0010CC  ECB5  F005         	call	i1_printf	;wreg free
  3077  0010D0  0012               	return		;funcret
  3078  0010D2                     __end_of_acknowledge:
  3079                           	opt stack 0
  3080                           pclatu	equ	0xFFB
  3081                           pclath	equ	0xFFA
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           intcon	equ	0xFF2
  3089                           postinc0	equ	0xFEE
  3090                           plusw0	equ	0xFEB
  3091                           fsr0h	equ	0xFEA
  3092                           fsr0l	equ	0xFE9
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           fsr1h	equ	0xFE2
  3096                           fsr1l	equ	0xFE1
  3097                           bsr	equ	0xFE0
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           plusw2	equ	0xFDB
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function i1_printf *****************
  3107 ;; Defined at:
  3108 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  f               3    7[COMRAM] PTR const unsigned char 
  3111 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
  3112 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3113 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  printf          4    0        struct .
  3116 ;;  printf          3    0        PTR const unsigned char 
  3117 ;;  printf          2   19[COMRAM] unsigned int 
  3118 ;;  printf          2   16[COMRAM] PTR void [1]
  3119 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3120 ;;  printf          2    0        unsigned int 
  3121 ;;  printf          1   22[COMRAM] char 
  3122 ;;  printf          1   21[COMRAM] char 
  3123 ;;  printf          1   18[COMRAM] unsigned char 
  3124 ;;  printf          1   15[COMRAM] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  2    7[COMRAM] int 
  3127 ;; Registers used:
  3128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3134 ;;      Params:         5       0       0       0       0       0       0       0       0
  3135 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3136 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3137 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3138 ;;Total ram usage:       16 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    2
  3141 ;; This function calls:
  3142 ;;		i1___lwdiv
  3143 ;;		i1_putch
  3144 ;; This function is called by:
  3145 ;;		_acknowledge
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text16
  3150  000B6A                     __ptext16:
  3151                           	opt stack 0
  3152  000B6A                     i1_printf:
  3153                           	opt stack 21
  3154                           
  3155                           ;doprnt.c: 466: va_list ap;
  3156                           ;doprnt.c: 499: signed char c;
  3157                           ;doprnt.c: 506: signed char prec;
  3158                           ;doprnt.c: 508: unsigned char flag;
  3159                           ;doprnt.c: 523: union {
  3160                           ;doprnt.c: 524: unsigned long vd;
  3161                           ;doprnt.c: 525: double integ;
  3162                           ;doprnt.c: 526: } tmpval;
  3163                           ;doprnt.c: 528: unsigned int val;
  3164                           ;doprnt.c: 529: unsigned len;
  3165                           ;doprnt.c: 530: const char * cp;
  3166                           ;doprnt.c: 533: *ap = __va_start();
  3167                           
  3168                           ;incstack = 0
  3169  000B6A  0E0B               	movlw	low (?i1_printf+3)
  3170  000B6C  6E11               	movwf	i1printf@ap,c
  3171  000B6E  0E00               	movlw	high (?i1_printf+3)
  3172  000B70  6E12               	movwf	i1printf@ap+1,c
  3173                           
  3174                           ;doprnt.c: 536: while(c = *f++) {
  3175  000B72  D079               	goto	i1l1262
  3176  000B74                     i1l1224:
  3177                           
  3178                           ;doprnt.c: 538: if(c != '%')
  3179  000B74  0E25               	movlw	37
  3180  000B76  1817               	xorwf	i1printf@c,w,c
  3181  000B78  B4D8               	btfsc	status,2,c
  3182  000B7A  D004               	goto	i1l1228
  3183                           
  3184                           ;doprnt.c: 540: {
  3185                           ;doprnt.c: 541: (putch(c) );
  3186  000B7C  5017               	movf	i1printf@c,w,c
  3187  000B7E  EC39  F009         	call	i1_putch
  3188                           
  3189                           ;doprnt.c: 542: continue;
  3190  000B82  D071               	goto	i1l1262
  3191  000B84                     i1l1228:
  3192                           
  3193                           ;doprnt.c: 543: }
  3194                           ;doprnt.c: 548: flag = 0;
  3195  000B84  0E00               	movlw	0
  3196  000B86  6E10               	movwf	i1printf@flag,c
  3197                           
  3198                           ;doprnt.c: 635: switch(c = *f++) {
  3199  000B88  D004               	goto	i1l1234
  3200  000B8A                     i1l1230:
  3201                           
  3202                           ;doprnt.c: 809: (putch(c) );
  3203  000B8A  5017               	movf	i1printf@c,w,c
  3204  000B8C  EC39  F009         	call	i1_putch
  3205                           
  3206                           ;doprnt.c: 810: continue;
  3207  000B90  D06A               	goto	i1l1262
  3208  000B92                     i1l1234:
  3209  000B92  C008  F00D         	movff	i1printf@f,??i1_printf
  3210  000B96  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3211  000B9A  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3212  000B9E  2A08               	incf	i1printf@f,f,c
  3213  000BA0  0E00               	movlw	0
  3214  000BA2  2209               	addwfc	i1printf@f+1,f,c
  3215  000BA4  220A               	addwfc	i1printf@f+2,f,c
  3216  000BA6  C00D  FFF6         	movff	??i1_printf,tblptrl
  3217  000BAA  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3218  000BAE  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3219  000BB2  0008               	tblrd		*
  3220  000BB4  CFF5 F017          	movff	tablat,i1printf@c
  3221  000BB8  5017               	movf	i1printf@c,w,c
  3222                           
  3223                           ; Switch size 1, requested type "space"
  3224                           ; Number of cases is 2, Range of values is 0 to 120
  3225                           ; switch strategies available:
  3226                           ; Name         Instructions Cycles
  3227                           ; simple_byte            7     4 (average)
  3228                           ;	Chosen strategy is simple_byte
  3229  000BBA  0A00               	xorlw	0	; case 0
  3230  000BBC  B4D8               	btfsc	status,2,c
  3231  000BBE  0012               	return	
  3232  000BC0  0A78               	xorlw	120	; case 120
  3233  000BC2  A4D8               	btfss	status,2,c
  3234  000BC4  D7E2               	goto	i1l1230
  3235                           
  3236                           ;doprnt.c: 1273: {
  3237                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3238  000BC6  C011  FFD9         	movff	i1printf@ap,fsr2l
  3239  000BCA  C012  FFDA         	movff	i1printf@ap+1,fsr2h
  3240  000BCE  CFDE F014          	movff	postinc2,i1printf@val
  3241  000BD2  CFDD F015          	movff	postdec2,i1printf@val+1
  3242  000BD6  0E02               	movlw	2
  3243  000BD8  2611               	addwf	i1printf@ap,f,c
  3244  000BDA  0E00               	movlw	0
  3245  000BDC  2212               	addwfc	i1printf@ap+1,f,c
  3246                           
  3247                           ;doprnt.c: 1287: }
  3248                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3249  000BDE  0E01               	movlw	1
  3250  000BE0  6E17               	movwf	i1printf@c,c
  3251  000BE2                     i1l1242:
  3252  000BE2  0E04               	movlw	4
  3253  000BE4  1817               	xorwf	i1printf@c,w,c
  3254  000BE6  B4D8               	btfsc	status,2,c
  3255  000BE8  D012               	goto	i1l180
  3256                           
  3257                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3258  000BEA  5017               	movf	i1printf@c,w,c
  3259  000BEC  0D02               	mullw	2
  3260  000BEE  0E01               	movlw	low _hexpowers
  3261  000BF0  24F3               	addwf	prodl,w,c
  3262  000BF2  6EF6               	movwf	tblptrl,c
  3263  000BF4  0E08               	movlw	high _hexpowers
  3264  000BF6  20F4               	addwfc	prodh,w,c
  3265  000BF8  6EF7               	movwf	tblptrh,c
  3266  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  3267  000BFA                     	endif
  3268  000BFA  0009               	tblrd		*+
  3269  000BFC  50F5               	movf	tablat,w,c
  3270  000BFE  5C14               	subwf	i1printf@val,w,c
  3271  000C00  0009               	tblrd		*+
  3272  000C02  50F5               	movf	tablat,w,c
  3273  000C04  5815               	subwfb	i1printf@val+1,w,c
  3274  000C06  A0D8               	btfss	status,0,c
  3275  000C08  D002               	goto	i1l180
  3276                           
  3277                           ;doprnt.c: 1318: break;
  3278  000C0A  2A17               	incf	i1printf@c,f,c
  3279  000C0C  D7EA               	goto	i1l1242
  3280  000C0E                     i1l180:
  3281                           
  3282                           ;doprnt.c: 1422: {
  3283                           ;doprnt.c: 1469: }
  3284                           ;doprnt.c: 1472: prec = c;
  3285  000C0E  C017  F016         	movff	i1printf@c,i1printf@prec
  3286                           
  3287                           ;doprnt.c: 1474: while(prec--) {
  3288  000C12  D025               	goto	i1l1260
  3289  000C14                     i1l1254:
  3290                           
  3291                           ;doprnt.c: 1478: {
  3292                           ;doprnt.c: 1499: {
  3293                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3294  000C14  C014  F001         	movff	i1printf@val,i1___lwdiv@dividend
  3295  000C18  C015  F002         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  3296  000C1C  5016               	movf	i1printf@prec,w,c
  3297  000C1E  0D02               	mullw	2
  3298  000C20  0E01               	movlw	low _hexpowers
  3299  000C22  24F3               	addwf	prodl,w,c
  3300  000C24  6EF6               	movwf	tblptrl,c
  3301  000C26  0E08               	movlw	high _hexpowers
  3302  000C28  20F4               	addwfc	prodh,w,c
  3303  000C2A  6EF7               	movwf	tblptrh,c
  3304  000C2C                     	if	0	;There are less than 3 active tblptr bytes
  3305  000C2C                     	endif
  3306  000C2C  0009               	tblrd		*+
  3307  000C2E  CFF5 F003          	movff	tablat,i1___lwdiv@divisor
  3308  000C32  000A               	tblrd		*-
  3309  000C34  CFF5 F004          	movff	tablat,i1___lwdiv@divisor+1
  3310  000C38  ECC4  F008         	call	i1___lwdiv	;wreg free
  3311  000C3C  5001               	movf	?i1___lwdiv,w,c
  3312  000C3E  0B0F               	andlw	15
  3313  000C40  6E13               	movwf	i1printf@idx,c
  3314                           
  3315                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3316  000C42  5013               	movf	i1printf@idx,w,c
  3317  000C44  0D01               	mullw	1
  3318  000C46  0E09               	movlw	low STR_14
  3319  000C48  24F3               	addwf	prodl,w,c
  3320  000C4A  6EF6               	movwf	tblptrl,c
  3321  000C4C  0E08               	movlw	high STR_14
  3322  000C4E  20F4               	addwfc	prodh,w,c
  3323  000C50  6EF7               	movwf	tblptrh,c
  3324  000C52                     	if	0	;There are less than 3 active tblptr bytes
  3325  000C52                     	endif
  3326  000C52  0008               	tblrd		*
  3327  000C54  CFF5 F017          	movff	tablat,i1printf@c
  3328                           
  3329                           ;doprnt.c: 1508: }
  3330                           ;doprnt.c: 1523: }
  3331                           ;doprnt.c: 1524: (putch(c) );
  3332  000C58  5017               	movf	i1printf@c,w,c
  3333  000C5A  EC39  F009         	call	i1_putch
  3334  000C5E                     i1l1260:
  3335  000C5E  0616               	decf	i1printf@prec,f,c
  3336  000C60  2816               	incf	i1printf@prec,w,c
  3337  000C62  A4D8               	btfss	status,2,c
  3338  000C64  D7D7               	goto	i1l1254
  3339  000C66                     i1l1262:
  3340  000C66  C008  F00D         	movff	i1printf@f,??i1_printf
  3341  000C6A  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3342  000C6E  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3343  000C72  2A08               	incf	i1printf@f,f,c
  3344  000C74  0E00               	movlw	0
  3345  000C76  2209               	addwfc	i1printf@f+1,f,c
  3346  000C78  220A               	addwfc	i1printf@f+2,f,c
  3347  000C7A  C00D  FFF6         	movff	??i1_printf,tblptrl
  3348  000C7E  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3349  000C82  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3350  000C86  0008               	tblrd		*
  3351  000C88  CFF5 F017          	movff	tablat,i1printf@c
  3352  000C8C  5017               	movf	i1printf@c,w,c
  3353  000C8E  B4D8               	btfsc	status,2,c
  3354  000C90  0012               	return	
  3355  000C92  D770               	goto	i1l1224
  3356  000C94                     __end_ofi1_printf:
  3357                           	opt stack 0
  3358                           pclatu	equ	0xFFB
  3359                           pclath	equ	0xFFA
  3360                           tblptru	equ	0xFF8
  3361                           tblptrh	equ	0xFF7
  3362                           tblptrl	equ	0xFF6
  3363                           tablat	equ	0xFF5
  3364                           prodh	equ	0xFF4
  3365                           prodl	equ	0xFF3
  3366                           intcon	equ	0xFF2
  3367                           postinc0	equ	0xFEE
  3368                           plusw0	equ	0xFEB
  3369                           fsr0h	equ	0xFEA
  3370                           fsr0l	equ	0xFE9
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           bsr	equ	0xFE0
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           plusw2	equ	0xFDB
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function i1_putch *****************
  3385 ;; Defined at:
  3386 ;;		line 260 in file "Drivers/UART_Driver.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  data            1    wreg     unsigned char 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  data            1    1[COMRAM] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, status,2, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0
  3401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3403 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3404 ;;Total ram usage:        1 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    1
  3407 ;; This function calls:
  3408 ;;		i1_writeByte
  3409 ;; This function is called by:
  3410 ;;		i1_printf
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           	psect	text17
  3415  001272                     __ptext17:
  3416                           	opt stack 0
  3417  001272                     i1_putch:
  3418                           	opt stack 21
  3419                           
  3420                           ;incstack = 0
  3421                           ;i1putch@data stored from wreg
  3422  001272  6E02               	movwf	i1putch@data,c
  3423                           
  3424                           ;UART_Driver.c: 261: writeByte(data);
  3425  001274  5002               	movf	i1putch@data,w,c
  3426  001276  EC33  F009         	call	i1_writeByte
  3427  00127A  0012               	return		;funcret
  3428  00127C                     __end_ofi1_putch:
  3429                           	opt stack 0
  3430                           pclatu	equ	0xFFB
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           postinc0	equ	0xFEE
  3440                           plusw0	equ	0xFEB
  3441                           fsr0h	equ	0xFEA
  3442                           fsr0l	equ	0xFE9
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1h	equ	0xFE2
  3446                           fsr1l	equ	0xFE1
  3447                           bsr	equ	0xFE0
  3448                           indf2	equ	0xFDF
  3449                           postinc2	equ	0xFDE
  3450                           postdec2	equ	0xFDD
  3451                           plusw2	equ	0xFDB
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8
  3455                           
  3456 ;; *************** function i1_writeByte *****************
  3457 ;; Defined at:
  3458 ;;		line 69 in file "Drivers/UART_Driver.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  data            1    wreg     unsigned char 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  data            1    0[COMRAM] unsigned char 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      void 
  3465 ;; Registers used:
  3466 ;;		wreg
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0
  3473 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3475 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3476 ;;Total ram usage:        1 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		i1_putch
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text18
  3486  001266                     __ptext18:
  3487                           	opt stack 0
  3488  001266                     i1_writeByte:
  3489                           	opt stack 21
  3490                           
  3491                           ;incstack = 0
  3492                           ;i1writeByte@data stored from wreg
  3493  001266  6E01               	movwf	i1writeByte@data,c
  3494  001268                     i1l53:
  3495  001268  A2AC               	btfss	4012,1,c	;volatile
  3496  00126A  D7FE               	goto	i1l53
  3497                           
  3498                           ;UART_Driver.c: 71: TXREG = data;
  3499  00126C  C001  FFAD         	movff	i1writeByte@data,4013	;volatile
  3500  001270  0012               	return		;funcret
  3501  001272                     __end_ofi1_writeByte:
  3502                           	opt stack 0
  3503                           pclatu	equ	0xFFB
  3504                           pclath	equ	0xFFA
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           postinc0	equ	0xFEE
  3513                           plusw0	equ	0xFEB
  3514                           fsr0h	equ	0xFEA
  3515                           fsr0l	equ	0xFE9
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1h	equ	0xFE2
  3519                           fsr1l	equ	0xFE1
  3520                           bsr	equ	0xFE0
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           postdec2	equ	0xFDD
  3524                           plusw2	equ	0xFDB
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function i1___lwdiv *****************
  3530 ;; Defined at:
  3531 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  dividend        2    0[COMRAM] unsigned int 
  3534 ;;  divisor         2    2[COMRAM] unsigned int 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3537 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  2    0[COMRAM] unsigned int 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3547 ;;      Params:         4       0       0       0       0       0       0       0       0
  3548 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3550 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3551 ;;Total ram usage:        7 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		i1_printf
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text19
  3561  001188                     __ptext19:
  3562                           	opt stack 0
  3563  001188                     i1___lwdiv:
  3564                           	opt stack 22
  3565                           
  3566                           ;incstack = 0
  3567  001188  0E00               	movlw	0
  3568  00118A  6E06               	movwf	i1___lwdiv@quotient+1,c
  3569  00118C  0E00               	movlw	0
  3570  00118E  6E05               	movwf	i1___lwdiv@quotient,c
  3571  001190  5003               	movf	i1___lwdiv@divisor,w,c
  3572  001192  1004               	iorwf	i1___lwdiv@divisor+1,w,c
  3573  001194  B4D8               	btfsc	status,2,c
  3574  001196  D01C               	goto	i1l589
  3575  001198  0E01               	movlw	1
  3576  00119A  6E07               	movwf	i1___lwdiv@counter,c
  3577  00119C  D004               	goto	i1l1184
  3578  00119E                     i1l1182:
  3579  00119E  90D8               	bcf	status,0,c
  3580  0011A0  3603               	rlcf	i1___lwdiv@divisor,f,c
  3581  0011A2  3604               	rlcf	i1___lwdiv@divisor+1,f,c
  3582  0011A4  2A07               	incf	i1___lwdiv@counter,f,c
  3583  0011A6                     i1l1184:
  3584  0011A6  AE04               	btfss	i1___lwdiv@divisor+1,7,c
  3585  0011A8  D7FA               	goto	i1l1182
  3586  0011AA                     i1l1186:
  3587  0011AA  90D8               	bcf	status,0,c
  3588  0011AC  3605               	rlcf	i1___lwdiv@quotient,f,c
  3589  0011AE  3606               	rlcf	i1___lwdiv@quotient+1,f,c
  3590  0011B0  5003               	movf	i1___lwdiv@divisor,w,c
  3591  0011B2  5C01               	subwf	i1___lwdiv@dividend,w,c
  3592  0011B4  5004               	movf	i1___lwdiv@divisor+1,w,c
  3593  0011B6  5802               	subwfb	i1___lwdiv@dividend+1,w,c
  3594  0011B8  A0D8               	btfss	status,0,c
  3595  0011BA  D005               	goto	i1l1194
  3596  0011BC  5003               	movf	i1___lwdiv@divisor,w,c
  3597  0011BE  5E01               	subwf	i1___lwdiv@dividend,f,c
  3598  0011C0  5004               	movf	i1___lwdiv@divisor+1,w,c
  3599  0011C2  5A02               	subwfb	i1___lwdiv@dividend+1,f,c
  3600  0011C4  8005               	bsf	i1___lwdiv@quotient,0,c
  3601  0011C6                     i1l1194:
  3602  0011C6  90D8               	bcf	status,0,c
  3603  0011C8  3204               	rrcf	i1___lwdiv@divisor+1,f,c
  3604  0011CA  3203               	rrcf	i1___lwdiv@divisor,f,c
  3605  0011CC  2E07               	decfsz	i1___lwdiv@counter,f,c
  3606  0011CE  D7ED               	goto	i1l1186
  3607  0011D0                     i1l589:
  3608  0011D0  C005  F001         	movff	i1___lwdiv@quotient,?i1___lwdiv
  3609  0011D4  C006  F002         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  3610  0011D8  0012               	return		;funcret
  3611  0011DA                     __end_ofi1___lwdiv:
  3612                           	opt stack 0
  3613                           pclatu	equ	0xFFB
  3614                           pclath	equ	0xFFA
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           postinc0	equ	0xFEE
  3623                           plusw0	equ	0xFEB
  3624                           fsr0h	equ	0xFEA
  3625                           fsr0l	equ	0xFE9
  3626                           wreg	equ	0xFE8
  3627                           postdec1	equ	0xFE5
  3628                           fsr1h	equ	0xFE2
  3629                           fsr1l	equ	0xFE1
  3630                           bsr	equ	0xFE0
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           plusw2	equ	0xFDB
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           pclatu	equ	0xFFB
  3639                           pclath	equ	0xFFA
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           intcon	equ	0xFF2
  3647                           postinc0	equ	0xFEE
  3648                           plusw0	equ	0xFEB
  3649                           fsr0h	equ	0xFEA
  3650                           fsr0l	equ	0xFE9
  3651                           wreg	equ	0xFE8
  3652                           postdec1	equ	0xFE5
  3653                           fsr1h	equ	0xFE2
  3654                           fsr1l	equ	0xFE1
  3655                           bsr	equ	0xFE0
  3656                           indf2	equ	0xFDF
  3657                           postinc2	equ	0xFDE
  3658                           postdec2	equ	0xFDD
  3659                           plusw2	equ	0xFDB
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664                           	psect	rparam
  3665  0000                     pclatu	equ	0xFFB
  3666                           pclath	equ	0xFFA
  3667                           tblptru	equ	0xFF8
  3668                           tblptrh	equ	0xFF7
  3669                           tblptrl	equ	0xFF6
  3670                           tablat	equ	0xFF5
  3671                           prodh	equ	0xFF4
  3672                           prodl	equ	0xFF3
  3673                           intcon	equ	0xFF2
  3674                           postinc0	equ	0xFEE
  3675                           plusw0	equ	0xFEB
  3676                           fsr0h	equ	0xFEA
  3677                           fsr0l	equ	0xFE9
  3678                           wreg	equ	0xFE8
  3679                           postdec1	equ	0xFE5
  3680                           fsr1h	equ	0xFE2
  3681                           fsr1l	equ	0xFE1
  3682                           bsr	equ	0xFE0
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           plusw2	equ	0xFDB
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691                           	psect	temp
  3692  00003E                     btemp:
  3693                           	opt stack 0
  3694  00003E                     	ds	1
  3695  0000                     int$flags	set	btemp
  3696                           pclatu	equ	0xFFB
  3697                           pclath	equ	0xFFA
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           postinc0	equ	0xFEE
  3706                           plusw0	equ	0xFEB
  3707                           fsr0h	equ	0xFEA
  3708                           fsr0l	equ	0xFE9
  3709                           wreg	equ	0xFE8
  3710                           postdec1	equ	0xFE5
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           bsr	equ	0xFE0
  3714                           indf2	equ	0xFDF
  3715                           postinc2	equ	0xFDE
  3716                           postdec2	equ	0xFDD
  3717                           plusw2	equ	0xFDB
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8


Data Sizes:
    Strings     58
    Constant    8
    Data        8
    BSS         180
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      61
    BANK0           160     26      31
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_13(CODE[4]), STR_12(CODE[3]), STR_11(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_10(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_9(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[6]), ROM(CODE[32767]), 

    S32$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S32$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S32$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _main in BANK0

    _main->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte
    _D_UART_Init->___aldiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3754
                        _D_PORT_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     595
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1986
                                             21 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    20      3    1770
                                              7 BANK0     14    11      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5    1142
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     753
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              17    17      0     967
                                             24 COMRAM    17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (6) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _fillDataBuffer                                       1     1      0     967
                                             23 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (7) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            25    20      5     725
                                              7 COMRAM    16    11      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (10) i1_writeByte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PORT_Init
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      1F       5       19.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      3D       1       64.9%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      11        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 29 15:54:45 2016

                     l53 125C              __CFG_BOR$ON 000000                       bsr 000FE0  
            __CFG_BORV$3 000000             _ackCharacter 0038             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l105 1220                      l180 0AD2                      l589 1068  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      prod 000FF3  
                    wreg 000FE8             __CFG_FOSC$HS 000000      __end_ofi1_writeByte 1272  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1610 0D04  
                   l1530 1024                     l1612 0D14                     l1604 0CD6  
                   l1540 105A                     l1532 102A                     l1630 0D9C  
                   l1622 0D6E                     l1614 0D1A                     l1550 0A32  
                   l1528 1018                     l1552 0A3A                     l1626 0D80  
                   l1546 0A1E                     l1564 0A9C                     l1556 0A44  
                   l1582 0B2C                     l1576 0AD8                     l1584 0B38  
                   l1680 1178                     l1674 1132                     l1676 113E  
                   l1692 0DF4                     l1598 0CB8                     STR_1 083F  
                   STR_2 083D                     STR_3 0831                     STR_4 082D  
                   STR_5 0838                     STR_6 0841                     STR_7 0841  
                   STR_8 081A                     STR_9 083B                     u1131 11FC  
                   u1217 0F48                     u1171 0E08                     i1l53 1268  
                   _baud 0036                     _main 0DAE                     _read 002A  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 003E                     pclat 000FFA  
                   prodh 000FF4                     prodl 000FF3                     start 00B4  
          __CFG_IESO$OFF 000000          __end_ofi1_putch 127C            __CFG_MCLRE$ON 000000  
           ___param_bank 000010           _startCharacter 003A            __CFG_PLLDIV$5 000000  
        __end_of___aldiv 0DAE                    ?_main 0001                    STR_10 0820  
                  STR_11 0825                    STR_12 0835                    STR_13 0829  
                  STR_14 0809          __end_of___lwdiv 1072                    i1l114 006C  
                  i1l180 0C0E                    i1l589 11D0                    _RCREG 000FAE  
   __size_of_acknowledge 0060                    _SPBRG 000FAF                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _putch 124A          i1writeByte@data 0001                    tablat 000FF5  
           ?_D_UART_Init 006E             ?_D_UART_Read 0060                    plusw0 000FEB  
                  plusw2 000FDB                    status 000FD8             ?_D_PORT_Init 0001  
     __size_ofi1___lwdiv 0052            _stopCharacter 003C         __end_ofi1_printf 0C94  
             i1printf@ap 0011          __initialization 10D2         _D_UART_Init$1304 0073  
           __end_of_main 0E80                   ??_main 007A              i1_writeByte 1266  
          __activetblptr 000002          __CFG_CCP2MX$OFF 000000                   _ADCON1 000FC1  
                 ?_putch 0001                   i1l1230 0B8A                   i1l1224 0B74  
                 i1l1400 0942                   i1l1242 0BE2                   i1l1234 0B92  
                 i1l1260 0C5E                   i1l1228 0B84                   i1l1182 119E  
                 i1l1254 0C14                   i1l1262 0C66                   i1l1430 09D4  
                 i1l1422 09BC                   i1l1414 0992                   i1l1184 11A6  
                 i1l1432 09DE                   i1l1408 096C                   i1l1194 11C6  
                 i1l1186 11AA                   i1l1362 0874                   i1l1380 08CC  
                 i1l1372 08A2                   i1l1436 09E6                   i1l1366 087C  
                 i1l1358 0848                   i1l1394 091C                   i1l1386 08F2  
              ??i1_putch 0002                   _LowISR 0018           __CFG_XINST$OFF 000000  
              ??___aldiv 0068                ??___lwdiv 0064         __end_of_readByte 1284  
                 clear_0 10D8                   clear_1 10E4                   _printf 0A10  
                 _strcmp 1130        __end_ofi1___lwdiv 11DA             __pdataCOMRAM 0038  
  D_UART_Init@interrupts 0072             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            ?_D_UART_Write 0075  
        D_UART_Init@baud 0070          D_UART_Init@name 006E               __accesstop 0060  
__end_of__initialization 1122          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
            i1printf@idx 0013              i1printf@val 0014           __pcstackCOMRAM 0001  
           __pidataBANK0 128A              i1putch@data 0002            __end_of_putch 1258  
       _messageCharacter 007D   __size_of_D_UART_Enable 0026           ??_D_UART_Write 0079  
              ?i1_printf 0008                  ??_putch 0061               __pbssBANK1 0100  
   __size_of_D_UART_Init 00A8     __size_of_D_UART_Read 002C                  ?_LowISR 0001  
   __size_of_D_PORT_Init 001E               _deviceName 007A                  ?_printf 0067  
                ?_strcmp 0060               ??i1_printf 000D  __size_of_fillDataBuffer 01CC  
    D_UART_Enable@enable 0060          __CFG_VREGEN$OFF 000000                  i1_putch 1272  
              ?_readByte 0001       __size_of_writeByte 000E            _D_UART_Enable 1206  
                __Hparam 0000                  __Lparam 0000          __size_of_LowISR 009C  
             _readBuffer 0100                  ___aldiv 0C94                  ___lwdiv 0FFA  
           __psmallconst 0800          __CFG_STVREN$OFF 000000            ??_acknowledge 0018  
                __pcinit 10D2                  __ramtop 0800                  __ptext0 0DAE  
                __ptext1 1130                  __ptext2 0E80                  __ptext3 0A10  
                __ptext4 124A                  __ptext5 1258                  __ptext6 0FFA  
                __ptext7 11DA                  __ptext8 0F52                  __ptext9 0C94  
        __size_of_printf 015A             ?i1_writeByte 0001          __size_of_strcmp 0058  
      __end_of_hexpowers 0809        i1___lwdiv@divisor 0003        i1___lwdiv@counter 0007  
       ___aldiv@dividend 0060     end_of_initialization 1122               ??_readByte 0001  
          __Lmediumconst 0000           ?_D_UART_Enable 0001     __end_of_D_UART_Write 0F52  
              _RCSTAbits 000FAB                  printf@c 0074                  printf@f 0067  
       ___aldiv@quotient 006A                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                  strcmp@r 0065  
              _PORTAbits 000F80        __end_of_writeByte 1266                _TRISCbits 000F94  
    __end_of_acknowledge 10D2                i1___lwdiv 1188                _TXSTAbits 000FAC  
           i1printf@flag 0010             i1printf@prec 0016           __end_of_LowISR 00B4  
            _BAUDCONbits 000FB8            __pidataCOMRAM 1284           __end_of_printf 0B6A  
         __end_of_strcmp 1188      start_initialization 10D2           _fillDataBuffer 0844  
              i1printf@c 0017                i1printf@f 0008               ?i1___lwdiv 0001  
      __size_ofi1_printf 012A          ??_D_UART_Enable 0060                 ??_LowISR 0019  
            __pdataBANK0 007D         __CFG_LPT1OSC$OFF 000000              _acknowledge 1072  
       D_UART_Write@data 0077                 ??_printf 006A                 ??_strcmp 0064  
 __end_of_fillDataBuffer 0A10              __pbssCOMRAM 002A     __size_ofi1_writeByte 000C  
          __pcstackBANK0 0060            ??_D_UART_Init 0073            ??_D_UART_Read 0066  
               ?i1_putch 0001    __size_of_D_UART_Write 00D2            ??_D_PORT_Init 0060  
              __pnvBANK0 007A        __size_of_readByte 0008         ___lwdiv@dividend 0060  
               ?___aldiv 0060                 ?___lwdiv 0060              __pintcodelo 0018  
     fillDataBuffer@data 0018          ?_fillDataBuffer 0001              __smallconst 0800  
           _D_UART_Write 0E80                _hexpowers 0801                _readReady 0037  
       ___lwdiv@quotient 0065              ??i1___lwdiv 0005           __size_of_putch 000E  
        ___aldiv@divisor 0064          ___aldiv@counter 0068                 _IPR1bits 000F9F  
               _PIE1bits 000F9D      __end_of_D_UART_Init 0FFA      __end_of_D_UART_Read 1206  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
    __end_of_D_PORT_Init 124A               printf@flag 006D               printf@prec 0073  
               i1_printf 0B6A                _writeByte 1258                copy_data0 1116  
       __size_ofi1_putch 000A                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___aldiv 011A         __size_of___lwdiv 0078          ___lwdiv@divisor 0062  
        ___lwdiv@counter 0064                 __ptext10 1206                 __ptext11 122C  
               __ptext13 127C                 __ptext14 0844                 __ptext15 1072  
               __ptext16 0B6A                 __ptext17 1272                 __ptext18 1266  
               __ptext19 1188               ?_writeByte 0001       i1___lwdiv@dividend 0001  
            _D_UART_Init 0F52              _D_UART_Read 11DA                 _readData 0030  
               _readByte 127C            __size_of_main 00D2              _D_PORT_Init 122C  
               int$flags 003E                printf@idx 006E                printf@val 0071  
           ?_acknowledge 0001    __CFG_CPUDIV$OSC1_PLL2 000000       i1___lwdiv@quotient 0005  
              putch@data 0061               _INTCONbits 000FF2                 intlevel1 0000  
  __end_of_D_UART_Enable 122C                 printf@ap 006F         ??_fillDataBuffer 0018  
    D_UART_Write@command 0075            ??i1_writeByte 0001                 strcmp@s1 0060  
               strcmp@s2 0062            writeByte@data 0060             ___aldiv@sign 0069  
            ??_writeByte 0060  
