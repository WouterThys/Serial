

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 29 15:59:29 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  0012E0                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _ackCharacter
    45  0012E0  51                 	db	low STR_4
    46  0012E1  08                 	db	high STR_4
    47                           
    48                           ;initializer for _startCharacter
    49  0012E2  60                 	db	low STR_1
    50  0012E3  08                 	db	high STR_1
    51                           
    52                           ;initializer for _stopCharacter
    53  0012E4  5E                 	db	low STR_2
    54  0012E5  08                 	db	high STR_2
    55                           
    56                           	psect	idataBANK0
    57  0012E6                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _messageCharacter
    61  0012E6  55                 	db	low STR_3
    62  0012E7  08                 	db	high STR_3
    63                           
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	opt stack 0
    67  000800  00                 	db	0
    68  000801                     _hexpowers:
    69                           	opt stack 0
    70  000801  0001               	dw	1
    71  000803  0010               	dw	16
    72  000805  0100               	dw	256
    73  000807  1000               	dw	4096
    74  000809                     __end_of_hexpowers:
    75                           	opt stack 0
    76  000809                     STR_17:
    77  000809  50                 	db	80	;'P'
    78  00080A  75                 	db	117	;'u'
    79  00080B  74                 	db	116	;'t'
    80  00080C  74                 	db	116	;'t'
    81  00080D  69                 	db	105	;'i'
    82  00080E  6E                 	db	110	;'n'
    83  00080F  67                 	db	103	;'g'
    84  000810  20                 	db	32
    85  000811  6C                 	db	108	;'l'
    86  000812  65                 	db	101	;'e'
    87  000813  64                 	db	100	;'d'
    88  000814  20                 	db	32
    89  000815  6F                 	db	111	;'o'
    90  000816  66                 	db	102	;'f'
    91  000817  66                 	db	102	;'f'
    92  000818  20                 	db	32
    93  000819  73                 	db	115	;'s'
    94  00081A  69                 	db	105	;'i'
    95  00081B  72                 	db	114	;'r'
    96  00081C  00                 	db	0
    97  00081D                     STR_18:
    98  00081D  30                 	db	48	;'0'
    99  00081E  31                 	db	49	;'1'
   100  00081F  32                 	db	50	;'2'
   101  000820  33                 	db	51	;'3'
   102  000821  34                 	db	52	;'4'
   103  000822  35                 	db	53	;'5'
   104  000823  36                 	db	54	;'6'
   105  000824  37                 	db	55	;'7'
   106  000825  38                 	db	56	;'8'
   107  000826  39                 	db	57	;'9'
   108  000827  61                 	db	97	;'a'
   109  000828  62                 	db	98	;'b'
   110  000829  63                 	db	99	;'c'
   111  00082A  64                 	db	100	;'d'
   112  00082B  65                 	db	101	;'e'
   113  00082C  66                 	db	102	;'f'
   114  00082D  00                 	db	0
   115  00082E                     STR_14:
   116  00082E  49                 	db	73	;'I'
   117  00082F  20                 	db	32
   118  000830  70                 	db	112	;'p'
   119  000831  75                 	db	117	;'u'
   120  000832  74                 	db	116	;'t'
   121  000833  20                 	db	32
   122  000834  69                 	db	105	;'i'
   123  000835  74                 	db	116	;'t'
   124  000836  20                 	db	32
   125  000837  6F                 	db	111	;'o'
   126  000838  6E                 	db	110	;'n'
   127  000839  00                 	db	0
   128  00083A                     STR_8:
   129  00083A  50                 	db	80	;'P'
   130  00083B  61                 	db	97	;'a'
   131  00083C  6E                 	db	110	;'n'
   132  00083D  64                 	db	100	;'d'
   133  00083E  61                 	db	97	;'a'
   134  00083F  00                 	db	0
   135  000840                     STR_10:
   136  000840  49                 	db	73	;'I'
   137  000841  6E                 	db	110	;'n'
   138  000842  69                 	db	105	;'i'
   139  000843  74                 	db	116	;'t'
   140  000844  00                 	db	0
   141  000845                     STR_13:
   142  000845  4C                 	db	76	;'L'
   143  000846  65                 	db	101	;'e'
   144  000847  64                 	db	100	;'d'
   145  000848  00                 	db	0
   146  000849                     STR_11:
   147  000849  6C                 	db	108	;'l'
   148  00084A  65                 	db	101	;'e'
   149  00084B  64                 	db	100	;'d'
   150  00084C  00                 	db	0
   151  00084D                     STR_15:
   152  00084D  6F                 	db	111	;'o'
   153  00084E  66                 	db	102	;'f'
   154  00084F  66                 	db	102	;'f'
   155  000850  00                 	db	0
   156  000851                     STR_4:
   157  000851  5B                 	db	91	;'['
   158  000852  41                 	db	65	;'A'
   159  000853  5D                 	db	93	;']'
   160  000854  00                 	db	0
   161  000855                     STR_3:
   162  000855  5B                 	db	91	;'['
   163  000856  4D                 	db	77	;'M'
   164  000857  5D                 	db	93	;']'
   165  000858  00                 	db	0
   166  000859                     STR_5:
   167  000859  25                 	db	37
   168  00085A  78                 	db	120	;'x'
   169  00085B  00                 	db	0
   170  00085C                     STR_9:
   171  00085C  49                 	db	73	;'I'
   172  00085D  00                 	db	0
   173  00085E                     STR_2:
   174  00085E  24                 	db	36
   175  00085F  00                 	db	0
   176  000860                     STR_1:
   177  000860  26                 	db	38
   178  000861  00                 	db	0
   179  000862                     STR_6:
   180  000862  3A                 	db	58	;':'
   181  000863  00                 	db	0
   182  0000                     
   183                           ; #config settings
   184  000864  00                 	db	0	; dummy byte at the end
   185  0000                     
   186                           	psect	nvBANK0
   187  00007A                     __pnvBANK0:
   188                           	opt stack 0
   189  00007A                     _deviceName:
   190                           	opt stack 0
   191  00007A                     	ds	3
   192  0000                     _ADCON1	set	4033
   193  0000                     _BAUDCONbits	set	4024
   194  0000                     _INTCONbits	set	4082
   195  0000                     _IPR1bits	set	3999
   196  0000                     _PIE1bits	set	3997
   197  0000                     _PIR1bits	set	3998
   198  0000                     _PORTA	set	3968
   199  0000                     _PORTAbits	set	3968
   200  0000                     _PORTB	set	3969
   201  0000                     _PORTC	set	3970
   202  0000                     _RCONbits	set	4048
   203  0000                     _RCREG	set	4014
   204  0000                     _RCSTAbits	set	4011
   205  0000                     _SPBRG	set	4015
   206  0000                     _TRISA	set	3986
   207  0000                     _TRISB	set	3987
   208  0000                     _TRISC	set	3988
   209  0000                     _TRISCbits	set	3988
   210  0000                     _TXREG	set	4013
   211  0000                     _TXSTAbits	set	4012
   212                           
   213                           	psect	cinit
   214  00112E                     __pcinit:
   215                           	opt stack 0
   216  00112E                     start_initialization:
   217                           	opt stack 0
   218  00112E                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Clear objects allocated to BANK1 (166 bytes)
   222  00112E  EE01  F000         	lfsr	0,__pbssBANK1
   223  001132  0EA6               	movlw	166
   224  001134                     clear_0:
   225  001134  6AEE               	clrf	postinc0,c
   226  001136  06E8               	decf	wreg,f,c
   227  001138  E1FD               	bnz	clear_0
   228                           
   229                           ; Clear objects allocated to COMRAM (14 bytes)
   230  00113A  EE00  F02A         	lfsr	0,__pbssCOMRAM
   231  00113E  0E0E               	movlw	14
   232  001140                     clear_1:
   233  001140  6AEE               	clrf	postinc0,c
   234  001142  06E8               	decf	wreg,f,c
   235  001144  E1FD               	bnz	clear_1
   236                           
   237                           ; Initialize objects allocated to BANK0 (2 bytes)
   238                           ; load TBLPTR registers with __pidataBANK0
   239  001146  0EE6               	movlw	low __pidataBANK0
   240  001148  6EF6               	movwf	tblptrl,c
   241  00114A  0E12               	movlw	high __pidataBANK0
   242  00114C  6EF7               	movwf	tblptrh,c
   243  00114E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   244  001150  6EF8               	movwf	tblptru,c
   245  001152  0009               	tblrd		*+	;fetch initializer
   246  001154  CFF5 F07D          	movff	tablat,__pdataBANK0
   247  001158  0009               	tblrd		*+	;fetch initializer
   248  00115A  CFF5 F07E          	movff	tablat,__pdataBANK0+1
   249                           
   250                           ; Initialize objects allocated to COMRAM (6 bytes)
   251                           ; load TBLPTR registers with __pidataCOMRAM
   252  00115E  0EE0               	movlw	low __pidataCOMRAM
   253  001160  6EF6               	movwf	tblptrl,c
   254  001162  0E12               	movlw	high __pidataCOMRAM
   255  001164  6EF7               	movwf	tblptrh,c
   256  001166  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   257  001168  6EF8               	movwf	tblptru,c
   258  00116A  EE00  F038         	lfsr	0,__pdataCOMRAM
   259  00116E  EE10 F006          	lfsr	1,6
   260  001172                     copy_data0:
   261  001172  0009               	tblrd		*+
   262  001174  CFF5 FFEE          	movff	tablat,postinc0
   263  001178  50E5               	movf	postdec1,w,c
   264  00117A  50E1               	movf	fsr1l,w,c
   265  00117C  E1FA               	bnz	copy_data0
   266  00117E                     end_of_initialization:
   267                           	opt stack 0
   268  00117E                     __end_of__initialization:
   269                           	opt stack 0
   270  00117E  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   271  001180  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   272  001182  0E00               	movlw	low (__Lmediumconst shr (0+16))
   273  001184  6EF8               	movwf	tblptru,c
   274  001186  0100               	movlb	0
   275  001188  EFE8  F006         	goto	_main	;jump to C main() function
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           postdec1	equ	0xFE5
   283                           fsr1l	equ	0xFE1
   284                           
   285                           	psect	bssCOMRAM
   286  00002A                     __pbssCOMRAM:
   287                           	opt stack 0
   288  00002A                     _read:
   289                           	opt stack 0
   290  00002A                     	ds	6
   291  000030                     _readData:
   292                           	opt stack 0
   293  000030                     	ds	6
   294  000036                     _baud:
   295                           	opt stack 0
   296  000036                     	ds	1
   297  000037                     _readReady:
   298                           	opt stack 0
   299  000037                     	ds	1
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	dataCOMRAM
   310  000038                     __pdataCOMRAM:
   311                           	opt stack 0
   312  000038                     _ackCharacter:
   313                           	opt stack 0
   314  000038                     	ds	2
   315  00003A                     _startCharacter:
   316                           	opt stack 0
   317  00003A                     	ds	2
   318  00003C                     _stopCharacter:
   319                           	opt stack 0
   320  00003C                     	ds	2
   321                           tblptru	equ	0xFF8
   322                           tblptrh	equ	0xFF7
   323                           tblptrl	equ	0xFF6
   324                           tablat	equ	0xFF5
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	dataBANK0
   331  00007D                     __pdataBANK0:
   332                           	opt stack 0
   333  00007D                     _messageCharacter:
   334                           	opt stack 0
   335  00007D                     	ds	2
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           postdec1	equ	0xFE5
   343                           fsr1l	equ	0xFE1
   344                           
   345                           	psect	bssBANK1
   346  000100                     __pbssBANK1:
   347                           	opt stack 0
   348  000100                     _readBuffer:
   349                           	opt stack 0
   350  000100                     	ds	166
   351                           tblptru	equ	0xFF8
   352                           tblptrh	equ	0xFF7
   353                           tblptrl	equ	0xFF6
   354                           tablat	equ	0xFF5
   355                           postinc0	equ	0xFEE
   356                           wreg	equ	0xFE8
   357                           postdec1	equ	0xFE5
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	cstackBANK0
   361  000060                     __pcstackBANK0:
   362                           	opt stack 0
   363  000060                     ?_strcmp:
   364                           	opt stack 0
   365  000060                     ?___lwdiv:
   366                           	opt stack 0
   367  000060                     ?___aldiv:
   368                           	opt stack 0
   369  000060                     ?_D_UART_Read:
   370                           	opt stack 0
   371  000060                     writeByte@data:
   372                           	opt stack 0
   373  000060                     D_UART_Enable@enable:
   374                           	opt stack 0
   375  000060                     ___lwdiv@dividend:
   376                           	opt stack 0
   377  000060                     strcmp@s1:
   378                           	opt stack 0
   379  000060                     ___aldiv@dividend:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x0
   383  000060                     	ds	1
   384  000061                     putch@data:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x1
   388  000061                     	ds	1
   389  000062                     ___lwdiv@divisor:
   390                           	opt stack 0
   391  000062                     strcmp@s2:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x2
   395  000062                     	ds	2
   396  000064                     ??_strcmp:
   397  000064                     ___lwdiv@counter:
   398                           	opt stack 0
   399  000064                     ___aldiv@divisor:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x4
   403  000064                     	ds	1
   404  000065                     strcmp@r:
   405                           	opt stack 0
   406  000065                     ___lwdiv@quotient:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x5
   410  000065                     	ds	1
   411  000066                     
   412                           ; 1 bytes @ 0x6
   413  000066                     	ds	1
   414  000067                     ?_printf:
   415                           	opt stack 0
   416  000067                     printf@f:
   417                           	opt stack 0
   418                           
   419                           ; 3 bytes @ 0x7
   420  000067                     	ds	1
   421  000068                     ___aldiv@counter:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x8
   425  000068                     	ds	1
   426  000069                     ___aldiv@sign:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x9
   430  000069                     	ds	1
   431  00006A                     ??_printf:
   432  00006A                     ___aldiv@quotient:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0xA
   436  00006A                     	ds	3
   437  00006D                     printf@flag:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0xD
   441  00006D                     	ds	1
   442  00006E                     printf@idx:
   443                           	opt stack 0
   444  00006E                     D_UART_Init@name:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0xE
   448  00006E                     	ds	1
   449  00006F                     printf@ap:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0xF
   453  00006F                     	ds	1
   454  000070                     D_UART_Init@baud:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x10
   458  000070                     	ds	1
   459  000071                     printf@val:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x11
   463  000071                     	ds	1
   464  000072                     D_UART_Init@interrupts:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x12
   468  000072                     	ds	1
   469  000073                     printf@prec:
   470                           	opt stack 0
   471  000073                     _D_UART_Init$1308:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x13
   475  000073                     	ds	1
   476  000074                     printf@c:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x14
   480  000074                     	ds	1
   481  000075                     D_UART_Write@command:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x15
   485  000075                     	ds	2
   486  000077                     D_UART_Write@data:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x17
   490  000077                     	ds	2
   491  000079                     ??_D_UART_Write:
   492                           
   493                           ; 1 bytes @ 0x19
   494  000079                     	ds	1
   495  00007A                     tblptru	equ	0xFF8
   496                           tblptrh	equ	0xFF7
   497                           tblptrl	equ	0xFF6
   498                           tablat	equ	0xFF5
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           postdec1	equ	0xFE5
   502                           fsr1l	equ	0xFE1
   503                           
   504                           ; 1 bytes @ 0x1A
   505                           
   506                           	psect	cstackCOMRAM
   507  000001                     __pcstackCOMRAM:
   508                           	opt stack 0
   509  000001                     ?i1___lwdiv:
   510                           	opt stack 0
   511  000001                     i1writeByte@data:
   512                           	opt stack 0
   513  000001                     i1___lwdiv@dividend:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x0
   517  000001                     	ds	1
   518  000002                     i1putch@data:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1
   522  000002                     	ds	1
   523  000003                     i1___lwdiv@divisor:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x2
   527  000003                     	ds	2
   528  000005                     i1___lwdiv@quotient:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x4
   532  000005                     	ds	2
   533  000007                     i1___lwdiv@counter:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x6
   537  000007                     	ds	1
   538  000008                     ?i1_printf:
   539                           	opt stack 0
   540  000008                     i1printf@f:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x7
   544  000008                     	ds	5
   545  00000D                     ??i1_printf:
   546                           
   547                           ; 1 bytes @ 0xC
   548  00000D                     	ds	3
   549  000010                     i1printf@flag:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0xF
   553  000010                     	ds	1
   554  000011                     i1printf@ap:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x10
   558  000011                     	ds	2
   559  000013                     i1printf@idx:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x12
   563  000013                     	ds	1
   564  000014                     i1printf@val:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x13
   568  000014                     	ds	2
   569  000016                     i1printf@prec:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x15
   573  000016                     	ds	1
   574  000017                     i1printf@c:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x16
   578  000017                     	ds	1
   579  000018                     fillDataBuffer@data:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x17
   583  000018                     	ds	1
   584  000019                     ??_LowISR:
   585                           
   586                           ; 1 bytes @ 0x18
   587  000019                     	ds	17
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597 ;;
   598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   599 ;;
   600 ;; *************** function _main *****************
   601 ;; Defined at:
   602 ;;		line 20 in file "main.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;		None
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   616 ;;      Params:         0       0       0       0       0       0       0       0       0
   617 ;;      Locals:         0       0       0       0       0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0
   619 ;;      Totals:         0       0       0       0       0       0       0       0       0
   620 ;;Total ram usage:        0 bytes
   621 ;; Hardware stack levels required when called:   10
   622 ;; This function calls:
   623 ;;		_D_PORT_Init
   624 ;;		_D_UART_Enable
   625 ;;		_D_UART_Init
   626 ;;		_D_UART_Read
   627 ;;		_D_UART_Write
   628 ;;		_strcmp
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  000DD0                     __ptext0:
   636                           	opt stack 0
   637  000DD0                     _main:
   638                           	opt stack 21
   639                           
   640                           ;main.c: 22: D_PORT_Init();
   641                           
   642                           ;incstack = 0
   643  000DD0  EC44  F009         	call	_D_PORT_Init	;wreg free
   644                           
   645                           ;main.c: 25: D_UART_Init("Panda", 9600, 1);
   646  000DD4  0E3A               	movlw	low STR_8
   647  000DD6  0100               	movlb	0	; () banked
   648  000DD8  6F6E               	movwf	D_UART_Init@name& (0+255),b
   649  000DDA  0E08               	movlw	high STR_8
   650  000DDC  0100               	movlb	0	; () banked
   651  000DDE  6F6F               	movwf	(D_UART_Init@name+1)& (0+255),b
   652  000DE0  0E25               	movlw	37
   653  000DE2  0100               	movlb	0	; () banked
   654  000DE4  6F71               	movwf	(D_UART_Init@baud+1)& (0+255),b
   655  000DE6  0E80               	movlw	128
   656  000DE8  6F70               	movwf	D_UART_Init@baud& (0+255),b
   657  000DEA  0E01               	movlw	1
   658  000DEC  0100               	movlb	0	; () banked
   659  000DEE  6F72               	movwf	D_UART_Init@interrupts& (0+255),b
   660  000DF0  ECD7  F007         	call	_D_UART_Init	;wreg free
   661                           
   662                           ;main.c: 26: D_UART_Enable(1);
   663  000DF4  0E01               	movlw	1
   664  000DF6  EC31  F009         	call	_D_UART_Enable
   665                           
   666                           ;main.c: 28: D_UART_Write("I", "Init");
   667  000DFA  0E5C               	movlw	low STR_9
   668  000DFC  0100               	movlb	0	; () banked
   669  000DFE  6F75               	movwf	D_UART_Write@command& (0+255),b
   670  000E00  0E08               	movlw	high STR_9
   671  000E02  0100               	movlb	0	; () banked
   672  000E04  6F76               	movwf	(D_UART_Write@command+1)& (0+255),b
   673  000E06  0E40               	movlw	low STR_10
   674  000E08  0100               	movlb	0	; () banked
   675  000E0A  6F77               	movwf	D_UART_Write@data& (0+255),b
   676  000E0C  0E08               	movlw	high STR_10
   677  000E0E  0100               	movlb	0	; () banked
   678  000E10  6F78               	movwf	(D_UART_Write@data+1)& (0+255),b
   679  000E12  EC6E  F007         	call	_D_UART_Write	;wreg free
   680  000E16                     l1700:
   681                           
   682                           ;main.c: 30: if(readReady) {
   683  000E16  5037               	movf	_readReady,w,c
   684  000E18  B4D8               	btfsc	status,2,c
   685  000E1A  D7FD               	goto	l1700
   686                           
   687                           ;main.c: 31: readReady = 0;
   688  000E1C  0E00               	movlw	0
   689  000E1E  6E37               	movwf	_readReady,c
   690                           
   691                           ;main.c: 32: read = D_UART_Read();
   692  000E20  EC1B  F009         	call	_D_UART_Read	;wreg free
   693  000E24  EE20  F02A         	lfsr	2,_read
   694  000E28  0E05               	movlw	5
   695  000E2A                     u1171:
   696  000E2A  CFEB FFDB          	movff	plusw0,plusw2
   697  000E2E  06E8               	decf	wreg,f,c
   698  000E30  E2FC               	bc	u1171
   699                           
   700                           ;main.c: 33: if (strcmp(read.command, "led") == 0) {
   701  000E32  C02C  F060         	movff	_read+2,strcmp@s1
   702  000E36  C02D  F061         	movff	_read+3,strcmp@s1+1
   703  000E3A  0E49               	movlw	low STR_11
   704  000E3C  0100               	movlb	0	; () banked
   705  000E3E  6F62               	movwf	strcmp@s2& (0+255),b
   706  000E40  0E08               	movlw	high STR_11
   707  000E42  0100               	movlb	0	; () banked
   708  000E44  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   709  000E46  ECC6  F008         	call	_strcmp	;wreg free
   710  000E4A  0100               	movlb	0	; () banked
   711  000E4C  5160               	movf	?_strcmp& (0+255),w,b
   712  000E4E  0100               	movlb	0	; () banked
   713  000E50  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   714  000E52  A4D8               	btfss	status,2,c
   715  000E54  D7E0               	goto	l1700
   716                           
   717                           ; BSR set to: 0
   718                           ;main.c: 34: if (strcmp(read.message, "on") == 0) {
   719  000E56  C02E  F060         	movff	_read+4,strcmp@s1
   720  000E5A  C02F  F061         	movff	_read+5,strcmp@s1+1
   721  000E5E  0E37               	movlw	low (STR_14+9)
   722  000E60  0100               	movlb	0	; () banked
   723  000E62  6F62               	movwf	strcmp@s2& (0+255),b
   724  000E64  0E08               	movlw	high (STR_14+9)
   725  000E66  0100               	movlb	0	; () banked
   726  000E68  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   727  000E6A  ECC6  F008         	call	_strcmp	;wreg free
   728  000E6E  0100               	movlb	0	; () banked
   729  000E70  5160               	movf	?_strcmp& (0+255),w,b
   730  000E72  0100               	movlb	0	; () banked
   731  000E74  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   732  000E76  A4D8               	btfss	status,2,c
   733  000E78  D00F               	goto	l1714
   734                           
   735                           ; BSR set to: 0
   736                           ;main.c: 35: PORTAbits.RA0 = 1;
   737  000E7A  8080               	bsf	3968,0,c	;volatile
   738                           
   739                           ; BSR set to: 0
   740                           ;main.c: 36: D_UART_Write("Led", "I put it on");
   741  000E7C  0E45               	movlw	low STR_13
   742  000E7E  0100               	movlb	0	; () banked
   743  000E80  6F75               	movwf	D_UART_Write@command& (0+255),b
   744  000E82  0E08               	movlw	high STR_13
   745  000E84  0100               	movlb	0	; () banked
   746  000E86  6F76               	movwf	(D_UART_Write@command+1)& (0+255),b
   747  000E88  0E2E               	movlw	low STR_14
   748  000E8A  0100               	movlb	0	; () banked
   749  000E8C  6F77               	movwf	D_UART_Write@data& (0+255),b
   750  000E8E  0E08               	movlw	high STR_14
   751  000E90  0100               	movlb	0	; () banked
   752  000E92  6F78               	movwf	(D_UART_Write@data+1)& (0+255),b
   753  000E94  EC6E  F007         	call	_D_UART_Write	;wreg free
   754  000E98                     l1714:
   755                           
   756                           ;main.c: 37: }
   757                           ;main.c: 38: if (strcmp(read.message, "off") == 0) {
   758  000E98  C02E  F060         	movff	_read+4,strcmp@s1
   759  000E9C  C02F  F061         	movff	_read+5,strcmp@s1+1
   760  000EA0  0E4D               	movlw	low STR_15
   761  000EA2  0100               	movlb	0	; () banked
   762  000EA4  6F62               	movwf	strcmp@s2& (0+255),b
   763  000EA6  0E08               	movlw	high STR_15
   764  000EA8  0100               	movlb	0	; () banked
   765  000EAA  6F63               	movwf	(strcmp@s2+1)& (0+255),b
   766  000EAC  ECC6  F008         	call	_strcmp	;wreg free
   767  000EB0  0100               	movlb	0	; () banked
   768  000EB2  5160               	movf	?_strcmp& (0+255),w,b
   769  000EB4  0100               	movlb	0	; () banked
   770  000EB6  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
   771  000EB8  A4D8               	btfss	status,2,c
   772  000EBA  D7AD               	goto	l1700
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 39: PORTAbits.RA0 = 0;
   776  000EBC  9080               	bcf	3968,0,c	;volatile
   777                           
   778                           ; BSR set to: 0
   779                           ;main.c: 40: D_UART_Write("Led", "Putting led off sir");
   780  000EBE  0E45               	movlw	low STR_13
   781  000EC0  0100               	movlb	0	; () banked
   782  000EC2  6F75               	movwf	D_UART_Write@command& (0+255),b
   783  000EC4  0E08               	movlw	high STR_13
   784  000EC6  0100               	movlb	0	; () banked
   785  000EC8  6F76               	movwf	(D_UART_Write@command+1)& (0+255),b
   786  000ECA  0E09               	movlw	low STR_17
   787  000ECC  0100               	movlb	0	; () banked
   788  000ECE  6F77               	movwf	D_UART_Write@data& (0+255),b
   789  000ED0  0E08               	movlw	high STR_17
   790  000ED2  0100               	movlb	0	; () banked
   791  000ED4  6F78               	movwf	(D_UART_Write@data+1)& (0+255),b
   792  000ED6  EC6E  F007         	call	_D_UART_Write	;wreg free
   793  000EDA  D79D               	goto	l1700
   794  000EDC                     __end_of_main:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           plusw0	equ	0xFEB
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           plusw2	equ	0xFDB
   806                           status	equ	0xFD8
   807                           
   808 ;; *************** function _strcmp *****************
   809 ;; Defined at:
   810 ;;		line 33 in file "/opt/microchip/xc8/v1.37/sources/common/strcmp.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   813 ;;		 -> readBuffer(166), 
   814 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   815 ;;		 -> STR_15(4), STR_12(3), STR_11(4), 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  r               1    5[BANK0 ] char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  2    0[BANK0 ] int 
   820 ;; Registers used:
   821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   827 ;;      Params:         0       4       0       0       0       0       0       0       0
   828 ;;      Locals:         0       1       0       0       0       0       0       0       0
   829 ;;      Temps:          0       1       0       0       0       0       0       0       0
   830 ;;      Totals:         0       6       0       0       0       0       0       0       0
   831 ;;Total ram usage:        6 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    6
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text1
   842  00118C                     __ptext1:
   843                           	opt stack 0
   844  00118C                     _strcmp:
   845                           	opt stack 24
   846                           
   847                           ;incstack = 0
   848  00118C  D006               	goto	l1684
   849  00118E                     l1682:
   850  00118E  0100               	movlb	0	; () banked
   851  001190  4B60               	infsnz	strcmp@s1& (0+255),f,b
   852  001192  2B61               	incf	(strcmp@s1+1)& (0+255),f,b
   853  001194  0100               	movlb	0	; () banked
   854  001196  4B62               	infsnz	strcmp@s2& (0+255),f,b
   855  001198  2B63               	incf	(strcmp@s2+1)& (0+255),f,b
   856  00119A                     l1684:
   857  00119A  C060  FFD9         	movff	strcmp@s1,fsr2l
   858  00119E  C061  FFDA         	movff	strcmp@s1+1,fsr2h
   859  0011A2  50DF               	movf	indf2,w,c
   860  0011A4  0100               	movlb	0	; () banked
   861  0011A6  6F64               	movwf	??_strcmp& (0+255),b
   862  0011A8  C062  FFF6         	movff	strcmp@s2,tblptrl
   863  0011AC  C063  FFF7         	movff	strcmp@s2+1,tblptrh
   864  0011B0                     	if	0	;tblptru may be non-zero
   865  0011B0                     	endif
   866  0011B0                     	if	0	;tblptru may be non-zero
   867  0011B0                     	endif
   868  0011B0  0008               	tblrd		*
   869  0011B2  50F5               	movf	tablat,w,c
   870  0011B4  0800               	sublw	0
   871  0011B6  0100               	movlb	0	; () banked
   872  0011B8  2564               	addwf	??_strcmp& (0+255),w,b
   873  0011BA  0100               	movlb	0	; () banked
   874  0011BC  6F65               	movwf	strcmp@r& (0+255),b
   875  0011BE  0100               	movlb	0	; () banked
   876  0011C0  5165               	movf	strcmp@r& (0+255),w,b
   877  0011C2  A4D8               	btfss	status,2,c
   878  0011C4  D007               	goto	l1688
   879                           
   880                           ; BSR set to: 0
   881  0011C6  C060  FFD9         	movff	strcmp@s1,fsr2l
   882  0011CA  C061  FFDA         	movff	strcmp@s1+1,fsr2h
   883  0011CE  50DF               	movf	indf2,w,c
   884  0011D0  A4D8               	btfss	status,2,c
   885  0011D2  D7DD               	goto	l1682
   886  0011D4                     l1688:
   887                           
   888                           ; BSR set to: 0
   889  0011D4  0100               	movlb	0	; () banked
   890  0011D6  5165               	movf	strcmp@r& (0+255),w,b
   891  0011D8  0100               	movlb	0	; () banked
   892  0011DA  6F60               	movwf	?_strcmp& (0+255),b
   893  0011DC  6B61               	clrf	(?_strcmp+1)& (0+255),b
   894  0011DE  BF60               	btfsc	?_strcmp& (0+255),7,b
   895  0011E0  0761               	decf	(?_strcmp+1)& (0+255),f,b
   896  0011E2  0012               	return	
   897  0011E4                     __end_of_strcmp:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           plusw0	equ	0xFEB
   905                           wreg	equ	0xFE8
   906                           postdec1	equ	0xFE5
   907                           fsr1l	equ	0xFE1
   908                           indf2	equ	0xFDF
   909                           plusw2	equ	0xFDB
   910                           fsr2h	equ	0xFDA
   911                           fsr2l	equ	0xFD9
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _D_UART_Write *****************
   915 ;; Defined at:
   916 ;;		line 223 in file "Drivers/UART_Driver.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  command         2   21[BANK0 ] PTR const unsigned char 
   919 ;;		 -> STR_16(4), STR_13(4), STR_9(2), 
   920 ;;  data            2   23[BANK0 ] PTR const unsigned char 
   921 ;;		 -> STR_17(20), STR_14(12), STR_10(5), 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   933 ;;      Params:         0       4       0       0       0       0       0       0       0
   934 ;;      Locals:         0       0       0       0       0       0       0       0       0
   935 ;;      Temps:          0       1       0       0       0       0       0       0       0
   936 ;;      Totals:         0       5       0       0       0       0       0       0       0
   937 ;;Total ram usage:        5 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    9
   940 ;; This function calls:
   941 ;;		_printf
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text2
   948  000EDC                     __ptext2:
   949                           	opt stack 0
   950  000EDC                     _D_UART_Write:
   951                           	opt stack 21
   952                           
   953                           ;UART_Driver.c: 224: printf(startCharacter);
   954                           
   955                           ; BSR set to: 0
   956                           ;incstack = 0
   957  000EDC  C03A  F067         	movff	_startCharacter,printf@f
   958  000EE0  C03B  F068         	movff	_startCharacter+1,printf@f+1
   959  000EE4  0100               	movlb	0	; () banked
   960  000EE6  5167               	movf	printf@f& (0+255),w,b
   961  000EE8  1168               	iorwf	(printf@f+1)& (0+255),w,b
   962  000EEA  A4D8               	btfss	status,2,c
   963  000EEC  0E00               	movlw	low (__mediumconst shr (0+16))
   964  000EEE  6F69               	movwf	(printf@f+2)& (0+255),b
   965  000EF0  EC19  F005         	call	_printf	;wreg free
   966                           
   967                           ;UART_Driver.c: 226: printf(messageCharacter);
   968  000EF4  C07D  F067         	movff	_messageCharacter,printf@f
   969  000EF8  C07E  F068         	movff	_messageCharacter+1,printf@f+1
   970  000EFC  0100               	movlb	0	; () banked
   971  000EFE  5167               	movf	printf@f& (0+255),w,b
   972  000F00  1168               	iorwf	(printf@f+1)& (0+255),w,b
   973  000F02  A4D8               	btfss	status,2,c
   974  000F04  0E00               	movlw	low (__mediumconst shr (0+16))
   975  000F06  6F69               	movwf	(printf@f+2)& (0+255),b
   976  000F08  EC19  F005         	call	_printf	;wreg free
   977                           
   978                           ;UART_Driver.c: 227: printf(deviceName);
   979  000F0C  C07A  F067         	movff	_deviceName,printf@f
   980  000F10  C07B  F068         	movff	_deviceName+1,printf@f+1
   981  000F14  C07C  F069         	movff	_deviceName+2,printf@f+2
   982  000F18  EC19  F005         	call	_printf	;wreg free
   983                           
   984                           ;UART_Driver.c: 229: printf(":");printf(command);
   985  000F1C  0E62               	movlw	low STR_6
   986  000F1E  0100               	movlb	0	; () banked
   987  000F20  6F67               	movwf	printf@f& (0+255),b
   988  000F22  0E08               	movlw	high STR_6
   989  000F24  0100               	movlb	0	; () banked
   990  000F26  6F68               	movwf	(printf@f+1)& (0+255),b
   991  000F28  0100               	movlb	0	; () banked
   992  000F2A  5167               	movf	printf@f& (0+255),w,b
   993  000F2C  1168               	iorwf	(printf@f+1)& (0+255),w,b
   994  000F2E  A4D8               	btfss	status,2,c
   995  000F30  0E00               	movlw	low (__mediumconst shr (0+16))
   996  000F32  6F69               	movwf	(printf@f+2)& (0+255),b
   997  000F34  EC19  F005         	call	_printf	;wreg free
   998  000F38  C075  F067         	movff	D_UART_Write@command,printf@f
   999  000F3C  C076  F068         	movff	D_UART_Write@command+1,printf@f+1
  1000  000F40  0100               	movlb	0	; () banked
  1001  000F42  5167               	movf	printf@f& (0+255),w,b
  1002  000F44  1168               	iorwf	(printf@f+1)& (0+255),w,b
  1003  000F46  A4D8               	btfss	status,2,c
  1004  000F48  0E00               	movlw	low (__mediumconst shr (0+16))
  1005  000F4A  6F69               	movwf	(printf@f+2)& (0+255),b
  1006  000F4C  EC19  F005         	call	_printf	;wreg free
  1007                           
  1008                           ;UART_Driver.c: 231: printf(":");printf(data);
  1009  000F50  0E62               	movlw	low STR_6
  1010  000F52  0100               	movlb	0	; () banked
  1011  000F54  6F67               	movwf	printf@f& (0+255),b
  1012  000F56  0E08               	movlw	high STR_6
  1013  000F58  0100               	movlb	0	; () banked
  1014  000F5A  6F68               	movwf	(printf@f+1)& (0+255),b
  1015  000F5C  0100               	movlb	0	; () banked
  1016  000F5E  5167               	movf	printf@f& (0+255),w,b
  1017  000F60  1168               	iorwf	(printf@f+1)& (0+255),w,b
  1018  000F62  A4D8               	btfss	status,2,c
  1019  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  1020  000F66  6F69               	movwf	(printf@f+2)& (0+255),b
  1021  000F68  EC19  F005         	call	_printf	;wreg free
  1022  000F6C  C077  F067         	movff	D_UART_Write@data,printf@f
  1023  000F70  C078  F068         	movff	D_UART_Write@data+1,printf@f+1
  1024  000F74  0100               	movlb	0	; () banked
  1025  000F76  5167               	movf	printf@f& (0+255),w,b
  1026  000F78  1168               	iorwf	(printf@f+1)& (0+255),w,b
  1027  000F7A  A4D8               	btfss	status,2,c
  1028  000F7C  0E00               	movlw	low (__mediumconst shr (0+16))
  1029  000F7E  6F69               	movwf	(printf@f+2)& (0+255),b
  1030  000F80  EC19  F005         	call	_printf	;wreg free
  1031                           
  1032                           ;UART_Driver.c: 233: printf(stopCharacter);
  1033  000F84  C03C  F067         	movff	_stopCharacter,printf@f
  1034  000F88  C03D  F068         	movff	_stopCharacter+1,printf@f+1
  1035  000F8C  0100               	movlb	0	; () banked
  1036  000F8E  5167               	movf	printf@f& (0+255),w,b
  1037  000F90  1168               	iorwf	(printf@f+1)& (0+255),w,b
  1038  000F92  A4D8               	btfss	status,2,c
  1039  000F94  0E00               	movlw	low (__mediumconst shr (0+16))
  1040  000F96  6F69               	movwf	(printf@f+2)& (0+255),b
  1041  000F98  EC19  F005         	call	_printf	;wreg free
  1042                           
  1043                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(10000000/4000.0)));
  1044  000F9C  0E04               	movlw	4
  1045  000F9E  0100               	movlb	0	; () banked
  1046  000FA0  6F79               	movwf	??_D_UART_Write& (0+255),b
  1047  000FA2  0E3E               	movlw	62
  1048  000FA4                     u1217:
  1049  000FA4  2EE8               	decfsz	wreg,f,c
  1050  000FA6  D7FE               	goto	u1217
  1051  000FA8  2F79               	decfsz	??_D_UART_Write& (0+255),f,b
  1052  000FAA  D7FC               	goto	u1217
  1053  000FAC  0012               	return		;funcret
  1054  000FAE                     __end_of_D_UART_Write:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           plusw0	equ	0xFEB
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           indf2	equ	0xFDF
  1066                           plusw2	equ	0xFDB
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071 ;; *************** function _printf *****************
  1072 ;; Defined at:
  1073 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  1076 ;;		 -> STR_17(20), STR_16(4), STR_14(12), STR_13(4), 
  1077 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
  1078 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  1079 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  idx             1   14[BANK0 ] unsigned char 
  1082 ;;  tmpval          4    0        struct .
  1083 ;;  cp              3    0        PTR const unsigned char 
  1084 ;;  val             2   17[BANK0 ] unsigned int 
  1085 ;;  ap              2   15[BANK0 ] PTR void [1]
  1086 ;;		 -> ?i1_printf(2), ?_printf(2), 
  1087 ;;  len             2    0        unsigned int 
  1088 ;;  c               1   20[BANK0 ] char 
  1089 ;;  prec            1   19[BANK0 ] char 
  1090 ;;  flag            1   13[BANK0 ] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  2    7[BANK0 ] int 
  1093 ;; Registers used:
  1094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1100 ;;      Params:         0       3       0       0       0       0       0       0       0
  1101 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1102 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1103 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1104 ;;Total ram usage:       14 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    8
  1107 ;; This function calls:
  1108 ;;		___lwdiv
  1109 ;;		_putch
  1110 ;; This function is called by:
  1111 ;;		_D_UART_Write
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text3
  1116  000A32                     __ptext3:
  1117                           	opt stack 0
  1118  000A32                     _printf:
  1119                           	opt stack 21
  1120                           
  1121                           ;doprnt.c: 466: va_list ap;
  1122                           ;doprnt.c: 499: signed char c;
  1123                           ;doprnt.c: 506: signed char prec;
  1124                           ;doprnt.c: 508: unsigned char flag;
  1125                           ;doprnt.c: 523: union {
  1126                           ;doprnt.c: 524: unsigned long vd;
  1127                           ;doprnt.c: 525: double integ;
  1128                           ;doprnt.c: 526: } tmpval;
  1129                           ;doprnt.c: 528: unsigned int val;
  1130                           ;doprnt.c: 529: unsigned len;
  1131                           ;doprnt.c: 530: const char * cp;
  1132                           ;doprnt.c: 533: *ap = __va_start();
  1133                           
  1134                           ;incstack = 0
  1135  000A32  0E6A               	movlw	low (?_printf+3)
  1136  000A34  0100               	movlb	0	; () banked
  1137  000A36  6F6F               	movwf	printf@ap& (0+255),b
  1138  000A38  0E00               	movlw	high (?_printf+3)
  1139  000A3A  0100               	movlb	0	; () banked
  1140  000A3C  6F70               	movwf	(printf@ap+1)& (0+255),b
  1141                           
  1142                           ;doprnt.c: 536: while(c = *f++) {
  1143  000A3E  D08D               	goto	l1592
  1144  000A40                     l1554:
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;doprnt.c: 538: if(c != '%')
  1148  000A40  0E25               	movlw	37
  1149  000A42  0100               	movlb	0	; () banked
  1150  000A44  1974               	xorwf	printf@c& (0+255),w,b
  1151  000A46  B4D8               	btfsc	status,2,c
  1152  000A48  D005               	goto	l1558
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;doprnt.c: 540: {
  1156                           ;doprnt.c: 541: (putch(c) );
  1157  000A4A  0100               	movlb	0	; () banked
  1158  000A4C  5174               	movf	printf@c& (0+255),w,b
  1159  000A4E  EC53  F009         	call	_putch
  1160                           
  1161                           ;doprnt.c: 542: continue;
  1162  000A52  D083               	goto	l1592
  1163  000A54                     l1558:
  1164                           
  1165                           ;doprnt.c: 543: }
  1166                           ;doprnt.c: 548: flag = 0;
  1167  000A54  0E00               	movlw	0
  1168  000A56  0100               	movlb	0	; () banked
  1169  000A58  6F6D               	movwf	printf@flag& (0+255),b
  1170                           
  1171                           ;doprnt.c: 635: switch(c = *f++) {
  1172  000A5A  D005               	goto	l1564
  1173  000A5C                     l1560:
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;doprnt.c: 809: (putch(c) );
  1177  000A5C  0100               	movlb	0	; () banked
  1178  000A5E  5174               	movf	printf@c& (0+255),w,b
  1179  000A60  EC53  F009         	call	_putch
  1180                           
  1181                           ;doprnt.c: 810: continue;
  1182  000A64  D07A               	goto	l1592
  1183  000A66                     l1564:
  1184  000A66  C067  F06A         	movff	printf@f,??_printf
  1185  000A6A  C068  F06B         	movff	printf@f+1,??_printf+1
  1186  000A6E  C069  F06C         	movff	printf@f+2,??_printf+2
  1187  000A72  0100               	movlb	0	; () banked
  1188  000A74  2B67               	incf	printf@f& (0+255),f,b
  1189  000A76  0E00               	movlw	0
  1190  000A78  2368               	addwfc	(printf@f+1)& (0+255),f,b
  1191  000A7A  2369               	addwfc	(printf@f+2)& (0+255),f,b
  1192  000A7C  C06A  FFF6         	movff	??_printf,tblptrl
  1193  000A80  C06B  FFF7         	movff	??_printf+1,tblptrh
  1194  000A84  C06C  FFF8         	movff	??_printf+2,tblptru
  1195  000A88  0008               	tblrd		*
  1196  000A8A  CFF5 F074          	movff	tablat,printf@c
  1197  000A8E  0100               	movlb	0	; () banked
  1198  000A90  5174               	movf	printf@c& (0+255),w,b
  1199                           
  1200                           ; Switch size 1, requested type "space"
  1201                           ; Number of cases is 2, Range of values is 0 to 120
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte            7     4 (average)
  1205                           ;	Chosen strategy is simple_byte
  1206  000A92  0A00               	xorlw	0	; case 0
  1207  000A94  B4D8               	btfsc	status,2,c
  1208  000A96  0012               	return	
  1209  000A98  0A78               	xorlw	120	; case 120
  1210  000A9A  A4D8               	btfss	status,2,c
  1211  000A9C  D7DF               	goto	l1560
  1212                           
  1213                           ;doprnt.c: 1273: {
  1214                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1215                           
  1216                           ; BSR set to: 0
  1217  000A9E  C06F  FFD9         	movff	printf@ap,fsr2l
  1218  000AA2  C070  FFDA         	movff	printf@ap+1,fsr2h
  1219  000AA6  CFDE F071          	movff	postinc2,printf@val
  1220  000AAA  CFDD F072          	movff	postdec2,printf@val+1
  1221  000AAE  0E02               	movlw	2
  1222  000AB0  0100               	movlb	0	; () banked
  1223  000AB2  276F               	addwf	printf@ap& (0+255),f,b
  1224  000AB4  0E00               	movlw	0
  1225  000AB6  2370               	addwfc	(printf@ap+1)& (0+255),f,b
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;doprnt.c: 1287: }
  1229                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1230  000AB8  0E01               	movlw	1
  1231  000ABA  0100               	movlb	0	; () banked
  1232  000ABC  6F74               	movwf	printf@c& (0+255),b
  1233  000ABE                     l1572:
  1234                           
  1235                           ; BSR set to: 0
  1236  000ABE  0E04               	movlw	4
  1237  000AC0  0100               	movlb	0	; () banked
  1238  000AC2  1974               	xorwf	printf@c& (0+255),w,b
  1239  000AC4  B4D8               	btfsc	status,2,c
  1240  000AC6  D016               	goto	l180
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1244                           
  1245                           ; BSR set to: 0
  1246                           
  1247                           ; BSR set to: 0
  1248  000AC8  0100               	movlb	0	; () banked
  1249  000ACA  5174               	movf	printf@c& (0+255),w,b
  1250  000ACC  0D02               	mullw	2
  1251  000ACE  0E01               	movlw	low _hexpowers
  1252  000AD0  24F3               	addwf	prodl,w,c
  1253  000AD2  6EF6               	movwf	tblptrl,c
  1254  000AD4  0E08               	movlw	high _hexpowers
  1255  000AD6  20F4               	addwfc	prodh,w,c
  1256  000AD8  6EF7               	movwf	tblptrh,c
  1257  000ADA                     	if	0	;There are less than 3 active tblptr bytes
  1258  000ADA                     	endif
  1259  000ADA  0009               	tblrd		*+
  1260  000ADC  50F5               	movf	tablat,w,c
  1261  000ADE  0100               	movlb	0	; () banked
  1262  000AE0  5D71               	subwf	printf@val& (0+255),w,b
  1263  000AE2  0009               	tblrd		*+
  1264  000AE4  50F5               	movf	tablat,w,c
  1265  000AE6  0100               	movlb	0	; () banked
  1266  000AE8  5972               	subwfb	(printf@val+1)& (0+255),w,b
  1267  000AEA  A0D8               	btfss	status,0,c
  1268  000AEC  D003               	goto	l180
  1269                           
  1270                           ; BSR set to: 0
  1271                           
  1272                           ; BSR set to: 0
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;doprnt.c: 1318: break;
  1276  000AEE  0100               	movlb	0	; () banked
  1277  000AF0  2B74               	incf	printf@c& (0+255),f,b
  1278  000AF2  D7E5               	goto	l1572
  1279  000AF4                     l180:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;doprnt.c: 1422: {
  1283                           ;doprnt.c: 1469: }
  1284                           ;doprnt.c: 1472: prec = c;
  1285  000AF4  C074  F073         	movff	printf@c,printf@prec
  1286                           
  1287                           ;doprnt.c: 1474: while(prec--) {
  1288  000AF8  D02A               	goto	l1590
  1289  000AFA                     l1584:
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;doprnt.c: 1478: {
  1293                           ;doprnt.c: 1499: {
  1294                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1295  000AFA  C071  F060         	movff	printf@val,___lwdiv@dividend
  1296  000AFE  C072  F061         	movff	printf@val+1,___lwdiv@dividend+1
  1297  000B02  0100               	movlb	0	; () banked
  1298  000B04  5173               	movf	printf@prec& (0+255),w,b
  1299  000B06  0D02               	mullw	2
  1300  000B08  0E01               	movlw	low _hexpowers
  1301  000B0A  24F3               	addwf	prodl,w,c
  1302  000B0C  6EF6               	movwf	tblptrl,c
  1303  000B0E  0E08               	movlw	high _hexpowers
  1304  000B10  20F4               	addwfc	prodh,w,c
  1305  000B12  6EF7               	movwf	tblptrh,c
  1306  000B14                     	if	0	;There are less than 3 active tblptr bytes
  1307  000B14                     	endif
  1308  000B14  0009               	tblrd		*+
  1309  000B16  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1310  000B1A  000A               	tblrd		*-
  1311  000B1C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1312  000B20  EC2B  F008         	call	___lwdiv	;wreg free
  1313  000B24  0100               	movlb	0	; () banked
  1314  000B26  5160               	movf	?___lwdiv& (0+255),w,b
  1315  000B28  0B0F               	andlw	15
  1316  000B2A  0100               	movlb	0	; () banked
  1317  000B2C  6F6E               	movwf	printf@idx& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1321  000B2E  0100               	movlb	0	; () banked
  1322  000B30  516E               	movf	printf@idx& (0+255),w,b
  1323  000B32  0D01               	mullw	1
  1324  000B34  0E1D               	movlw	low STR_18
  1325  000B36  24F3               	addwf	prodl,w,c
  1326  000B38  6EF6               	movwf	tblptrl,c
  1327  000B3A  0E08               	movlw	high STR_18
  1328  000B3C  20F4               	addwfc	prodh,w,c
  1329  000B3E  6EF7               	movwf	tblptrh,c
  1330  000B40                     	if	0	;There are less than 3 active tblptr bytes
  1331  000B40                     	endif
  1332  000B40  0008               	tblrd		*
  1333  000B42  CFF5 F074          	movff	tablat,printf@c
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;doprnt.c: 1508: }
  1337                           ;doprnt.c: 1523: }
  1338                           ;doprnt.c: 1524: (putch(c) );
  1339  000B46  0100               	movlb	0	; () banked
  1340  000B48  5174               	movf	printf@c& (0+255),w,b
  1341  000B4A  EC53  F009         	call	_putch
  1342  000B4E                     l1590:
  1343  000B4E  0100               	movlb	0	; () banked
  1344  000B50  0773               	decf	printf@prec& (0+255),f,b
  1345  000B52  0100               	movlb	0	; () banked
  1346  000B54  2973               	incf	printf@prec& (0+255),w,b
  1347  000B56  A4D8               	btfss	status,2,c
  1348  000B58  D7D0               	goto	l1584
  1349  000B5A                     l1592:
  1350  000B5A  C067  F06A         	movff	printf@f,??_printf
  1351  000B5E  C068  F06B         	movff	printf@f+1,??_printf+1
  1352  000B62  C069  F06C         	movff	printf@f+2,??_printf+2
  1353  000B66  0100               	movlb	0	; () banked
  1354  000B68  2B67               	incf	printf@f& (0+255),f,b
  1355  000B6A  0E00               	movlw	0
  1356  000B6C  2368               	addwfc	(printf@f+1)& (0+255),f,b
  1357  000B6E  2369               	addwfc	(printf@f+2)& (0+255),f,b
  1358  000B70  C06A  FFF6         	movff	??_printf,tblptrl
  1359  000B74  C06B  FFF7         	movff	??_printf+1,tblptrh
  1360  000B78  C06C  FFF8         	movff	??_printf+2,tblptru
  1361  000B7C  0008               	tblrd		*
  1362  000B7E  CFF5 F074          	movff	tablat,printf@c
  1363  000B82  0100               	movlb	0	; () banked
  1364  000B84  5174               	movf	printf@c& (0+255),w,b
  1365  000B86  B4D8               	btfsc	status,2,c
  1366  000B88  0012               	return	
  1367  000B8A  D75A               	goto	l1554
  1368  000B8C                     __end_of_printf:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           prodh	equ	0xFF4
  1375                           prodl	equ	0xFF3
  1376                           postinc0	equ	0xFEE
  1377                           plusw0	equ	0xFEB
  1378                           wreg	equ	0xFE8
  1379                           postdec1	equ	0xFE5
  1380                           fsr1l	equ	0xFE1
  1381                           indf2	equ	0xFDF
  1382                           postinc2	equ	0xFDE
  1383                           postdec2	equ	0xFDD
  1384                           plusw2	equ	0xFDB
  1385                           fsr2h	equ	0xFDA
  1386                           fsr2l	equ	0xFD9
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _putch *****************
  1390 ;; Defined at:
  1391 ;;		line 260 in file "Drivers/UART_Driver.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  data            1    wreg     unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  data            1    1[BANK0 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1405 ;;      Params:         0       0       0       0       0       0       0       0       0
  1406 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1408 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1409 ;;Total ram usage:        1 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    7
  1412 ;; This function calls:
  1413 ;;		_writeByte
  1414 ;; This function is called by:
  1415 ;;		_printf
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text4
  1420  0012A6                     __ptext4:
  1421                           	opt stack 0
  1422  0012A6                     _putch:
  1423                           	opt stack 21
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;incstack = 0
  1427                           ;putch@data stored from wreg
  1428  0012A6  0100               	movlb	0	; () banked
  1429  0012A8  6F61               	movwf	putch@data& (0+255),b
  1430                           
  1431                           ;UART_Driver.c: 261: writeByte(data);
  1432  0012AA  0100               	movlb	0	; () banked
  1433  0012AC  5161               	movf	putch@data& (0+255),w,b
  1434  0012AE  EC5A  F009         	call	_writeByte
  1435  0012B2  0012               	return		;funcret
  1436  0012B4                     __end_of_putch:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           prodh	equ	0xFF4
  1443                           prodl	equ	0xFF3
  1444                           postinc0	equ	0xFEE
  1445                           plusw0	equ	0xFEB
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1l	equ	0xFE1
  1449                           indf2	equ	0xFDF
  1450                           postinc2	equ	0xFDE
  1451                           postdec2	equ	0xFDD
  1452                           plusw2	equ	0xFDB
  1453                           fsr2h	equ	0xFDA
  1454                           fsr2l	equ	0xFD9
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _writeByte *****************
  1458 ;; Defined at:
  1459 ;;		line 69 in file "Drivers/UART_Driver.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  data            1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  data            1    0[BANK0 ] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1473 ;;      Params:         0       0       0       0       0       0       0       0       0
  1474 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1476 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    6
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_putch
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text5
  1488  0012B4                     __ptext5:
  1489                           	opt stack 0
  1490  0012B4                     _writeByte:
  1491                           	opt stack 21
  1492                           
  1493                           ;incstack = 0
  1494                           ;writeByte@data stored from wreg
  1495  0012B4  0100               	movlb	0	; () banked
  1496  0012B6  6F60               	movwf	writeByte@data& (0+255),b
  1497  0012B8                     l53:
  1498  0012B8  A2AC               	btfss	4012,1,c	;volatile
  1499  0012BA  D7FE               	goto	l53
  1500                           
  1501                           ;UART_Driver.c: 71: TXREG = data;
  1502  0012BC  C060  FFAD         	movff	writeByte@data,4013	;volatile
  1503  0012C0  0012               	return		;funcret
  1504  0012C2                     __end_of_writeByte:
  1505                           	opt stack 0
  1506                           tblptru	equ	0xFF8
  1507                           tblptrh	equ	0xFF7
  1508                           tblptrl	equ	0xFF6
  1509                           tablat	equ	0xFF5
  1510                           prodh	equ	0xFF4
  1511                           prodl	equ	0xFF3
  1512                           postinc0	equ	0xFEE
  1513                           plusw0	equ	0xFEB
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1l	equ	0xFE1
  1517                           indf2	equ	0xFDF
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           plusw2	equ	0xFDB
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function ___lwdiv *****************
  1526 ;; Defined at:
  1527 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  dividend        2    0[BANK0 ] unsigned int 
  1530 ;;  divisor         2    2[BANK0 ] unsigned int 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  quotient        2    5[BANK0 ] unsigned int 
  1533 ;;  counter         1    4[BANK0 ] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  2    0[BANK0 ] unsigned int 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1543 ;;      Params:         0       4       0       0       0       0       0       0       0
  1544 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1546 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1547 ;;Total ram usage:        7 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    6
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_printf
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text6
  1558  001056                     __ptext6:
  1559                           	opt stack 0
  1560  001056                     ___lwdiv:
  1561                           	opt stack 22
  1562                           
  1563                           ;incstack = 0
  1564  001056  0E00               	movlw	0
  1565  001058  0100               	movlb	0	; () banked
  1566  00105A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1567  00105C  0E00               	movlw	0
  1568  00105E  6F65               	movwf	___lwdiv@quotient& (0+255),b
  1569                           
  1570                           ; BSR set to: 0
  1571  001060  0100               	movlb	0	; () banked
  1572  001062  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1573  001064  0100               	movlb	0	; () banked
  1574  001066  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1575  001068  B4D8               	btfsc	status,2,c
  1576  00106A  D02C               	goto	l589
  1577                           
  1578                           ; BSR set to: 0
  1579  00106C  0E01               	movlw	1
  1580  00106E  0100               	movlb	0	; () banked
  1581  001070  6F64               	movwf	___lwdiv@counter& (0+255),b
  1582  001072  D006               	goto	l1538
  1583  001074                     l1536:
  1584                           
  1585                           ; BSR set to: 0
  1586  001074  0100               	movlb	0	; () banked
  1587  001076  90D8               	bcf	status,0,c
  1588  001078  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1589  00107A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1590  00107C  0100               	movlb	0	; () banked
  1591  00107E  2B64               	incf	___lwdiv@counter& (0+255),f,b
  1592  001080                     l1538:
  1593                           
  1594                           ; BSR set to: 0
  1595  001080  0100               	movlb	0	; () banked
  1596  001082  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1597  001084  D7F7               	goto	l1536
  1598  001086                     l1540:
  1599                           
  1600                           ; BSR set to: 0
  1601  001086  0100               	movlb	0	; () banked
  1602  001088  90D8               	bcf	status,0,c
  1603  00108A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  1604  00108C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1605                           
  1606                           ; BSR set to: 0
  1607  00108E  0100               	movlb	0	; () banked
  1608  001090  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1609  001092  0100               	movlb	0	; () banked
  1610  001094  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1611  001096  0100               	movlb	0	; () banked
  1612  001098  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1613  00109A  0100               	movlb	0	; () banked
  1614  00109C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1615  00109E  A0D8               	btfss	status,0,c
  1616  0010A0  D00A               	goto	l1548
  1617                           
  1618                           ; BSR set to: 0
  1619  0010A2  0100               	movlb	0	; () banked
  1620  0010A4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1621  0010A6  0100               	movlb	0	; () banked
  1622  0010A8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1623  0010AA  0100               	movlb	0	; () banked
  1624  0010AC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1625  0010AE  0100               	movlb	0	; () banked
  1626  0010B0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1627                           
  1628                           ; BSR set to: 0
  1629  0010B2  0100               	movlb	0	; () banked
  1630  0010B4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  1631  0010B6                     l1548:
  1632                           
  1633                           ; BSR set to: 0
  1634  0010B6  0100               	movlb	0	; () banked
  1635  0010B8  90D8               	bcf	status,0,c
  1636  0010BA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1637  0010BC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1638                           
  1639                           ; BSR set to: 0
  1640  0010BE  0100               	movlb	0	; () banked
  1641  0010C0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  1642  0010C2  D7E1               	goto	l1540
  1643  0010C4                     l589:
  1644                           
  1645                           ; BSR set to: 0
  1646  0010C4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  1647  0010C8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1648                           
  1649                           ; BSR set to: 0
  1650  0010CC  0012               	return		;funcret
  1651  0010CE                     __end_of___lwdiv:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           postinc0	equ	0xFEE
  1660                           plusw0	equ	0xFEB
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1l	equ	0xFE1
  1664                           indf2	equ	0xFDF
  1665                           postinc2	equ	0xFDE
  1666                           postdec2	equ	0xFDD
  1667                           plusw2	equ	0xFDB
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _D_UART_Read *****************
  1673 ;; Defined at:
  1674 ;;		line 237 in file "Drivers/UART_Driver.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  6    0[BANK0 ] struct .
  1681 ;; Registers used:
  1682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1688 ;;      Params:         0       6       0       0       0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1691 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1692 ;;Total ram usage:        6 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    6
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text7
  1703  001236                     __ptext7:
  1704                           	opt stack 0
  1705  001236                     _D_UART_Read:
  1706                           	opt stack 24
  1707                           
  1708                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;incstack = 0
  1712  001236  0E0B               	movlw	low (_readBuffer+11)
  1713  001238  6E30               	movwf	_readData,c
  1714  00123A  0E01               	movlw	high (_readBuffer+11)
  1715  00123C  6E31               	movwf	_readData+1,c
  1716                           
  1717                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
  1718  00123E  0E3E               	movlw	low (_readBuffer+62)
  1719  001240  6E32               	movwf	_readData+2,c
  1720  001242  0E01               	movlw	high (_readBuffer+62)
  1721  001244  6E33               	movwf	_readData+3,c
  1722                           
  1723                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
  1724  001246  0E71               	movlw	low (_readBuffer+113)
  1725  001248  6E34               	movwf	_readData+4,c
  1726  00124A  0E01               	movlw	high (_readBuffer+113)
  1727  00124C  6E35               	movwf	_readData+5,c
  1728                           
  1729                           ;UART_Driver.c: 241: return readData;
  1730  00124E  EE20  F030         	lfsr	2,_readData
  1731  001252  EE00  F060         	lfsr	0,?_D_UART_Read
  1732  001256  0E05               	movlw	5
  1733  001258                     u1131:
  1734  001258  CFDB FFEB          	movff	plusw2,plusw0
  1735  00125C  06E8               	decf	wreg,f,c
  1736  00125E  E2FC               	bc	u1131
  1737  001260  0012               	return	
  1738  001262                     __end_of_D_UART_Read:
  1739                           	opt stack 0
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           postinc0	equ	0xFEE
  1747                           plusw0	equ	0xFEB
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           indf2	equ	0xFDF
  1752                           postinc2	equ	0xFDE
  1753                           postdec2	equ	0xFDD
  1754                           plusw2	equ	0xFDB
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _D_UART_Init *****************
  1760 ;; Defined at:
  1761 ;;		line 182 in file "Drivers/UART_Driver.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1764 ;;		 -> STR_8(6), 
  1765 ;;  baud            2   16[BANK0 ] unsigned int 
  1766 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1778 ;;      Params:         0       5       0       0       0       0       0       0       0
  1779 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1780 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1781 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1782 ;;Total ram usage:        9 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    7
  1785 ;; This function calls:
  1786 ;;		_D_UART_Enable
  1787 ;;		___aldiv
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text8
  1794  000FAE                     __ptext8:
  1795                           	opt stack 0
  1796  000FAE                     _D_UART_Init:
  1797                           	opt stack 23
  1798                           
  1799                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1800                           
  1801                           ;incstack = 0
  1802  000FAE  9E94               	bcf	3988,7,c	;volatile
  1803                           
  1804                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1805  000FB0  8C94               	bsf	3988,6,c	;volatile
  1806                           
  1807                           ;UART_Driver.c: 188: deviceName = name;
  1808  000FB2  C06E  F07A         	movff	D_UART_Init@name,_deviceName
  1809  000FB6  C06F  F07B         	movff	D_UART_Init@name+1,_deviceName+1
  1810  000FBA  0100               	movlb	0	; () banked
  1811  000FBC  517A               	movf	_deviceName& (0+255),w,b
  1812  000FBE  117B               	iorwf	(_deviceName+1)& (0+255),w,b
  1813  000FC0  A4D8               	btfss	status,2,c
  1814  000FC2  0E00               	movlw	low (__mediumconst shr (0+16))
  1815  000FC4  6F7C               	movwf	(_deviceName+2)& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;UART_Driver.c: 189: readReady = 0;
  1819  000FC6  0E00               	movlw	0
  1820  000FC8  6E37               	movwf	_readReady,c
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1824  000FCA  0E00               	movlw	0
  1825  000FCC  EC31  F009         	call	_D_UART_Enable
  1826                           
  1827                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1828  000FD0  9CAC               	bcf	4012,6,c	;volatile
  1829                           
  1830                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1831  000FD2  98AC               	bcf	4012,4,c	;volatile
  1832                           
  1833                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1834  000FD4  94AC               	bcf	4012,2,c	;volatile
  1835                           
  1836                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1837  000FD6  9CAB               	bcf	4011,6,c	;volatile
  1838                           
  1839                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 1;
  1840  000FD8  8AB8               	bsf	4024,5,c	;volatile
  1841                           
  1842                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 1;
  1843  000FDA  88B8               	bsf	4024,4,c	;volatile
  1844                           
  1845                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1846  000FDC  96B8               	bcf	4024,3,c	;volatile
  1847                           
  1848                           ;UART_Driver.c: 210: SPBRG = ((10000000/baud)/64)-1;
  1849  000FDE  C070  F064         	movff	D_UART_Init@baud,___aldiv@divisor
  1850  000FE2  C071  F065         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1851  000FE6  0100               	movlb	0	; () banked
  1852  000FE8  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1853  000FEA  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1854  000FEC  0E80               	movlw	128
  1855  000FEE  0100               	movlb	0	; () banked
  1856  000FF0  6F60               	movwf	___aldiv@dividend& (0+255),b
  1857  000FF2  0E96               	movlw	150
  1858  000FF4  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  1859  000FF6  0E98               	movlw	152
  1860  000FF8  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  1861  000FFA  0E00               	movlw	0
  1862  000FFC  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  1863  000FFE  EC5B  F006         	call	___aldiv	;wreg free
  1864  001002  C060  F073         	movff	?___aldiv,_D_UART_Init$1308
  1865  001006  C061  F074         	movff	?___aldiv+1,_D_UART_Init$1308+1
  1866  00100A  C062  F075         	movff	?___aldiv+2,_D_UART_Init$1308+2
  1867  00100E  C063  F076         	movff	?___aldiv+3,_D_UART_Init$1308+3
  1868                           
  1869                           ;UART_Driver.c: 210: SPBRG = ((10000000/baud)/64)-1;
  1870  001012  C073  F060         	movff	_D_UART_Init$1308,___aldiv@dividend
  1871  001016  C074  F061         	movff	_D_UART_Init$1308+1,___aldiv@dividend+1
  1872  00101A  C075  F062         	movff	_D_UART_Init$1308+2,___aldiv@dividend+2
  1873  00101E  C076  F063         	movff	_D_UART_Init$1308+3,___aldiv@dividend+3
  1874  001022  0E40               	movlw	64
  1875  001024  0100               	movlb	0	; () banked
  1876  001026  6F64               	movwf	___aldiv@divisor& (0+255),b
  1877  001028  0E00               	movlw	0
  1878  00102A  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
  1879  00102C  0E00               	movlw	0
  1880  00102E  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
  1881  001030  0E00               	movlw	0
  1882  001032  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
  1883  001034  EC5B  F006         	call	___aldiv	;wreg free
  1884  001038  0100               	movlb	0	; () banked
  1885  00103A  0560               	decf	?___aldiv& (0+255),w,b
  1886  00103C  6EAF               	movwf	4015,c	;volatile
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;UART_Driver.c: 213: if (interrupts) {
  1890  00103E  0100               	movlb	0	; () banked
  1891  001040  5172               	movf	D_UART_Init@interrupts& (0+255),w,b
  1892  001042  0100               	movlb	0	; () banked
  1893  001044  B4D8               	btfsc	status,2,c
  1894  001046  0012               	return	
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1898  001048  8ED0               	bsf	4048,7,c	;volatile
  1899                           
  1900                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1901  00104A  8EF2               	bsf	intcon,7,c	;volatile
  1902                           
  1903                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1904  00104C  8CF2               	bsf	intcon,6,c	;volatile
  1905                           
  1906                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1907  00104E  9A9E               	bcf	3998,5,c	;volatile
  1908                           
  1909                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1910  001050  9A9F               	bcf	3999,5,c	;volatile
  1911                           
  1912                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1913  001052  8A9D               	bsf	3997,5,c	;volatile
  1914  001054  0012               	return	
  1915  001056                     __end_of_D_UART_Init:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           intcon	equ	0xFF2
  1924                           postinc0	equ	0xFEE
  1925                           plusw0	equ	0xFEB
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1l	equ	0xFE1
  1929                           indf2	equ	0xFDF
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           plusw2	equ	0xFDB
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function ___aldiv *****************
  1938 ;; Defined at:
  1939 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/aldiv.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  dividend        4    0[BANK0 ] long 
  1942 ;;  divisor         4    4[BANK0 ] long 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  quotient        4   10[BANK0 ] long 
  1945 ;;  sign            1    9[BANK0 ] unsigned char 
  1946 ;;  counter         1    8[BANK0 ] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  4    0[BANK0 ] long 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1956 ;;      Params:         0       8       0       0       0       0       0       0       0
  1957 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1959 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1960 ;;Total ram usage:       14 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    6
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_D_UART_Init
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text9
  1971  000CB6                     __ptext9:
  1972                           	opt stack 0
  1973  000CB6                     ___aldiv:
  1974                           	opt stack 23
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;incstack = 0
  1978  000CB6  0E00               	movlw	0
  1979  000CB8  0100               	movlb	0	; () banked
  1980  000CBA  6F69               	movwf	___aldiv@sign& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983  000CBC  0100               	movlb	0	; () banked
  1984  000CBE  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1985  000CC0  D00C               	goto	l1606
  1986                           
  1987                           ; BSR set to: 0
  1988  000CC2  0100               	movlb	0	; () banked
  1989  000CC4  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1990  000CC6  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1991  000CC8  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1992  000CCA  6D64               	negf	___aldiv@divisor& (0+255),b
  1993  000CCC  0E00               	movlw	0
  1994  000CCE  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1995  000CD0  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1996  000CD2  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1997                           
  1998                           ; BSR set to: 0
  1999  000CD4  0E01               	movlw	1
  2000  000CD6  0100               	movlb	0	; () banked
  2001  000CD8  6F69               	movwf	___aldiv@sign& (0+255),b
  2002  000CDA                     l1606:
  2003                           
  2004                           ; BSR set to: 0
  2005  000CDA  0100               	movlb	0	; () banked
  2006  000CDC  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2007  000CDE  D00C               	goto	l1612
  2008                           
  2009                           ; BSR set to: 0
  2010  000CE0  0100               	movlb	0	; () banked
  2011  000CE2  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2012  000CE4  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2013  000CE6  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2014  000CE8  6D60               	negf	___aldiv@dividend& (0+255),b
  2015  000CEA  0E00               	movlw	0
  2016  000CEC  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2017  000CEE  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2018  000CF0  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2019                           
  2020                           ; BSR set to: 0
  2021  000CF2  0E01               	movlw	1
  2022  000CF4  0100               	movlb	0	; () banked
  2023  000CF6  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  2024  000CF8                     l1612:
  2025                           
  2026                           ; BSR set to: 0
  2027  000CF8  0E00               	movlw	0
  2028  000CFA  0100               	movlb	0	; () banked
  2029  000CFC  6F6A               	movwf	___aldiv@quotient& (0+255),b
  2030  000CFE  0E00               	movlw	0
  2031  000D00  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  2032  000D02  0E00               	movlw	0
  2033  000D04  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  2034  000D06  0E00               	movlw	0
  2035  000D08  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  2036                           
  2037                           ; BSR set to: 0
  2038  000D0A  0100               	movlb	0	; () banked
  2039  000D0C  5164               	movf	___aldiv@divisor& (0+255),w,b
  2040  000D0E  0100               	movlb	0	; () banked
  2041  000D10  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2042  000D12  0100               	movlb	0	; () banked
  2043  000D14  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2044  000D16  0100               	movlb	0	; () banked
  2045  000D18  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  2046  000D1A  B4D8               	btfsc	status,2,c
  2047  000D1C  D042               	goto	l1634
  2048                           
  2049                           ; BSR set to: 0
  2050  000D1E  0E01               	movlw	1
  2051  000D20  0100               	movlb	0	; () banked
  2052  000D22  6F68               	movwf	___aldiv@counter& (0+255),b
  2053  000D24  D008               	goto	l1620
  2054  000D26                     l1618:
  2055                           
  2056                           ; BSR set to: 0
  2057  000D26  0100               	movlb	0	; () banked
  2058  000D28  90D8               	bcf	status,0,c
  2059  000D2A  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  2060  000D2C  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2061  000D2E  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2062  000D30  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2063  000D32  0100               	movlb	0	; () banked
  2064  000D34  2B68               	incf	___aldiv@counter& (0+255),f,b
  2065  000D36                     l1620:
  2066                           
  2067                           ; BSR set to: 0
  2068  000D36  0100               	movlb	0	; () banked
  2069  000D38  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2070  000D3A  D7F5               	goto	l1618
  2071  000D3C                     l1622:
  2072                           
  2073                           ; BSR set to: 0
  2074  000D3C  0100               	movlb	0	; () banked
  2075  000D3E  90D8               	bcf	status,0,c
  2076  000D40  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  2077  000D42  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2078  000D44  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2079  000D46  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2080                           
  2081                           ; BSR set to: 0
  2082  000D48  0100               	movlb	0	; () banked
  2083  000D4A  5164               	movf	___aldiv@divisor& (0+255),w,b
  2084  000D4C  0100               	movlb	0	; () banked
  2085  000D4E  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  2086  000D50  0100               	movlb	0	; () banked
  2087  000D52  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2088  000D54  0100               	movlb	0	; () banked
  2089  000D56  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2090  000D58  0100               	movlb	0	; () banked
  2091  000D5A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2092  000D5C  0100               	movlb	0	; () banked
  2093  000D5E  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2094  000D60  0100               	movlb	0	; () banked
  2095  000D62  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2096  000D64  0100               	movlb	0	; () banked
  2097  000D66  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2098  000D68  A0D8               	btfss	status,0,c
  2099  000D6A  D012               	goto	l1630
  2100                           
  2101                           ; BSR set to: 0
  2102  000D6C  0100               	movlb	0	; () banked
  2103  000D6E  5164               	movf	___aldiv@divisor& (0+255),w,b
  2104  000D70  0100               	movlb	0	; () banked
  2105  000D72  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  2106  000D74  0100               	movlb	0	; () banked
  2107  000D76  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2108  000D78  0100               	movlb	0	; () banked
  2109  000D7A  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2110  000D7C  0100               	movlb	0	; () banked
  2111  000D7E  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2112  000D80  0100               	movlb	0	; () banked
  2113  000D82  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2114  000D84  0100               	movlb	0	; () banked
  2115  000D86  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2116  000D88  0100               	movlb	0	; () banked
  2117  000D8A  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2118                           
  2119                           ; BSR set to: 0
  2120  000D8C  0100               	movlb	0	; () banked
  2121  000D8E  816A               	bsf	___aldiv@quotient& (0+255),0,b
  2122  000D90                     l1630:
  2123                           
  2124                           ; BSR set to: 0
  2125  000D90  0100               	movlb	0	; () banked
  2126  000D92  90D8               	bcf	status,0,c
  2127  000D94  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2128  000D96  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2129  000D98  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2130  000D9A  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  2131                           
  2132                           ; BSR set to: 0
  2133  000D9C  0100               	movlb	0	; () banked
  2134  000D9E  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  2135  000DA0  D7CD               	goto	l1622
  2136  000DA2                     l1634:
  2137                           
  2138                           ; BSR set to: 0
  2139  000DA2  0100               	movlb	0	; () banked
  2140  000DA4  5169               	movf	___aldiv@sign& (0+255),w,b
  2141  000DA6  0100               	movlb	0	; () banked
  2142  000DA8  B4D8               	btfsc	status,2,c
  2143  000DAA  D009               	goto	l1638
  2144                           
  2145                           ; BSR set to: 0
  2146  000DAC  0100               	movlb	0	; () banked
  2147  000DAE  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2148  000DB0  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2149  000DB2  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2150  000DB4  6D6A               	negf	___aldiv@quotient& (0+255),b
  2151  000DB6  0E00               	movlw	0
  2152  000DB8  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2153  000DBA  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2154  000DBC  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2155  000DBE                     l1638:
  2156                           
  2157                           ; BSR set to: 0
  2158  000DBE  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  2159  000DC2  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  2160  000DC6  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  2161  000DCA  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  2162  000DCE  0012               	return	
  2163  000DD0                     __end_of___aldiv:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           prodh	equ	0xFF4
  2170                           prodl	equ	0xFF3
  2171                           intcon	equ	0xFF2
  2172                           postinc0	equ	0xFEE
  2173                           plusw0	equ	0xFEB
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           plusw2	equ	0xFDB
  2181                           fsr2h	equ	0xFDA
  2182                           fsr2l	equ	0xFD9
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _D_UART_Enable *****************
  2186 ;; Defined at:
  2187 ;;		line 244 in file "Drivers/UART_Driver.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  enable          1    wreg     unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  enable          1    0[BANK0 ] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2201 ;;      Params:         0       0       0       0       0       0       0       0       0
  2202 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2204 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2205 ;;Total ram usage:        1 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    6
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_D_UART_Init
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text10
  2217  001262                     __ptext10:
  2218                           	opt stack 0
  2219  001262                     _D_UART_Enable:
  2220                           	opt stack 23
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;incstack = 0
  2224                           ;D_UART_Enable@enable stored from wreg
  2225  001262  0100               	movlb	0	; () banked
  2226  001264  6F60               	movwf	D_UART_Enable@enable& (0+255),b
  2227                           
  2228                           ;UART_Driver.c: 245: if(enable) {
  2229  001266  0100               	movlb	0	; () banked
  2230  001268  5160               	movf	D_UART_Enable@enable& (0+255),w,b
  2231  00126A  0100               	movlb	0	; () banked
  2232  00126C  B4D8               	btfsc	status,2,c
  2233  00126E  D006               	goto	l105
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  2237  001270  9E94               	bcf	3988,7,c	;volatile
  2238                           
  2239                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  2240  001272  8C94               	bsf	3988,6,c	;volatile
  2241                           
  2242                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  2243  001274  8AAC               	bsf	4012,5,c	;volatile
  2244                           
  2245                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  2246  001276  88AB               	bsf	4011,4,c	;volatile
  2247                           
  2248                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  2249  001278  8EAB               	bsf	4011,7,c	;volatile
  2250                           
  2251                           ;UART_Driver.c: 251: } else {
  2252  00127A  0012               	return	
  2253  00127C                     l105:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  2257  00127C  9E94               	bcf	3988,7,c	;volatile
  2258                           
  2259                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  2260  00127E  9C94               	bcf	3988,6,c	;volatile
  2261                           
  2262                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  2263  001280  9AAC               	bcf	4012,5,c	;volatile
  2264                           
  2265                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  2266  001282  98AB               	bcf	4011,4,c	;volatile
  2267                           
  2268                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  2269  001284  9EAB               	bcf	4011,7,c	;volatile
  2270  001286  0012               	return	
  2271  001288                     __end_of_D_UART_Enable:
  2272                           	opt stack 0
  2273                           tblptru	equ	0xFF8
  2274                           tblptrh	equ	0xFF7
  2275                           tblptrl	equ	0xFF6
  2276                           tablat	equ	0xFF5
  2277                           prodh	equ	0xFF4
  2278                           prodl	equ	0xFF3
  2279                           intcon	equ	0xFF2
  2280                           postinc0	equ	0xFEE
  2281                           plusw0	equ	0xFEB
  2282                           wreg	equ	0xFE8
  2283                           postdec1	equ	0xFE5
  2284                           fsr1l	equ	0xFE1
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           plusw2	equ	0xFDB
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _D_PORT_Init *****************
  2294 ;; Defined at:
  2295 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    6
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text11
  2324  001288                     __ptext11:
  2325                           	opt stack 0
  2326  001288                     _D_PORT_Init:
  2327                           	opt stack 24
  2328                           
  2329                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  001288  0E00               	movlw	0
  2334  00128A  6E92               	movwf	3986,c	;volatile
  2335  00128C  0E00               	movlw	0
  2336  00128E  6E80               	movwf	3968,c	;volatile
  2337                           
  2338                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  2339  001290  0E00               	movlw	0
  2340  001292  6E93               	movwf	3987,c	;volatile
  2341  001294  0E00               	movlw	0
  2342  001296  6E81               	movwf	3969,c	;volatile
  2343                           
  2344                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  2345  001298  0E00               	movlw	0
  2346  00129A  6E94               	movwf	3988,c	;volatile
  2347  00129C  0E00               	movlw	0
  2348  00129E  6E82               	movwf	3970,c	;volatile
  2349                           
  2350                           ;PORT_Driver.c: 38: ADCON1 = 0x0F;
  2351  0012A0  0E0F               	movlw	15
  2352  0012A2  6EC1               	movwf	4033,c	;volatile
  2353  0012A4  0012               	return		;funcret
  2354  0012A6                     __end_of_D_PORT_Init:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           plusw0	equ	0xFEB
  2365                           wreg	equ	0xFE8
  2366                           postdec1	equ	0xFE5
  2367                           fsr1l	equ	0xFE1
  2368                           indf2	equ	0xFDF
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           plusw2	equ	0xFDB
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _LowISR *****************
  2377 ;; Defined at:
  2378 ;;		line 264 in file "Drivers/UART_Driver.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2394 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2395 ;;      Totals:        17       0       0       0       0       0       0       0       0
  2396 ;;Total ram usage:       17 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    5
  2399 ;; This function calls:
  2400 ;;		_fillDataBuffer
  2401 ;;		_readByte
  2402 ;; This function is called by:
  2403 ;;		Interrupt level 1
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	intcodelo
  2408  000018                     __pintcodelo:
  2409                           	opt stack 0
  2410  000018                     _LowISR:
  2411                           	opt stack 21
  2412                           
  2413                           ;incstack = 0
  2414  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2415  00001A  CFD8 F019          	movff	status,??_LowISR
  2416  00001E  CFE8 F01A          	movff	wreg,??_LowISR+1
  2417  000022  CFE0 F01B          	movff	bsr,??_LowISR+2
  2418  000026  CFFA F01C          	movff	pclath,??_LowISR+3
  2419  00002A  CFFB F01D          	movff	pclatu,??_LowISR+4
  2420  00002E  CFE9 F01E          	movff	fsr0l,??_LowISR+5
  2421  000032  CFEA F01F          	movff	fsr0h,??_LowISR+6
  2422  000036  CFE1 F020          	movff	fsr1l,??_LowISR+7
  2423  00003A  CFE2 F021          	movff	fsr1h,??_LowISR+8
  2424  00003E  CFD9 F022          	movff	fsr2l,??_LowISR+9
  2425  000042  CFDA F023          	movff	fsr2h,??_LowISR+10
  2426  000046  CFF3 F024          	movff	prodl,??_LowISR+11
  2427  00004A  CFF4 F025          	movff	prodh,??_LowISR+12
  2428  00004E  CFF6 F026          	movff	tblptrl,??_LowISR+13
  2429  000052  CFF7 F027          	movff	tblptrh,??_LowISR+14
  2430  000056  CFF8 F028          	movff	tblptru,??_LowISR+15
  2431  00005A  CFF5 F029          	movff	tablat,??_LowISR+16
  2432                           
  2433                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  2434  00005E  AA9E               	btfss	3998,5,c	;volatile
  2435  000060  D005               	goto	i1l114
  2436                           
  2437                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  2438  000062  EC6C  F009         	call	_readByte	;wreg free
  2439  000066  EC33  F004         	call	_fillDataBuffer
  2440                           
  2441                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  2442  00006A  9A9E               	bcf	3998,5,c	;volatile
  2443  00006C                     i1l114:
  2444  00006C  C029  FFF5         	movff	??_LowISR+16,tablat
  2445  000070  C028  FFF8         	movff	??_LowISR+15,tblptru
  2446  000074  C027  FFF7         	movff	??_LowISR+14,tblptrh
  2447  000078  C026  FFF6         	movff	??_LowISR+13,tblptrl
  2448  00007C  C025  FFF4         	movff	??_LowISR+12,prodh
  2449  000080  C024  FFF3         	movff	??_LowISR+11,prodl
  2450  000084  C023  FFDA         	movff	??_LowISR+10,fsr2h
  2451  000088  C022  FFD9         	movff	??_LowISR+9,fsr2l
  2452  00008C  C021  FFE2         	movff	??_LowISR+8,fsr1h
  2453  000090  C020  FFE1         	movff	??_LowISR+7,fsr1l
  2454  000094  C01F  FFEA         	movff	??_LowISR+6,fsr0h
  2455  000098  C01E  FFE9         	movff	??_LowISR+5,fsr0l
  2456  00009C  C01D  FFFB         	movff	??_LowISR+4,pclatu
  2457  0000A0  C01C  FFFA         	movff	??_LowISR+3,pclath
  2458  0000A4  C01B  FFE0         	movff	??_LowISR+2,bsr
  2459  0000A8  C01A  FFE8         	movff	??_LowISR+1,wreg
  2460  0000AC  C019  FFD8         	movff	??_LowISR,status
  2461  0000B0  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2462  0000B2  0010               	retfie	
  2463  0000B4                     __end_of_LowISR:
  2464                           	opt stack 0
  2465                           pclatu	equ	0xFFB
  2466                           pclath	equ	0xFFA
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           postinc0	equ	0xFEE
  2475                           plusw0	equ	0xFEB
  2476                           fsr0h	equ	0xFEA
  2477                           fsr0l	equ	0xFE9
  2478                           wreg	equ	0xFE8
  2479                           postdec1	equ	0xFE5
  2480                           fsr1h	equ	0xFE2
  2481                           fsr1l	equ	0xFE1
  2482                           bsr	equ	0xFE0
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           plusw2	equ	0xFDB
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _readByte *****************
  2492 ;; Defined at:
  2493 ;;		line 74 in file "Drivers/UART_Driver.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      unsigned char 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        0 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; This function calls:
  2514 ;;		Nothing
  2515 ;; This function is called by:
  2516 ;;		_LowISR
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text13
  2521  0012D8                     __ptext13:
  2522                           	opt stack 0
  2523  0012D8                     _readByte:
  2524                           	opt stack 25
  2525                           
  2526                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  2527                           
  2528                           ;incstack = 0
  2529  0012D8  50AB               	movf	4011,w,c	;volatile
  2530                           
  2531                           ;UART_Driver.c: 77: }
  2532                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  2533  0012DA  50AB               	movf	4011,w,c	;volatile
  2534                           
  2535                           ;UART_Driver.c: 80: }
  2536                           ;UART_Driver.c: 81: return RCREG;
  2537  0012DC  50AE               	movf	4014,w,c	;volatile
  2538  0012DE  0012               	return	
  2539  0012E0                     __end_of_readByte:
  2540                           	opt stack 0
  2541                           pclatu	equ	0xFFB
  2542                           pclath	equ	0xFFA
  2543                           tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           prodh	equ	0xFF4
  2548                           prodl	equ	0xFF3
  2549                           intcon	equ	0xFF2
  2550                           postinc0	equ	0xFEE
  2551                           plusw0	equ	0xFEB
  2552                           fsr0h	equ	0xFEA
  2553                           fsr0l	equ	0xFE9
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1h	equ	0xFE2
  2557                           fsr1l	equ	0xFE1
  2558                           bsr	equ	0xFE0
  2559                           indf2	equ	0xFDF
  2560                           postinc2	equ	0xFDE
  2561                           postdec2	equ	0xFDD
  2562                           plusw2	equ	0xFDB
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8
  2566                           
  2567 ;; *************** function _fillDataBuffer *****************
  2568 ;; Defined at:
  2569 ;;		line 84 in file "Drivers/UART_Driver.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;  data            1    wreg     unsigned char 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  data            1   23[COMRAM] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2583 ;;      Params:         0       0       0       0       0       0       0       0       0
  2584 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2586 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2587 ;;Total ram usage:        1 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    4
  2590 ;; This function calls:
  2591 ;;		_acknowledge
  2592 ;; This function is called by:
  2593 ;;		_LowISR
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text14
  2598  000866                     __ptext14:
  2599                           	opt stack 0
  2600  000866                     _fillDataBuffer:
  2601                           	opt stack 21
  2602                           
  2603                           ;incstack = 0
  2604                           ;fillDataBuffer@data stored from wreg
  2605  000866  6E18               	movwf	fillDataBuffer@data,c
  2606                           
  2607                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  2608  000868  D0CF               	goto	i1l1440
  2609  00086A                     i1l1362:
  2610                           
  2611                           ;UART_Driver.c: 87: if(data == 0x26) {
  2612  00086A  0E26               	movlw	38
  2613  00086C  1818               	xorwf	fillDataBuffer@data,w,c
  2614  00086E  A4D8               	btfss	status,2,c
  2615  000870  D012               	goto	i1l1366
  2616                           
  2617                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  2618  000872  0E00               	movlw	0
  2619  000874  0101               	movlb	1	; () banked
  2620  000876  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2621                           
  2622                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  2623  000878  0E00               	movlw	0
  2624  00087A  0101               	movlb	1	; () banked
  2625  00087C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2626                           
  2627                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  2628  00087E  0E00               	movlw	0
  2629  000880  0101               	movlb	1	; () banked
  2630  000882  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2631                           
  2632                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  2633  000884  0E00               	movlw	0
  2634  000886  0101               	movlb	1	; () banked
  2635  000888  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2636                           
  2637                           ;UART_Driver.c: 92: readReady = 0;
  2638  00088A  0E00               	movlw	0
  2639  00088C  6E37               	movwf	_readReady,c
  2640                           
  2641                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  2642  00088E  0E01               	movlw	1
  2643  000890  0101               	movlb	1	; () banked
  2644  000892  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2645                           
  2646                           ;UART_Driver.c: 94: } else {
  2647  000894  0012               	return	
  2648  000896                     i1l1366:
  2649                           
  2650                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  2651  000896  0E00               	movlw	0
  2652  000898  0101               	movlb	1	; () banked
  2653  00089A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2654                           
  2655                           ; BSR set to: 1
  2656                           ;UART_Driver.c: 97: }
  2657                           ;UART_Driver.c: 98: break;
  2658                           
  2659                           ; BSR set to: 1
  2660                           ;UART_Driver.c: 96: return;
  2661  00089C  0012               	return	
  2662  00089E                     i1l1370:
  2663                           
  2664                           ; BSR set to: 1
  2665                           ;UART_Driver.c: 101: if (data == 0x3A) {
  2666  00089E  0E3A               	movlw	58
  2667  0008A0  1818               	xorwf	fillDataBuffer@data,w,c
  2668  0008A2  A4D8               	btfss	status,2,c
  2669  0008A4  D00F               	goto	i1l1376
  2670                           
  2671                           ; BSR set to: 1
  2672                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  2673  0008A6  0E02               	movlw	2
  2674  0008A8  0101               	movlb	1	; () banked
  2675  0008AA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  2679  0008AC  0101               	movlb	1	; () banked
  2680  0008AE  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2681  0008B0  0D01               	mullw	1
  2682  0008B2  0E00               	movlw	low _readBuffer
  2683  0008B4  24F3               	addwf	prodl,w,c
  2684  0008B6  6ED9               	movwf	fsr2l,c
  2685  0008B8  0E01               	movlw	high _readBuffer
  2686  0008BA  20F4               	addwfc	prodh,w,c
  2687  0008BC  6EDA               	movwf	fsr2h,c
  2688  0008BE  0E00               	movlw	0
  2689  0008C0  6EDF               	movwf	indf2,c
  2690                           
  2691                           ;UART_Driver.c: 104: } else {
  2692  0008C2  0012               	return	
  2693  0008C4                     i1l1376:
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  2697  0008C4  0101               	movlb	1	; () banked
  2698  0008C6  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2699  0008C8  0D01               	mullw	1
  2700  0008CA  0E00               	movlw	low _readBuffer
  2701  0008CC  24F3               	addwf	prodl,w,c
  2702  0008CE  6ED9               	movwf	fsr2l,c
  2703  0008D0  0E01               	movlw	high _readBuffer
  2704  0008D2  20F4               	addwfc	prodh,w,c
  2705  0008D4  6EDA               	movwf	fsr2h,c
  2706  0008D6  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2707                           
  2708                           ; BSR set to: 1
  2709                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  2710  0008DA  0101               	movlb	1	; () banked
  2711  0008DC  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 1
  2714                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  2715  0008DE  0E0A               	movlw	10
  2716  0008E0  0101               	movlb	1	; () banked
  2717  0008E2  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  2718  0008E4  0012               	return	
  2719                           
  2720                           ; BSR set to: 1
  2721                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  2722  0008E6  0E00               	movlw	0
  2723  0008E8  0101               	movlb	1	; () banked
  2724  0008EA  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;UART_Driver.c: 109: }
  2728                           ;UART_Driver.c: 110: }
  2729                           ;UART_Driver.c: 111: break;
  2730                           
  2731                           ; BSR set to: 1
  2732  0008EC  0012               	return	
  2733  0008EE                     i1l1384:
  2734                           
  2735                           ; BSR set to: 1
  2736                           ;UART_Driver.c: 114: if (data == 0x3A) {
  2737  0008EE  0E3A               	movlw	58
  2738  0008F0  1818               	xorwf	fillDataBuffer@data,w,c
  2739  0008F2  A4D8               	btfss	status,2,c
  2740  0008F4  D00F               	goto	i1l1390
  2741                           
  2742                           ; BSR set to: 1
  2743                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  2744  0008F6  0E03               	movlw	3
  2745  0008F8  0101               	movlb	1	; () banked
  2746  0008FA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2747                           
  2748                           ; BSR set to: 1
  2749                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  2750  0008FC  0101               	movlb	1	; () banked
  2751  0008FE  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2752  000900  0D01               	mullw	1
  2753  000902  0E0B               	movlw	low (_readBuffer+11)
  2754  000904  24F3               	addwf	prodl,w,c
  2755  000906  6ED9               	movwf	fsr2l,c
  2756  000908  0E01               	movlw	high (_readBuffer+11)
  2757  00090A  20F4               	addwfc	prodh,w,c
  2758  00090C  6EDA               	movwf	fsr2h,c
  2759  00090E  0E00               	movlw	0
  2760  000910  6EDF               	movwf	indf2,c
  2761                           
  2762                           ;UART_Driver.c: 117: } else {
  2763  000912  0012               	return	
  2764  000914                     i1l1390:
  2765                           
  2766                           ; BSR set to: 1
  2767                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  2768  000914  0101               	movlb	1	; () banked
  2769  000916  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2770  000918  0D01               	mullw	1
  2771  00091A  0E0B               	movlw	low (_readBuffer+11)
  2772  00091C  24F3               	addwf	prodl,w,c
  2773  00091E  6ED9               	movwf	fsr2l,c
  2774  000920  0E01               	movlw	high (_readBuffer+11)
  2775  000922  20F4               	addwfc	prodh,w,c
  2776  000924  6EDA               	movwf	fsr2h,c
  2777  000926  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2778                           
  2779                           ; BSR set to: 1
  2780                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  2781  00092A  0101               	movlb	1	; () banked
  2782  00092C  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  2783                           
  2784                           ; BSR set to: 1
  2785                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  2786  00092E  0E32               	movlw	50
  2787  000930  0101               	movlb	1	; () banked
  2788  000932  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  2789  000934  0012               	return	
  2790                           
  2791                           ; BSR set to: 1
  2792                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  2793  000936  0E00               	movlw	0
  2794  000938  0101               	movlb	1	; () banked
  2795  00093A  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2796                           
  2797                           ; BSR set to: 1
  2798                           ;UART_Driver.c: 122: }
  2799                           ;UART_Driver.c: 123: }
  2800                           ;UART_Driver.c: 124: break;
  2801                           
  2802                           ; BSR set to: 1
  2803  00093C  0012               	return	
  2804  00093E                     i1l1398:
  2805                           
  2806                           ; BSR set to: 1
  2807                           ;UART_Driver.c: 127: if (data == 0x3A) {
  2808  00093E  0E3A               	movlw	58
  2809  000940  1818               	xorwf	fillDataBuffer@data,w,c
  2810  000942  A4D8               	btfss	status,2,c
  2811  000944  D00F               	goto	i1l1404
  2812                           
  2813                           ; BSR set to: 1
  2814                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  2815  000946  0E04               	movlw	4
  2816  000948  0101               	movlb	1	; () banked
  2817  00094A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2818                           
  2819                           ; BSR set to: 1
  2820                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  2821  00094C  0101               	movlb	1	; () banked
  2822  00094E  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2823  000950  0D01               	mullw	1
  2824  000952  0E3E               	movlw	low (_readBuffer+62)
  2825  000954  24F3               	addwf	prodl,w,c
  2826  000956  6ED9               	movwf	fsr2l,c
  2827  000958  0E01               	movlw	high (_readBuffer+62)
  2828  00095A  20F4               	addwfc	prodh,w,c
  2829  00095C  6EDA               	movwf	fsr2h,c
  2830  00095E  0E00               	movlw	0
  2831  000960  6EDF               	movwf	indf2,c
  2832                           
  2833                           ;UART_Driver.c: 130: } else {
  2834  000962  0012               	return	
  2835  000964                     i1l1404:
  2836                           
  2837                           ; BSR set to: 1
  2838                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  2839  000964  0101               	movlb	1	; () banked
  2840  000966  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2841  000968  0D01               	mullw	1
  2842  00096A  0E3E               	movlw	low (_readBuffer+62)
  2843  00096C  24F3               	addwf	prodl,w,c
  2844  00096E  6ED9               	movwf	fsr2l,c
  2845  000970  0E01               	movlw	high (_readBuffer+62)
  2846  000972  20F4               	addwfc	prodh,w,c
  2847  000974  6EDA               	movwf	fsr2h,c
  2848  000976  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  2852  00097A  0101               	movlb	1	; () banked
  2853  00097C  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  2854                           
  2855                           ; BSR set to: 1
  2856                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  2857  00097E  0E32               	movlw	50
  2858  000980  0101               	movlb	1	; () banked
  2859  000982  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  2860  000984  0012               	return	
  2861                           
  2862                           ; BSR set to: 1
  2863                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  2864  000986  0E00               	movlw	0
  2865  000988  0101               	movlb	1	; () banked
  2866  00098A  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2867                           
  2868                           ; BSR set to: 1
  2869                           ;UART_Driver.c: 135: }
  2870                           ;UART_Driver.c: 136: }
  2871                           ;UART_Driver.c: 137: break;
  2872                           
  2873                           ; BSR set to: 1
  2874  00098C  0012               	return	
  2875  00098E                     i1l1412:
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;UART_Driver.c: 140: if (data == 0x3A) {
  2879  00098E  0E3A               	movlw	58
  2880  000990  1818               	xorwf	fillDataBuffer@data,w,c
  2881  000992  A4D8               	btfss	status,2,c
  2882  000994  D00F               	goto	i1l1418
  2883                           
  2884                           ; BSR set to: 1
  2885                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  2886  000996  0E05               	movlw	5
  2887  000998  0101               	movlb	1	; () banked
  2888  00099A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  2892  00099C  0101               	movlb	1	; () banked
  2893  00099E  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2894  0009A0  0D01               	mullw	1
  2895  0009A2  0E71               	movlw	low (_readBuffer+113)
  2896  0009A4  24F3               	addwf	prodl,w,c
  2897  0009A6  6ED9               	movwf	fsr2l,c
  2898  0009A8  0E01               	movlw	high (_readBuffer+113)
  2899  0009AA  20F4               	addwfc	prodh,w,c
  2900  0009AC  6EDA               	movwf	fsr2h,c
  2901  0009AE  0E00               	movlw	0
  2902  0009B0  6EDF               	movwf	indf2,c
  2903                           
  2904                           ;UART_Driver.c: 143: } else {
  2905  0009B2  0012               	return	
  2906  0009B4                     i1l1418:
  2907                           
  2908                           ; BSR set to: 1
  2909                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  2910  0009B4  0101               	movlb	1	; () banked
  2911  0009B6  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2912  0009B8  0D01               	mullw	1
  2913  0009BA  0E71               	movlw	low (_readBuffer+113)
  2914  0009BC  24F3               	addwf	prodl,w,c
  2915  0009BE  6ED9               	movwf	fsr2l,c
  2916  0009C0  0E01               	movlw	high (_readBuffer+113)
  2917  0009C2  20F4               	addwfc	prodh,w,c
  2918  0009C4  6EDA               	movwf	fsr2h,c
  2919  0009C6  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2920                           
  2921                           ; BSR set to: 1
  2922                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  2923  0009CA  0101               	movlb	1	; () banked
  2924  0009CC  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  2925                           
  2926                           ; BSR set to: 1
  2927                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  2928  0009CE  0E32               	movlw	50
  2929  0009D0  0101               	movlb	1	; () banked
  2930  0009D2  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  2931  0009D4  0012               	return	
  2932                           
  2933                           ; BSR set to: 1
  2934                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  2935  0009D6  0E00               	movlw	0
  2936  0009D8  0101               	movlb	1	; () banked
  2937  0009DA  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;UART_Driver.c: 148: }
  2941                           ;UART_Driver.c: 149: }
  2942                           ;UART_Driver.c: 150: break;
  2943                           
  2944                           ; BSR set to: 1
  2945  0009DC  0012               	return	
  2946  0009DE                     i1l1426:
  2947                           
  2948                           ; BSR set to: 1
  2949                           ;UART_Driver.c: 153: if (data == 0x24) {
  2950  0009DE  0E24               	movlw	36
  2951  0009E0  1818               	xorwf	fillDataBuffer@data,w,c
  2952  0009E2  A4D8               	btfss	status,2,c
  2953  0009E4  D008               	goto	i1l1434
  2954                           
  2955                           ; BSR set to: 1
  2956                           ;UART_Driver.c: 154: acknowledge();
  2957  0009E6  EC67  F008         	call	_acknowledge	;wreg free
  2958                           
  2959                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  2960  0009EA  0E00               	movlw	0
  2961  0009EC  0101               	movlb	1	; () banked
  2962  0009EE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2963                           
  2964                           ; BSR set to: 1
  2965                           ;UART_Driver.c: 156: readReady = 1;
  2966  0009F0  0E01               	movlw	1
  2967  0009F2  6E37               	movwf	_readReady,c
  2968                           
  2969                           ;UART_Driver.c: 157: } else {
  2970  0009F4  0012               	return	
  2971  0009F6                     i1l1434:
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;UART_Driver.c: 159: readBuffer.readId = (data - 0x30);
  2975  0009F6  5018               	movf	fillDataBuffer@data,w,c
  2976  0009F8  0FD0               	addlw	208
  2977  0009FA  0101               	movlb	1	; () banked
  2978  0009FC  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  2979                           
  2980                           ; BSR set to: 1
  2981                           ;UART_Driver.c: 160: }
  2982                           ;UART_Driver.c: 161: break;
  2983  0009FE  0012               	return	
  2984  000A00                     i1l1436:
  2985                           
  2986                           ; BSR set to: 1
  2987                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  2988  000A00  0E00               	movlw	0
  2989  000A02  0101               	movlb	1	; () banked
  2990  000A04  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2991                           
  2992                           ; BSR set to: 1
  2993                           ;UART_Driver.c: 166: }
  2994                           
  2995                           ;UART_Driver.c: 165: break;
  2996  000A06  0012               	return	
  2997  000A08                     i1l1440:
  2998  000A08  0101               	movlb	1	; () banked
  2999  000A0A  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  3000                           
  3001                           ; Switch size 1, requested type "space"
  3002                           ; Number of cases is 6, Range of values is 0 to 5
  3003                           ; switch strategies available:
  3004                           ; Name         Instructions Cycles
  3005                           ; simple_byte           19    10 (average)
  3006                           ;	Chosen strategy is simple_byte
  3007  000A0C  0A00               	xorlw	0	; case 0
  3008  000A0E  B4D8               	btfsc	status,2,c
  3009  000A10  D72C               	goto	i1l1362
  3010  000A12  0A01               	xorlw	1	; case 1
  3011  000A14  B4D8               	btfsc	status,2,c
  3012  000A16  D743               	goto	i1l1370
  3013  000A18  0A03               	xorlw	3	; case 2
  3014  000A1A  B4D8               	btfsc	status,2,c
  3015  000A1C  D768               	goto	i1l1384
  3016  000A1E  0A01               	xorlw	1	; case 3
  3017  000A20  B4D8               	btfsc	status,2,c
  3018  000A22  D78D               	goto	i1l1398
  3019  000A24  0A07               	xorlw	7	; case 4
  3020  000A26  B4D8               	btfsc	status,2,c
  3021  000A28  D7B2               	goto	i1l1412
  3022  000A2A  0A01               	xorlw	1	; case 5
  3023  000A2C  B4D8               	btfsc	status,2,c
  3024  000A2E  D7D7               	goto	i1l1426
  3025  000A30  D7E7               	goto	i1l1436
  3026  000A32                     __end_of_fillDataBuffer:
  3027                           	opt stack 0
  3028                           pclatu	equ	0xFFB
  3029                           pclath	equ	0xFFA
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           postinc0	equ	0xFEE
  3038                           plusw0	equ	0xFEB
  3039                           fsr0h	equ	0xFEA
  3040                           fsr0l	equ	0xFE9
  3041                           wreg	equ	0xFE8
  3042                           postdec1	equ	0xFE5
  3043                           fsr1h	equ	0xFE2
  3044                           fsr1l	equ	0xFE1
  3045                           bsr	equ	0xFE0
  3046                           indf2	equ	0xFDF
  3047                           postinc2	equ	0xFDE
  3048                           postdec2	equ	0xFDD
  3049                           plusw2	equ	0xFDB
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _acknowledge *****************
  3055 ;; Defined at:
  3056 ;;		line 169 in file "Drivers/UART_Driver.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3070 ;;      Params:         0       0       0       0       0       0       0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3073 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    3
  3077 ;; This function calls:
  3078 ;;		i1_printf
  3079 ;; This function is called by:
  3080 ;;		_fillDataBuffer
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text15
  3085  0010CE                     __ptext15:
  3086                           	opt stack 0
  3087  0010CE                     _acknowledge:
  3088                           	opt stack 21
  3089                           
  3090                           ;UART_Driver.c: 170: printf(startCharacter);
  3091                           
  3092                           ; BSR set to: 1
  3093                           ;incstack = 0
  3094  0010CE  C03A  F008         	movff	_startCharacter,i1printf@f
  3095  0010D2  C03B  F009         	movff	_startCharacter+1,i1printf@f+1
  3096  0010D6  5008               	movf	i1printf@f,w,c
  3097  0010D8  1009               	iorwf	i1printf@f+1,w,c
  3098  0010DA  A4D8               	btfss	status,2,c
  3099  0010DC  0E00               	movlw	low (__mediumconst shr (0+16))
  3100  0010DE  6E0A               	movwf	i1printf@f+2,c
  3101  0010E0  ECC6  F005         	call	i1_printf	;wreg free
  3102                           
  3103                           ;UART_Driver.c: 172: printf(ackCharacter);
  3104  0010E4  C038  F008         	movff	_ackCharacter,i1printf@f
  3105  0010E8  C039  F009         	movff	_ackCharacter+1,i1printf@f+1
  3106  0010EC  5008               	movf	i1printf@f,w,c
  3107  0010EE  1009               	iorwf	i1printf@f+1,w,c
  3108  0010F0  A4D8               	btfss	status,2,c
  3109  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
  3110  0010F4  6E0A               	movwf	i1printf@f+2,c
  3111  0010F6  ECC6  F005         	call	i1_printf	;wreg free
  3112                           
  3113                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  3114  0010FA  0E59               	movlw	low STR_5
  3115  0010FC  6E08               	movwf	i1printf@f,c
  3116  0010FE  0E08               	movlw	high STR_5
  3117  001100  6E09               	movwf	i1printf@f+1,c
  3118  001102  5008               	movf	i1printf@f,w,c
  3119  001104  1009               	iorwf	i1printf@f+1,w,c
  3120  001106  A4D8               	btfss	status,2,c
  3121  001108  0E00               	movlw	low (__mediumconst shr (0+16))
  3122  00110A  6E0A               	movwf	i1printf@f+2,c
  3123  00110C  C1A4  F00B         	movff	_readBuffer+164,?i1_printf+3
  3124  001110  6A0C               	clrf	?i1_printf+4,c
  3125  001112  ECC6  F005         	call	i1_printf	;wreg free
  3126                           
  3127                           ;UART_Driver.c: 176: printf(stopCharacter);
  3128  001116  C03C  F008         	movff	_stopCharacter,i1printf@f
  3129  00111A  C03D  F009         	movff	_stopCharacter+1,i1printf@f+1
  3130  00111E  5008               	movf	i1printf@f,w,c
  3131  001120  1009               	iorwf	i1printf@f+1,w,c
  3132  001122  A4D8               	btfss	status,2,c
  3133  001124  0E00               	movlw	low (__mediumconst shr (0+16))
  3134  001126  6E0A               	movwf	i1printf@f+2,c
  3135  001128  ECC6  F005         	call	i1_printf	;wreg free
  3136  00112C  0012               	return		;funcret
  3137  00112E                     __end_of_acknowledge:
  3138                           	opt stack 0
  3139                           pclatu	equ	0xFFB
  3140                           pclath	equ	0xFFA
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           intcon	equ	0xFF2
  3148                           postinc0	equ	0xFEE
  3149                           plusw0	equ	0xFEB
  3150                           fsr0h	equ	0xFEA
  3151                           fsr0l	equ	0xFE9
  3152                           wreg	equ	0xFE8
  3153                           postdec1	equ	0xFE5
  3154                           fsr1h	equ	0xFE2
  3155                           fsr1l	equ	0xFE1
  3156                           bsr	equ	0xFE0
  3157                           indf2	equ	0xFDF
  3158                           postinc2	equ	0xFDE
  3159                           postdec2	equ	0xFDD
  3160                           plusw2	equ	0xFDB
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function i1_printf *****************
  3166 ;; Defined at:
  3167 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  f               3    7[COMRAM] PTR const unsigned char 
  3170 ;;		 -> STR_17(20), STR_16(4), STR_14(12), STR_13(4), 
  3171 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
  3172 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3173 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  printf          4    0        struct .
  3176 ;;  printf          3    0        PTR const unsigned char 
  3177 ;;  printf          2   19[COMRAM] unsigned int 
  3178 ;;  printf          2   16[COMRAM] PTR void [1]
  3179 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3180 ;;  printf          2    0        unsigned int 
  3181 ;;  printf          1   22[COMRAM] char 
  3182 ;;  printf          1   21[COMRAM] char 
  3183 ;;  printf          1   18[COMRAM] unsigned char 
  3184 ;;  printf          1   15[COMRAM] unsigned char 
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  2    7[COMRAM] int 
  3187 ;; Registers used:
  3188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3194 ;;      Params:         5       0       0       0       0       0       0       0       0
  3195 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3196 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3197 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3198 ;;Total ram usage:       16 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    2
  3201 ;; This function calls:
  3202 ;;		i1___lwdiv
  3203 ;;		i1_putch
  3204 ;; This function is called by:
  3205 ;;		_acknowledge
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text16
  3210  000B8C                     __ptext16:
  3211                           	opt stack 0
  3212  000B8C                     i1_printf:
  3213                           	opt stack 21
  3214                           
  3215                           ;doprnt.c: 466: va_list ap;
  3216                           ;doprnt.c: 499: signed char c;
  3217                           ;doprnt.c: 506: signed char prec;
  3218                           ;doprnt.c: 508: unsigned char flag;
  3219                           ;doprnt.c: 523: union {
  3220                           ;doprnt.c: 524: unsigned long vd;
  3221                           ;doprnt.c: 525: double integ;
  3222                           ;doprnt.c: 526: } tmpval;
  3223                           ;doprnt.c: 528: unsigned int val;
  3224                           ;doprnt.c: 529: unsigned len;
  3225                           ;doprnt.c: 530: const char * cp;
  3226                           ;doprnt.c: 533: *ap = __va_start();
  3227                           
  3228                           ;incstack = 0
  3229  000B8C  0E0B               	movlw	low (?i1_printf+3)
  3230  000B8E  6E11               	movwf	i1printf@ap,c
  3231  000B90  0E00               	movlw	high (?i1_printf+3)
  3232  000B92  6E12               	movwf	i1printf@ap+1,c
  3233                           
  3234                           ;doprnt.c: 536: while(c = *f++) {
  3235  000B94  D079               	goto	i1l1266
  3236  000B96                     i1l1228:
  3237                           
  3238                           ;doprnt.c: 538: if(c != '%')
  3239  000B96  0E25               	movlw	37
  3240  000B98  1817               	xorwf	i1printf@c,w,c
  3241  000B9A  B4D8               	btfsc	status,2,c
  3242  000B9C  D004               	goto	i1l1232
  3243                           
  3244                           ;doprnt.c: 540: {
  3245                           ;doprnt.c: 541: (putch(c) );
  3246  000B9E  5017               	movf	i1printf@c,w,c
  3247  000BA0  EC67  F009         	call	i1_putch
  3248                           
  3249                           ;doprnt.c: 542: continue;
  3250  000BA4  D071               	goto	i1l1266
  3251  000BA6                     i1l1232:
  3252                           
  3253                           ;doprnt.c: 543: }
  3254                           ;doprnt.c: 548: flag = 0;
  3255  000BA6  0E00               	movlw	0
  3256  000BA8  6E10               	movwf	i1printf@flag,c
  3257                           
  3258                           ;doprnt.c: 635: switch(c = *f++) {
  3259  000BAA  D004               	goto	i1l1238
  3260  000BAC                     i1l1234:
  3261                           
  3262                           ;doprnt.c: 809: (putch(c) );
  3263  000BAC  5017               	movf	i1printf@c,w,c
  3264  000BAE  EC67  F009         	call	i1_putch
  3265                           
  3266                           ;doprnt.c: 810: continue;
  3267  000BB2  D06A               	goto	i1l1266
  3268  000BB4                     i1l1238:
  3269  000BB4  C008  F00D         	movff	i1printf@f,??i1_printf
  3270  000BB8  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3271  000BBC  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3272  000BC0  2A08               	incf	i1printf@f,f,c
  3273  000BC2  0E00               	movlw	0
  3274  000BC4  2209               	addwfc	i1printf@f+1,f,c
  3275  000BC6  220A               	addwfc	i1printf@f+2,f,c
  3276  000BC8  C00D  FFF6         	movff	??i1_printf,tblptrl
  3277  000BCC  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3278  000BD0  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3279  000BD4  0008               	tblrd		*
  3280  000BD6  CFF5 F017          	movff	tablat,i1printf@c
  3281  000BDA  5017               	movf	i1printf@c,w,c
  3282                           
  3283                           ; Switch size 1, requested type "space"
  3284                           ; Number of cases is 2, Range of values is 0 to 120
  3285                           ; switch strategies available:
  3286                           ; Name         Instructions Cycles
  3287                           ; simple_byte            7     4 (average)
  3288                           ;	Chosen strategy is simple_byte
  3289  000BDC  0A00               	xorlw	0	; case 0
  3290  000BDE  B4D8               	btfsc	status,2,c
  3291  000BE0  0012               	return	
  3292  000BE2  0A78               	xorlw	120	; case 120
  3293  000BE4  A4D8               	btfss	status,2,c
  3294  000BE6  D7E2               	goto	i1l1234
  3295                           
  3296                           ;doprnt.c: 1273: {
  3297                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3298  000BE8  C011  FFD9         	movff	i1printf@ap,fsr2l
  3299  000BEC  C012  FFDA         	movff	i1printf@ap+1,fsr2h
  3300  000BF0  CFDE F014          	movff	postinc2,i1printf@val
  3301  000BF4  CFDD F015          	movff	postdec2,i1printf@val+1
  3302  000BF8  0E02               	movlw	2
  3303  000BFA  2611               	addwf	i1printf@ap,f,c
  3304  000BFC  0E00               	movlw	0
  3305  000BFE  2212               	addwfc	i1printf@ap+1,f,c
  3306                           
  3307                           ;doprnt.c: 1287: }
  3308                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3309  000C00  0E01               	movlw	1
  3310  000C02  6E17               	movwf	i1printf@c,c
  3311  000C04                     i1l1246:
  3312  000C04  0E04               	movlw	4
  3313  000C06  1817               	xorwf	i1printf@c,w,c
  3314  000C08  B4D8               	btfsc	status,2,c
  3315  000C0A  D012               	goto	i1l180
  3316                           
  3317                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3318  000C0C  5017               	movf	i1printf@c,w,c
  3319  000C0E  0D02               	mullw	2
  3320  000C10  0E01               	movlw	low _hexpowers
  3321  000C12  24F3               	addwf	prodl,w,c
  3322  000C14  6EF6               	movwf	tblptrl,c
  3323  000C16  0E08               	movlw	high _hexpowers
  3324  000C18  20F4               	addwfc	prodh,w,c
  3325  000C1A  6EF7               	movwf	tblptrh,c
  3326  000C1C                     	if	0	;There are less than 3 active tblptr bytes
  3327  000C1C                     	endif
  3328  000C1C  0009               	tblrd		*+
  3329  000C1E  50F5               	movf	tablat,w,c
  3330  000C20  5C14               	subwf	i1printf@val,w,c
  3331  000C22  0009               	tblrd		*+
  3332  000C24  50F5               	movf	tablat,w,c
  3333  000C26  5815               	subwfb	i1printf@val+1,w,c
  3334  000C28  A0D8               	btfss	status,0,c
  3335  000C2A  D002               	goto	i1l180
  3336                           
  3337                           ;doprnt.c: 1318: break;
  3338  000C2C  2A17               	incf	i1printf@c,f,c
  3339  000C2E  D7EA               	goto	i1l1246
  3340  000C30                     i1l180:
  3341                           
  3342                           ;doprnt.c: 1422: {
  3343                           ;doprnt.c: 1469: }
  3344                           ;doprnt.c: 1472: prec = c;
  3345  000C30  C017  F016         	movff	i1printf@c,i1printf@prec
  3346                           
  3347                           ;doprnt.c: 1474: while(prec--) {
  3348  000C34  D025               	goto	i1l1264
  3349  000C36                     i1l1258:
  3350                           
  3351                           ;doprnt.c: 1478: {
  3352                           ;doprnt.c: 1499: {
  3353                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3354  000C36  C014  F001         	movff	i1printf@val,i1___lwdiv@dividend
  3355  000C3A  C015  F002         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  3356  000C3E  5016               	movf	i1printf@prec,w,c
  3357  000C40  0D02               	mullw	2
  3358  000C42  0E01               	movlw	low _hexpowers
  3359  000C44  24F3               	addwf	prodl,w,c
  3360  000C46  6EF6               	movwf	tblptrl,c
  3361  000C48  0E08               	movlw	high _hexpowers
  3362  000C4A  20F4               	addwfc	prodh,w,c
  3363  000C4C  6EF7               	movwf	tblptrh,c
  3364  000C4E                     	if	0	;There are less than 3 active tblptr bytes
  3365  000C4E                     	endif
  3366  000C4E  0009               	tblrd		*+
  3367  000C50  CFF5 F003          	movff	tablat,i1___lwdiv@divisor
  3368  000C54  000A               	tblrd		*-
  3369  000C56  CFF5 F004          	movff	tablat,i1___lwdiv@divisor+1
  3370  000C5A  ECF2  F008         	call	i1___lwdiv	;wreg free
  3371  000C5E  5001               	movf	?i1___lwdiv,w,c
  3372  000C60  0B0F               	andlw	15
  3373  000C62  6E13               	movwf	i1printf@idx,c
  3374                           
  3375                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3376  000C64  5013               	movf	i1printf@idx,w,c
  3377  000C66  0D01               	mullw	1
  3378  000C68  0E1D               	movlw	low STR_18
  3379  000C6A  24F3               	addwf	prodl,w,c
  3380  000C6C  6EF6               	movwf	tblptrl,c
  3381  000C6E  0E08               	movlw	high STR_18
  3382  000C70  20F4               	addwfc	prodh,w,c
  3383  000C72  6EF7               	movwf	tblptrh,c
  3384  000C74                     	if	0	;There are less than 3 active tblptr bytes
  3385  000C74                     	endif
  3386  000C74  0008               	tblrd		*
  3387  000C76  CFF5 F017          	movff	tablat,i1printf@c
  3388                           
  3389                           ;doprnt.c: 1508: }
  3390                           ;doprnt.c: 1523: }
  3391                           ;doprnt.c: 1524: (putch(c) );
  3392  000C7A  5017               	movf	i1printf@c,w,c
  3393  000C7C  EC67  F009         	call	i1_putch
  3394  000C80                     i1l1264:
  3395  000C80  0616               	decf	i1printf@prec,f,c
  3396  000C82  2816               	incf	i1printf@prec,w,c
  3397  000C84  A4D8               	btfss	status,2,c
  3398  000C86  D7D7               	goto	i1l1258
  3399  000C88                     i1l1266:
  3400  000C88  C008  F00D         	movff	i1printf@f,??i1_printf
  3401  000C8C  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3402  000C90  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3403  000C94  2A08               	incf	i1printf@f,f,c
  3404  000C96  0E00               	movlw	0
  3405  000C98  2209               	addwfc	i1printf@f+1,f,c
  3406  000C9A  220A               	addwfc	i1printf@f+2,f,c
  3407  000C9C  C00D  FFF6         	movff	??i1_printf,tblptrl
  3408  000CA0  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3409  000CA4  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3410  000CA8  0008               	tblrd		*
  3411  000CAA  CFF5 F017          	movff	tablat,i1printf@c
  3412  000CAE  5017               	movf	i1printf@c,w,c
  3413  000CB0  B4D8               	btfsc	status,2,c
  3414  000CB2  0012               	return	
  3415  000CB4  D770               	goto	i1l1228
  3416  000CB6                     __end_ofi1_printf:
  3417                           	opt stack 0
  3418                           pclatu	equ	0xFFB
  3419                           pclath	equ	0xFFA
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           postinc0	equ	0xFEE
  3428                           plusw0	equ	0xFEB
  3429                           fsr0h	equ	0xFEA
  3430                           fsr0l	equ	0xFE9
  3431                           wreg	equ	0xFE8
  3432                           postdec1	equ	0xFE5
  3433                           fsr1h	equ	0xFE2
  3434                           fsr1l	equ	0xFE1
  3435                           bsr	equ	0xFE0
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           plusw2	equ	0xFDB
  3440                           fsr2h	equ	0xFDA
  3441                           fsr2l	equ	0xFD9
  3442                           status	equ	0xFD8
  3443                           
  3444 ;; *************** function i1_putch *****************
  3445 ;; Defined at:
  3446 ;;		line 260 in file "Drivers/UART_Driver.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  data            1    wreg     unsigned char 
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  data            1    1[COMRAM] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3460 ;;      Params:         0       0       0       0       0       0       0       0       0
  3461 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3463 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3464 ;;Total ram usage:        1 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    1
  3467 ;; This function calls:
  3468 ;;		i1_writeByte
  3469 ;; This function is called by:
  3470 ;;		i1_printf
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text17
  3475  0012CE                     __ptext17:
  3476                           	opt stack 0
  3477  0012CE                     i1_putch:
  3478                           	opt stack 21
  3479                           
  3480                           ;incstack = 0
  3481                           ;i1putch@data stored from wreg
  3482  0012CE  6E02               	movwf	i1putch@data,c
  3483                           
  3484                           ;UART_Driver.c: 261: writeByte(data);
  3485  0012D0  5002               	movf	i1putch@data,w,c
  3486  0012D2  EC61  F009         	call	i1_writeByte
  3487  0012D6  0012               	return		;funcret
  3488  0012D8                     __end_ofi1_putch:
  3489                           	opt stack 0
  3490                           pclatu	equ	0xFFB
  3491                           pclath	equ	0xFFA
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           postinc0	equ	0xFEE
  3500                           plusw0	equ	0xFEB
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           postdec1	equ	0xFE5
  3505                           fsr1h	equ	0xFE2
  3506                           fsr1l	equ	0xFE1
  3507                           bsr	equ	0xFE0
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           plusw2	equ	0xFDB
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function i1_writeByte *****************
  3517 ;; Defined at:
  3518 ;;		line 69 in file "Drivers/UART_Driver.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  data            1    wreg     unsigned char 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  data            1    0[COMRAM] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0
  3533 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3535 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3536 ;;Total ram usage:        1 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		i1_putch
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text18
  3546  0012C2                     __ptext18:
  3547                           	opt stack 0
  3548  0012C2                     i1_writeByte:
  3549                           	opt stack 21
  3550                           
  3551                           ;incstack = 0
  3552                           ;i1writeByte@data stored from wreg
  3553  0012C2  6E01               	movwf	i1writeByte@data,c
  3554  0012C4                     i1l53:
  3555  0012C4  A2AC               	btfss	4012,1,c	;volatile
  3556  0012C6  D7FE               	goto	i1l53
  3557                           
  3558                           ;UART_Driver.c: 71: TXREG = data;
  3559  0012C8  C001  FFAD         	movff	i1writeByte@data,4013	;volatile
  3560  0012CC  0012               	return		;funcret
  3561  0012CE                     __end_ofi1_writeByte:
  3562                           	opt stack 0
  3563                           pclatu	equ	0xFFB
  3564                           pclath	equ	0xFFA
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           prodh	equ	0xFF4
  3570                           prodl	equ	0xFF3
  3571                           intcon	equ	0xFF2
  3572                           postinc0	equ	0xFEE
  3573                           plusw0	equ	0xFEB
  3574                           fsr0h	equ	0xFEA
  3575                           fsr0l	equ	0xFE9
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           fsr1h	equ	0xFE2
  3579                           fsr1l	equ	0xFE1
  3580                           bsr	equ	0xFE0
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           plusw2	equ	0xFDB
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function i1___lwdiv *****************
  3590 ;; Defined at:
  3591 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  dividend        2    0[COMRAM] unsigned int 
  3594 ;;  divisor         2    2[COMRAM] unsigned int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3597 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  2    0[COMRAM] unsigned int 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3607 ;;      Params:         4       0       0       0       0       0       0       0       0
  3608 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3610 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3611 ;;Total ram usage:        7 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		i1_printf
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text19
  3621  0011E4                     __ptext19:
  3622                           	opt stack 0
  3623  0011E4                     i1___lwdiv:
  3624                           	opt stack 22
  3625                           
  3626                           ;incstack = 0
  3627  0011E4  0E00               	movlw	0
  3628  0011E6  6E06               	movwf	i1___lwdiv@quotient+1,c
  3629  0011E8  0E00               	movlw	0
  3630  0011EA  6E05               	movwf	i1___lwdiv@quotient,c
  3631  0011EC  5003               	movf	i1___lwdiv@divisor,w,c
  3632  0011EE  1004               	iorwf	i1___lwdiv@divisor+1,w,c
  3633  0011F0  B4D8               	btfsc	status,2,c
  3634  0011F2  D01C               	goto	i1l589
  3635  0011F4  0E01               	movlw	1
  3636  0011F6  6E07               	movwf	i1___lwdiv@counter,c
  3637  0011F8  D004               	goto	i1l1188
  3638  0011FA                     i1l1186:
  3639  0011FA  90D8               	bcf	status,0,c
  3640  0011FC  3603               	rlcf	i1___lwdiv@divisor,f,c
  3641  0011FE  3604               	rlcf	i1___lwdiv@divisor+1,f,c
  3642  001200  2A07               	incf	i1___lwdiv@counter,f,c
  3643  001202                     i1l1188:
  3644  001202  AE04               	btfss	i1___lwdiv@divisor+1,7,c
  3645  001204  D7FA               	goto	i1l1186
  3646  001206                     i1l1190:
  3647  001206  90D8               	bcf	status,0,c
  3648  001208  3605               	rlcf	i1___lwdiv@quotient,f,c
  3649  00120A  3606               	rlcf	i1___lwdiv@quotient+1,f,c
  3650  00120C  5003               	movf	i1___lwdiv@divisor,w,c
  3651  00120E  5C01               	subwf	i1___lwdiv@dividend,w,c
  3652  001210  5004               	movf	i1___lwdiv@divisor+1,w,c
  3653  001212  5802               	subwfb	i1___lwdiv@dividend+1,w,c
  3654  001214  A0D8               	btfss	status,0,c
  3655  001216  D005               	goto	i1l1198
  3656  001218  5003               	movf	i1___lwdiv@divisor,w,c
  3657  00121A  5E01               	subwf	i1___lwdiv@dividend,f,c
  3658  00121C  5004               	movf	i1___lwdiv@divisor+1,w,c
  3659  00121E  5A02               	subwfb	i1___lwdiv@dividend+1,f,c
  3660  001220  8005               	bsf	i1___lwdiv@quotient,0,c
  3661  001222                     i1l1198:
  3662  001222  90D8               	bcf	status,0,c
  3663  001224  3204               	rrcf	i1___lwdiv@divisor+1,f,c
  3664  001226  3203               	rrcf	i1___lwdiv@divisor,f,c
  3665  001228  2E07               	decfsz	i1___lwdiv@counter,f,c
  3666  00122A  D7ED               	goto	i1l1190
  3667  00122C                     i1l589:
  3668  00122C  C005  F001         	movff	i1___lwdiv@quotient,?i1___lwdiv
  3669  001230  C006  F002         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  3670  001234  0012               	return		;funcret
  3671  001236                     __end_ofi1___lwdiv:
  3672                           	opt stack 0
  3673                           pclatu	equ	0xFFB
  3674                           pclath	equ	0xFFA
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           intcon	equ	0xFF2
  3682                           postinc0	equ	0xFEE
  3683                           plusw0	equ	0xFEB
  3684                           fsr0h	equ	0xFEA
  3685                           fsr0l	equ	0xFE9
  3686                           wreg	equ	0xFE8
  3687                           postdec1	equ	0xFE5
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           bsr	equ	0xFE0
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           plusw2	equ	0xFDB
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           pclatu	equ	0xFFB
  3699                           pclath	equ	0xFFA
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           intcon	equ	0xFF2
  3707                           postinc0	equ	0xFEE
  3708                           plusw0	equ	0xFEB
  3709                           fsr0h	equ	0xFEA
  3710                           fsr0l	equ	0xFE9
  3711                           wreg	equ	0xFE8
  3712                           postdec1	equ	0xFE5
  3713                           fsr1h	equ	0xFE2
  3714                           fsr1l	equ	0xFE1
  3715                           bsr	equ	0xFE0
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           plusw2	equ	0xFDB
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724                           	psect	rparam
  3725  0000                     pclatu	equ	0xFFB
  3726                           pclath	equ	0xFFA
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           postinc0	equ	0xFEE
  3735                           plusw0	equ	0xFEB
  3736                           fsr0h	equ	0xFEA
  3737                           fsr0l	equ	0xFE9
  3738                           wreg	equ	0xFE8
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           bsr	equ	0xFE0
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           plusw2	equ	0xFDB
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751                           	psect	temp
  3752  00003E                     btemp:
  3753                           	opt stack 0
  3754  00003E                     	ds	1
  3755  0000                     int$flags	set	btemp
  3756                           pclatu	equ	0xFFB
  3757                           pclath	equ	0xFFA
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           postinc0	equ	0xFEE
  3766                           plusw0	equ	0xFEB
  3767                           fsr0h	equ	0xFEA
  3768                           fsr0l	equ	0xFE9
  3769                           wreg	equ	0xFE8
  3770                           postdec1	equ	0xFE5
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           bsr	equ	0xFE0
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           plusw2	equ	0xFDB
  3778                           fsr2h	equ	0xFDA
  3779                           fsr2l	equ	0xFD9
  3780                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    8
    Data        8
    BSS         180
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      61
    BANK0           160     26      31
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_12(CODE[3]), STR_11(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_17(CODE[20]), STR_16(CODE[4]), STR_14(CODE[12]), STR_13(CODE[4]), 
		 -> STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_17(CODE[20]), STR_14(CODE[12]), STR_10(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_16(CODE[4]), STR_13(CODE[4]), STR_9(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[6]), ROM(CODE[32767]), 

    S32$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S32$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S32$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _main in BANK0

    _main->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte
    _D_UART_Init->___aldiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4062
                        _D_PORT_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     595
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2294
                                             21 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    20      3    1770
                                              7 BANK0     14    11      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5    1142
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     753
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              17    17      0     967
                                             24 COMRAM    17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (6) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _fillDataBuffer                                       1     1      0     967
                                             23 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (7) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            25    20      5     725
                                              7 COMRAM    16    11      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (10) i1_writeByte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PORT_Init
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      1F       5       19.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      3D       1       64.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      20        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 29 15:59:29 2016

                     l53 12B8              __CFG_BOR$ON 000000                       bsr 000FE0  
            __CFG_BORV$3 000000             _ackCharacter 0038             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l105 127C                      l180 0AF4                      l589 10C4  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      prod 000FF3  
                    wreg 000FE8             __CFG_FOSC$HS 000000      __end_ofi1_writeByte 12CE  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1620 0D36  
                   l1612 0CF8                     l1540 1086                     l1700 0E16  
                   l1630 0D90                     l1622 0D3C                     l1606 0CDA  
                   l1536 1074                     l1560 0A5C                     l1618 0D26  
                   l1634 0DA2                     l1538 1080                     l1554 0A40  
                   l1714 0E98                     l1548 10B6                     l1572 0ABE  
                   l1564 0A66                     l1638 0DBE                     l1590 0B4E  
                   l1558 0A54                     l1584 0AFA                     l1592 0B5A  
                   l1682 118E                     l1684 119A                     l1688 11D4  
                   STR_1 0860                     STR_2 085E                     STR_3 0855  
                   STR_4 0851                     STR_5 0859                     STR_6 0862  
                   STR_7 0862                     STR_8 083A                     STR_9 085C  
                   u1131 1258                     u1217 0FA4                     u1171 0E2A  
                   i1l53 12C4                     _baud 0036                     _main 0DD0  
                   _read 002A                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr0l 000FE9                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9                     btemp 003E  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 00B4            __CFG_IESO$OFF 000000          __end_ofi1_putch 12D8  
          __CFG_MCLRE$ON 000000             ___param_bank 000010           _startCharacter 003A  
          __CFG_PLLDIV$5 000000          __end_of___aldiv 0DD0                    ?_main 0001  
                  STR_10 0840                    STR_11 0849                    STR_12 0837  
                  STR_13 0845                    STR_14 082E                    STR_15 084D  
                  STR_16 0845                    STR_17 0809                    STR_18 081D  
        __end_of___lwdiv 10CE                    i1l114 006C                    i1l180 0C30  
                  i1l589 122C                    _RCREG 000FAE     __size_of_acknowledge 0060  
                  _SPBRG 000FAF                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TXREG 000FAD  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _putch 12A6  
        i1writeByte@data 0001                    tablat 000FF5             ?_D_UART_Init 006E  
           ?_D_UART_Read 0060                    plusw0 000FEB                    plusw2 000FDB  
                  status 000FD8             ?_D_PORT_Init 0001       __size_ofi1___lwdiv 0052  
          _stopCharacter 003C         __end_ofi1_printf 0CB6               i1printf@ap 0011  
        __initialization 112E         _D_UART_Init$1308 0073             __end_of_main 0EDC  
                 ??_main 007A              i1_writeByte 12C2            __activetblptr 000002  
        __CFG_CCP2MX$OFF 000000                   _ADCON1 000FC1                   ?_putch 0001  
                 i1l1232 0BA6                   i1l1234 0BAC                   i1l1228 0B96  
                 i1l1412 098E                   i1l1404 0964                   i1l1190 1206  
                 i1l1246 0C04                   i1l1238 0BB4                   i1l1264 0C80  
                 i1l1440 0A08                   i1l1186 11FA                   i1l1258 0C36  
                 i1l1266 0C88                   i1l1434 09F6                   i1l1426 09DE  
                 i1l1418 09B4                   i1l1370 089E                   i1l1362 086A  
                 i1l1188 1202                   i1l1436 0A00                   i1l1198 1222  
                 i1l1390 0914                   i1l1366 0896                   i1l1384 08EE  
                 i1l1376 08C4                   i1l1398 093E                ??i1_putch 0002  
                 _LowISR 0018           __CFG_XINST$OFF 000000                ??___aldiv 0068  
              ??___lwdiv 0064         __end_of_readByte 12E0                   clear_0 1134  
                 clear_1 1140                   _printf 0A32                   _strcmp 118C  
      __end_ofi1___lwdiv 1236             __pdataCOMRAM 0038    D_UART_Init@interrupts 0072  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8            ?_D_UART_Write 0075          D_UART_Init@baud 0070  
        D_UART_Init@name 006E               __accesstop 0060  __end_of__initialization 117E  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001              i1printf@idx 0013  
            i1printf@val 0014           __pcstackCOMRAM 0001             __pidataBANK0 12E6  
            i1putch@data 0002            __end_of_putch 12B4         _messageCharacter 007D  
 __size_of_D_UART_Enable 0026           ??_D_UART_Write 0079                ?i1_printf 0008  
                ??_putch 0061               __pbssBANK1 0100     __size_of_D_UART_Init 00A8  
   __size_of_D_UART_Read 002C                  ?_LowISR 0001     __size_of_D_PORT_Init 001E  
             _deviceName 007A                  ?_printf 0067                  ?_strcmp 0060  
             ??i1_printf 000D  __size_of_fillDataBuffer 01CC      D_UART_Enable@enable 0060  
        __CFG_VREGEN$OFF 000000                  i1_putch 12CE                ?_readByte 0001  
     __size_of_writeByte 000E            _D_UART_Enable 1262                  __Hparam 0000  
                __Lparam 0000          __size_of_LowISR 009C               _readBuffer 0100  
                ___aldiv 0CB6                  ___lwdiv 1056             __psmallconst 0800  
        __CFG_STVREN$OFF 000000            ??_acknowledge 0018                  __pcinit 112E  
                __ramtop 0800                  __ptext0 0DD0                  __ptext1 118C  
                __ptext2 0EDC                  __ptext3 0A32                  __ptext4 12A6  
                __ptext5 12B4                  __ptext6 1056                  __ptext7 1236  
                __ptext8 0FAE                  __ptext9 0CB6          __size_of_printf 015A  
           ?i1_writeByte 0001          __size_of_strcmp 0058        __end_of_hexpowers 0809  
      i1___lwdiv@divisor 0003        i1___lwdiv@counter 0007         ___aldiv@dividend 0060  
   end_of_initialization 117E               ??_readByte 0001            __Lmediumconst 0000  
         ?_D_UART_Enable 0001     __end_of_D_UART_Write 0FAE                _RCSTAbits 000FAB  
                printf@c 0074                  printf@f 0067         ___aldiv@quotient 006A  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                  strcmp@r 0065                _PORTAbits 000F80  
      __end_of_writeByte 12C2                _TRISCbits 000F94      __end_of_acknowledge 112E  
              i1___lwdiv 11E4                _TXSTAbits 000FAC             i1printf@flag 0010  
           i1printf@prec 0016           __end_of_LowISR 00B4              _BAUDCONbits 000FB8  
          __pidataCOMRAM 12E0           __end_of_printf 0B8C           __end_of_strcmp 11E4  
    start_initialization 112E           _fillDataBuffer 0866                i1printf@c 0017  
              i1printf@f 0008               ?i1___lwdiv 0001        __size_ofi1_printf 012A  
        ??_D_UART_Enable 0060                 ??_LowISR 0019              __pdataBANK0 007D  
       __CFG_LPT1OSC$OFF 000000              _acknowledge 10CE         D_UART_Write@data 0077  
               ??_printf 006A                 ??_strcmp 0064   __end_of_fillDataBuffer 0A32  
            __pbssCOMRAM 002A     __size_ofi1_writeByte 000C            __pcstackBANK0 0060  
          ??_D_UART_Init 0073            ??_D_UART_Read 0066                 ?i1_putch 0001  
  __size_of_D_UART_Write 00D2            ??_D_PORT_Init 0060                __pnvBANK0 007A  
      __size_of_readByte 0008         ___lwdiv@dividend 0060                 ?___aldiv 0060  
               ?___lwdiv 0060              __pintcodelo 0018       fillDataBuffer@data 0018  
        ?_fillDataBuffer 0001              __smallconst 0800             _D_UART_Write 0EDC  
              _hexpowers 0801                _readReady 0037         ___lwdiv@quotient 0065  
            ??i1___lwdiv 0005           __size_of_putch 000E          ___aldiv@divisor 0064  
        ___aldiv@counter 0068                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
    __end_of_D_UART_Init 1056      __end_of_D_UART_Read 1262                 _PIR1bits 000F9E  
               _RCONbits 000FD0         __CFG_WDTPS$32768 000000      __end_of_D_PORT_Init 12A6  
             printf@flag 006D               printf@prec 0073                 i1_printf 0B8C  
              _writeByte 12B4                copy_data0 1172         __size_ofi1_putch 000A  
               __Hrparam 0000                 __Lrparam 0000         __size_of___aldiv 011A  
       __size_of___lwdiv 0078          ___lwdiv@divisor 0062          ___lwdiv@counter 0064  
               __ptext10 1262                 __ptext11 1288                 __ptext13 12D8  
               __ptext14 0866                 __ptext15 10CE                 __ptext16 0B8C  
               __ptext17 12CE                 __ptext18 12C2                 __ptext19 11E4  
             ?_writeByte 0001       i1___lwdiv@dividend 0001              _D_UART_Init 0FAE  
            _D_UART_Read 1236                 _readData 0030                 _readByte 12D8  
          __size_of_main 010C              _D_PORT_Init 1288                 int$flags 003E  
              printf@idx 006E                printf@val 0071             ?_acknowledge 0001  
  __CFG_CPUDIV$OSC1_PLL2 000000       i1___lwdiv@quotient 0005                putch@data 0061  
             _INTCONbits 000FF2                 intlevel1 0000    __end_of_D_UART_Enable 1288  
               printf@ap 006F         ??_fillDataBuffer 0018      D_UART_Write@command 0075  
          ??i1_writeByte 0001                 strcmp@s1 0060                 strcmp@s2 0062  
          writeByte@data 0060             ___aldiv@sign 0069              ??_writeByte 0060  
